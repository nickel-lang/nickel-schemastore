# DO NOT EDIT
# This file was automatically generated using json-schema-to-nickel
let js2n
  = import "../lib/main.ncl"
  in
let rec refs
    = {
      "oneOf.0.allOf.1" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties =
                          {
                              selfservice =
                                std.contract.any_of
                                    [
                                      js2n.Null,
                                      Bool,
                                      Number,
                                      String,
                                      js2n.record.Record
                                        {
                                          additional = 'Some Dyn,
                                          patterns = {},
                                          properties =
                                            {
                                                flows =
                                                  js2n.OneOf
                                                      [
                                                        std.contract.any_of
                                                          [
                                                            js2n.Null,
                                                            Bool,
                                                            Number,
                                                            String,
                                                            js2n.record.Record
                                                              {
                                                                additional =
                                                                  'Some Dyn,
                                                                patterns = {},
                                                                properties =
                                                                  {
                                                                      verification =
                                                                        std.contract.any_of
                                                                            [
                                                                              js2n.Null,
                                                                              Bool,
                                                                              Number,
                                                                              String,
                                                                              js2n.record.Record
                                                                                {
                                                                                  additional =
                                                                                    'Some
                                                                                        Dyn,
                                                                                  patterns =
                                                                                    {},
                                                                                  properties =
                                                                                    {
                                                                                        enabled =
                                                                                          js2n.Const
                                                                                              true,
                                                                                      },
                                                                                  required =
                                                                                    {
                                                                                        enabled =
                                                                                          true,
                                                                                      },
                                                                                },
                                                                              Array
                                                                                Dyn
                                                                            ],
                                                                    },
                                                                required =
                                                                  {
                                                                      verification =
                                                                        true,
                                                                    },
                                                              },
                                                            Array Dyn
                                                          ],
                                                        std.contract.any_of
                                                          [
                                                            js2n.Null,
                                                            Bool,
                                                            Number,
                                                            String,
                                                            js2n.record.Record
                                                              {
                                                                additional =
                                                                  'Some Dyn,
                                                                patterns = {},
                                                                properties =
                                                                  {
                                                                      recovery =
                                                                        std.contract.any_of
                                                                            [
                                                                              js2n.Null,
                                                                              Bool,
                                                                              Number,
                                                                              String,
                                                                              js2n.record.Record
                                                                                {
                                                                                  additional =
                                                                                    'Some
                                                                                        Dyn,
                                                                                  patterns =
                                                                                    {},
                                                                                  properties =
                                                                                    {
                                                                                        enabled =
                                                                                          js2n.Const
                                                                                              true,
                                                                                      },
                                                                                  required =
                                                                                    {
                                                                                        enabled =
                                                                                          true,
                                                                                      },
                                                                                },
                                                                              Array
                                                                                Dyn
                                                                            ],
                                                                    },
                                                                required =
                                                                  {
                                                                      recovery =
                                                                        true,
                                                                    },
                                                              },
                                                            Array Dyn
                                                          ]
                                                      ],
                                              },
                                          required = { flows = true, },
                                        },
                                      Array Dyn
                                    ],
                            },
                        required = { selfservice = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "courier" ],
                    Array Dyn
                  ]) js2n.Always,
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties =
                          {
                              ciphers =
                                std.contract.any_of
                                    [
                                      js2n.Null,
                                      Bool,
                                      Number,
                                      String,
                                      js2n.record.Record
                                        {
                                          additional = 'Some Dyn,
                                          patterns = {},
                                          properties =
                                            {
                                                algorithm =
                                                  js2n.OneOf
                                                      [
                                                        js2n.Const "aes",
                                                        js2n.Const
                                                          "xchacha20-poly1305"
                                                      ],
                                              },
                                          required = { algorithm = true, },
                                        },
                                      Array Dyn
                                    ],
                            },
                        required = { ciphers = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    {
                      secrets
                        | std.contract.any_of
                          [
                            js2n.Null,
                            Bool,
                            Number,
                            String,
                            js2n.record.Required [ "cipher" ],
                            Array Dyn
                          ],
                      ..
                    },
                    Array Dyn
                  ]) js2n.Always,
              {
                ciphers
                  | {
                    algorithm
                      | std.enum.TagOrString
                      | [| 'xchacha20-poly1305, 'aes, 'noop |]
                      | doc "One of the values: noop, aes, xchacha20-poly1305"
                      | optional,
                    ..
                  }
                  | optional,
                clients
                  | {
                    http
                      | {
                        disallow_private_ip_ranges
                          | Bool
                          | doc "Disallow all outgoing HTTP calls to private IP ranges. This feature can help protect against SSRF attacks."
                          | optional,
                        private_ip_exception_urls
                          | Array String
                          | doc "Allows the given URLs to be called despite them being in the private IP range. URLs need to have an exact and case-sensitive match to be excempt."
                          | optional,
                        ..
                      }
                      | doc "Configure how outgoing HTTP calls behave."
                      | optional,
                    ..
                  }
                  | doc "Configure how outgoing network calls behave."
                  | optional,
                config
                  | Array String
                  | doc "This is a CLI flag and environment variable and can not be set using the config file."
                  | optional,
                cookies
                  | {
                    domain
                      | String
                      | doc "Sets the cookie domain for session and CSRF cookies. Useful when dealing with subdomains. Use with care!"
                      | optional,
                    path
                      | String
                      | doc "Sets the session and CSRF cookie path. Use with care!"
                      | optional,
                    same_site
                      | std.enum.TagOrString
                      | [| 'None, 'Lax, 'Strict |]
                      | doc "Sets the session and CSRF cookie SameSite."
                      | optional,
                  }
                  | doc "Configure the HTTP Cookies. Applies to both CSRF and session cookies."
                  | optional,
                courier
                  | {
                    channels
                      | Array
                        {
                          id
                            | js2n.string.MaxLength 32
                            | std.enum.TagOrString
                            | [| 'sms |]
                            | doc "The channel id. Corresponds to the .via property of the identity schema for recovery, verification, etc. Currently only phone is supported.",
                          request_config
                            | refs."oneOf.0.allOf.1.definitions.httpRequestConfig"
                            | { _ | Dyn },
                          type
                            | std.enum.TagOrString
                            | [| 'http |]
                            | doc "The channel type. Currently only http is supported."
                            | optional,
                        }
                      | optional,
                    delivery_strategy
                      | std.enum.TagOrString
                      | [| 'http, 'smtp |]
                      | doc "Defines how emails will be sent, either through SMTP (default) or HTTP."
                      | optional,
                    http
                      | {
                        request_config
                          | refs."oneOf.0.allOf.1.definitions.httpRequestConfig"
                          | { _ | Dyn }
                          | optional,
                      }
                      | doc "Configures outgoing emails using HTTP."
                      | optional,
                    message_retries
                      | std.number.Integer
                      | doc "Defines the maximum number of times the sending of a message is retried after it failed before it is marked as abandoned"
                      | optional,
                    sms
                      | {
                        enabled
                          | Bool
                          | doc "Determines if SMS functionality is enabled"
                          | optional,
                        from
                          | String
                          | doc "The recipient of a sms will see this as the sender address."
                          | optional,
                        request_config
                          | {
                            additionalProperties | js2n.Never | optional,
                            auth
                              | js2n.OneOf
                                [
                                  refs."oneOf.0.allOf.1.definitions.webHookAuthApiKeyProperties",
                                  refs."oneOf.0.allOf.1.definitions.webHookAuthBasicAuthProperties"
                                ]
                              | { _ | Dyn }
                              | doc "Define which auth mechanism to use for auth with the SMS provider"
                              | optional,
                            body
                              | js2n.string.Matches
                                "^(http|https|file|base64)://"
                              | doc "URI pointing to the jsonnet template used for payload generation. Only used for those HTTP methods, which support HTTP body payloads"
                              | optional,
                            headers
                              | { _ | String }
                              | doc "The HTTP headers that must be applied to request"
                              | optional,
                            method
                              | String
                              | doc "The HTTP method to use (GET, POST, etc).",
                            url
                              | js2n.string.Matches "^https?:\\/\\/.*"
                              | doc "This URL will be used to connect to the SMS provider.",
                          }
                          | optional,
                      }
                      | doc "Configures outgoing sms messages using HTTP protocol with generic SMS provider"
                      | optional,
                    smtp
                      | {
                        client_cert_path
                          | String
                          | doc "Path of the client X.509 certificate, in case of certificate based client authentication to the SMTP server."
                          | optional,
                        client_key_path
                          | String
                          | doc "Path of the client certificate private key, in case of certificate based client authentication to the SMTP server"
                          | optional,
                        connection_uri
                          | js2n.string.Matches "^smtps?:\\/\\/.*"
                          | doc "This URI will be used to connect to the SMTP server. Use the scheme smtps for implicit TLS sessions or smtp for explicit StartTLS/cleartext sessions. Please note that TLS is always enforced with certificate trust verification by default for security reasons on both schemes. With the smtp scheme you can use the query parameter (`?disable_starttls=true`) to allow cleartext sessions or (`?disable_starttls=false`) to enforce StartTLS (default behaviour). Additionally, use the query parameter to allow (`?skip_ssl_verify=true`) or disallow (`?skip_ssl_verify=false`) self-signed TLS certificates (default behaviour) on both implicit and explicit TLS sessions."
                          | optional,
                        from_address
                          | String
                          | doc "The recipient of an email will see this as the sender address."
                          | optional,
                        from_name
                          | String
                          | doc "The recipient of an email will see this as the sender name."
                          | optional,
                        headers
                          | { _ | String }
                          | doc "These headers will be passed in the SMTP conversation -- e.g. when using the AWS SES SMTP interface for cross-account sending."
                          | optional,
                        local_name
                          | String
                          | doc "Identifier used in the SMTP HELO/EHLO command. Some SMTP relays require a unique identifier."
                          | optional,
                      }
                      | doc "Configures outgoing emails using the SMTP protocol."
                      | optional,
                    template_override_path
                      | String
                      | doc "You can override certain or all message templates by pointing this key to the path where the templates are located."
                      | optional,
                    templates
                      | {
                        login_code
                          | {
                            valid
                              | {
                                email
                                  | refs."oneOf.0.allOf.1.definitions.emailCourierTemplate"
                                  | { _ | Dyn },
                                sms
                                  | refs."oneOf.0.allOf.1.definitions.smsCourierTemplate"
                                  | { _ | Dyn }
                                  | optional,
                              }
                              | optional,
                          }
                          | optional,
                        recovery
                          | refs."oneOf.0.allOf.1.definitions.courierTemplates"
                          | { _ | Dyn }
                          | optional,
                        recovery_code
                          | refs."oneOf.0.allOf.1.definitions.courierTemplates"
                          | { _ | Dyn }
                          | optional,
                        registration_code
                          | {
                            valid
                              | {
                                email
                                  | refs."oneOf.0.allOf.1.definitions.emailCourierTemplate"
                                  | { _ | Dyn },
                              }
                              | optional,
                          }
                          | optional,
                        verification
                          | refs."oneOf.0.allOf.1.definitions.courierTemplates"
                          | { _ | Dyn }
                          | optional,
                        verification_code
                          | refs."oneOf.0.allOf.1.definitions.courierTemplates"
                          | { _ | Dyn }
                          | optional,
                      }
                      | optional,
                    worker
                      | {
                        pull_count
                          | std.number.Integer
                          | doc "Defines how many messages are pulled from the queue at once."
                          | optional,
                        pull_wait
                          | js2n.string.Matches "^([0-9]+(ns|us|ms|s|m|h))+$"
                          | doc "Defines how long the worker waits before pulling messages from the queue again."
                          | optional,
                        ..
                      }
                      | doc "Configures the dispatch worker."
                      | optional,
                  }
                  | doc "The courier is responsible for sending and delivering messages over email, sms, and other means."
                  | optional,
                database
                  | {
                    cleanup
                      | {
                        batch_size
                          | std.number.Integer
                          | js2n.number.Minimum 1
                          | doc "Controls how many records should be purged from one table during database cleanup task"
                          | optional,
                        older_than
                          | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                          | doc "Controls how old records do we want to leave"
                          | optional,
                        sleep
                          | {
                            tables
                              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                              | doc "Controls the delay time between cleaning each table in one cleanup iteration"
                              | optional,
                            ..
                          }
                          | doc "Configures delays between each step of the cleanup process. It is useful to tune the process so it will be efficient and performant."
                          | optional,
                        ..
                      }
                      | doc "Settings that controls how the database cleanup process is configured (delays, batch size, etc.)"
                      | optional,
                  }
                  | doc "Miscellaneous settings used in database related tasks (cleanup, etc.)"
                  | optional,
                dev | Bool | optional,
                dsn
                  | String
                  | doc "DSN is used to specify the database credentials as a connection URI.",
                enterprise
                  | {
                    identity_schema_fallback_url_template
                      | String
                      | doc "A fallback URL template used when looking up identity schemas."
                      | optional,
                  }
                  | doc "Specifies enterprise features. Only effective in the Ory Network or with a valid license."
                  | optional,
                expose-metrics-port
                  | std.number.Integer
                  | js2n.number.Maximum 65535
                  | js2n.number.Minimum 0
                  | doc "The port the courier's metrics endpoint listens on (0/disabled by default). This is a CLI flag and environment variable and can not be set using the config file."
                  | optional,
                feature_flags
                  | std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      {
                        cacheable_sessions
                          | Bool
                          | doc "If enabled allows Ory Sessions to be cached. Only effective in the Ory Network."
                          | optional,
                        cacheable_sessions_max_age
                          | js2n.string.Matches "^([0-9]+(ns|us|ms|s|m|h))+$"
                          | doc "Set how long Ory Sessions are cached on the edge. If unset, the session expiry will be used. Only effective in the Ory Network."
                          | optional,
                        faster_session_extend
                          | Bool
                          | doc "If enabled allows faster session extension by skipping the session lookup. Disabling this feature will be deprecated in the future."
                          | optional,
                        use_continue_with_transitions
                          | Bool
                          | doc "If enabled allows new flow transitions using `continue_with` items."
                          | optional,
                      },
                      Array Dyn
                    ]
                  | optional,
                hashers
                  | {
                    algorithm
                      | std.enum.TagOrString
                      | [| 'bcrypt, 'argon2 |]
                      | doc m%"
                        One of the values: argon2, bcrypt.
                        Any other hashes will be migrated to the set algorithm once an identity authenticates using their password.
                      "%
                      | optional,
                    argon2
                      | {
                        dedicated_memory
                          | js2n.string.Matches "^[0-9]+(B|KB|MB|GB|TB|PB|EB)"
                          | doc "The memory dedicated for Kratos. As password hashing is very resource intense, Kratos will monitor the memory consumption and warn about high values."
                          | optional,
                        expected_deviation
                          | js2n.string.Matches "^([0-9]+(ns|us|ms|s|m|h))+$"
                          | doc "The standard deviation expected for hashing operations. If this value is exceeded you will be warned in the logs to adjust the parameters."
                          | optional,
                        expected_duration
                          | js2n.string.Matches "^([0-9]+(ns|us|ms|s|m|h))+$"
                          | doc "The time a hashing operation (~login latency) should take."
                          | optional,
                        iterations
                          | std.number.Integer
                          | js2n.number.Minimum 1
                          | optional,
                        key_length
                          | std.number.Integer
                          | js2n.number.Minimum 16
                          | optional,
                        memory
                          | js2n.string.Matches "^[0-9]+(B|KB|MB|GB|TB|PB|EB)"
                          | optional,
                        parallelism
                          | std.number.Integer
                          | js2n.number.Minimum 1
                          | doc "Number of parallel workers, defaults to 2*runtime.NumCPU()."
                          | optional,
                        salt_length
                          | std.number.Integer
                          | js2n.number.Minimum 16
                          | optional,
                      }
                      | optional,
                    bcrypt
                      | {
                        cost
                          | std.number.Integer
                          | js2n.number.Maximum 31
                          | js2n.number.Minimum 4,
                      }
                      | optional,
                  }
                  | optional,
                help | Bool | optional,
                identity
                  | {
                    default_schema_id
                      | String
                      | doc "This Identity Schema will be used as the default for self-service flows. Its ID needs to exist in the \"schemas\" list."
                      | optional,
                    schemas
                      | js2n.array.MinItems 1
                      | Array
                        {
                          id | String,
                          url
                            | String
                            | doc "URL for JSON Schema which describes a identity's traits. Can be a file path, a https URL, or a base64 encoded string.",
                          ..
                        }
                      | doc "Note that identities that used the \"default_schema_url\" field in older kratos versions will be corrupted unless you specify their schema url with the id \"default\" in this list.",
                  },
                log
                  | {
                    format
                      | std.enum.TagOrString
                      | [| 'text, 'json |]
                      | doc "The log format can either be text or JSON."
                      | optional,
                    leak_sensitive_values
                      | Bool
                      | doc "If set will leak sensitive values (e.g. emails) in the logs."
                      | optional,
                    level
                      | std.enum.TagOrString
                      | [|
                        'panic,
                        'fatal,
                        'error,
                        'warning,
                        'info,
                        'debug,
                        'trace
                      |]
                      | doc "Debug enables stack traces on errors. Can also be set using environment variable LOG_LEVEL."
                      | optional,
                    redaction_text
                      | String
                      | doc "Text to use, when redacting sensitive log value."
                      | optional,
                  }
                  | doc "Configure logging using the following options. Logging will always be sent to stdout and stderr."
                  | optional,
                oauth2_provider
                  | {
                    headers
                      | { _ | String }
                      | doc "These headers will be passed in HTTP request to the OAuth2 Provider."
                      | optional,
                    override_return_to
                      | Bool
                      | doc "Override the return_to query parameter with the OAuth2 provider request URL when perfoming an OAuth2 login flow."
                      | optional,
                    url
                      | String
                      | doc "If set, the login and registration flows will handle the Ory OAuth 2.0 & OpenID `login_challenge` query parameter to serve as an OpenID Connect Provider. This URL should point to Ory Hydra when you are not running on the Ory Network and be left untouched otherwise."
                      | optional,
                  }
                  | optional,
                organizations
                  | Array Dyn
                  | doc "Please use selfservice.methods.b2b instead. This key will be removed. Only effective in the Ory Network."
                  | optional,
                preview
                  | {
                    default_read_consistency_level
                      | std.enum.TagOrString
                      | [| 'eventual, 'strong |]
                      | doc "The default consistency level to use when reading from the database. Defaults to `strong` to not break existing API contracts. Only set this to `eventual` if you can accept that other read APIs will suddenly return eventually consistent results. It is only effective in Ory Network."
                      | optional,
                    ..
                  }
                  | optional,
                secrets
                  | {
                    cipher
                      | js2n.array.MinItems 1
                      | Array (
                        std.contract.Sequence
                          [ js2n.string.MaxLength 32, js2n.string.MinLength 32 ]
                      )
                      | doc "The first secret in the array is used for encryption data while all other keys are used to decrypt older data that were signed with."
                      | optional,
                    cookie
                      | js2n.array.UniqueItems
                      | Array (js2n.string.MinLength 16)
                      | doc "The first secret in the array is used for encrypting cookies while all other keys are used to decrypt older cookies that were signed with that old secret."
                      | optional,
                    "default"
                      | js2n.array.UniqueItems
                      | Array (js2n.string.MinLength 16)
                      | doc "The first secret in the array is used for signing and encrypting things while all other keys are used to verify and decrypt older things that were signed with that old secret."
                      | optional,
                  }
                  | optional,
                security
                  | {
                    account_enumeration
                      | {
                        mitigate
                          | Bool
                          | doc "Mitigate account enumeration by making it harder to figure out if an identifier (email, phone number) exists or not. Enabling this setting degrades user experience. This setting does not mitigate all possible attack vectors yet."
                          | optional,
                        ..
                      }
                      | optional,
                    ..
                  }
                  | optional,
                selfservice
                  | {
                    allowed_return_urls
                      | Array String
                      | doc "List of URLs that are allowed to be redirected to. A redirection request is made by appending `?return_to=...` to Login, Registration, and other self-service flows."
                      | optional,
                    default_browser_return_url
                      | refs."oneOf.0.allOf.1.definitions.defaultReturnTo"
                      | String,
                    flows
                      | {
                        error
                          | {
                            ui_url
                              | String
                              | doc "URL where the Ory Kratos Error UI is hosted. Check the [reference implementation](https://github.com/ory/kratos-selfservice-ui-node)."
                              | optional,
                          }
                          | optional,
                        login
                          | {
                            after
                              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterLogin"
                              | { _ | Dyn }
                              | optional,
                            before
                              | refs."oneOf.0.allOf.1.definitions.selfServiceBeforeLogin"
                              | { _ | Dyn }
                              | optional,
                            lifespan
                              | js2n.string.Matches
                                "^([0-9]+(ns|us|ms|s|m|h))+$"
                              | optional,
                            style
                              | std.enum.TagOrString
                              | [| 'identifier_first, 'unified |]
                              | doc "The style of the login flow. If set to `unified` the login flow will be a one-step process. If set to `identifier_first` (experimental!) the login flow will first ask for the identifier and then the credentials."
                              | optional,
                            ui_url
                              | String
                              | doc "URL where the Login UI is hosted. Check the [reference implementation](https://github.com/ory/kratos-selfservice-ui-node)."
                              | optional,
                          }
                          | optional,
                        logout
                          | {
                            after
                              | {
                                default_browser_return_url
                                  | refs."oneOf.0.allOf.1.definitions.defaultReturnTo"
                                  | String
                                  | optional,
                              }
                              | optional,
                          }
                          | optional,
                        recovery
                          | {
                            after
                              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterRecovery"
                              | { _ | Dyn }
                              | optional,
                            before
                              | refs."oneOf.0.allOf.1.definitions.selfServiceBeforeRecovery"
                              | { _ | Dyn }
                              | optional,
                            enabled
                              | Bool
                              | doc "If set to true will enable [Account Recovery](https://www.ory.sh/kratos/docs/self-service/flows/password-reset-account-recovery/)."
                              | optional,
                            lifespan
                              | js2n.string.Matches
                                "^([0-9]+(ns|us|ms|s|m|h))+$"
                              | doc "Sets how long the recovery request is valid. If expired, the user has to redo the flow."
                              | optional,
                            notify_unknown_recipients
                              | Bool
                              | doc "Whether to notify recipients, if recovery was requested for their account."
                              | optional,
                            ui_url
                              | String
                              | doc "URL where the Ory Recovery UI is hosted. This is the page where users request and complete account recovery. Check the [reference implementation](https://github.com/ory/kratos-selfservice-ui-node)."
                              | optional,
                            use
                              | std.enum.TagOrString
                              | [| 'code, 'link |]
                              | doc "The strategy to use for recovery requests"
                              | optional,
                          }
                          | optional,
                        registration
                          | {
                            after
                              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterRegistration"
                              | { _ | Dyn }
                              | optional,
                            before
                              | refs."oneOf.0.allOf.1.definitions.selfServiceBeforeRegistration"
                              | { _ | Dyn }
                              | optional,
                            enable_legacy_one_step
                              | Bool
                              | doc "Two-step registration is a significantly improved sign up flow and recommended when using more than one sign up methods. To revert to one-step registration, set this to `true`."
                              | optional,
                            enabled
                              | Bool
                              | doc "If set to true will enable [User Registration](https://www.ory.sh/kratos/docs/self-service/flows/user-registration/)."
                              | optional,
                            lifespan
                              | js2n.string.Matches
                                "^([0-9]+(ns|us|ms|s|m|h))+$"
                              | optional,
                            login_hints
                              | Bool
                              | doc "When registration fails because an account with the given credentials or addresses previously signed up, provide login hints about available methods to sign in to the user."
                              | optional,
                            ui_url
                              | String
                              | doc "URL where the Registration UI is hosted. Check the [reference implementation](https://github.com/ory/kratos-selfservice-ui-node)."
                              | optional,
                          }
                          | optional,
                        settings
                          | {
                            after
                              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterSettings"
                              | { _ | Dyn }
                              | optional,
                            before
                              | refs."oneOf.0.allOf.1.definitions.selfServiceBeforeSettings"
                              | { _ | Dyn }
                              | optional,
                            lifespan
                              | js2n.string.Matches
                                "^([0-9]+(ns|us|ms|s|m|h))+$"
                              | optional,
                            privileged_session_max_age
                              | js2n.string.Matches
                                "^([0-9]+(ns|us|ms|s|m|h))+$"
                              | optional,
                            required_aal
                              | refs."oneOf.0.allOf.1.definitions.featureRequiredAal"
                              | String
                              | optional,
                            ui_url
                              | String
                              | doc "URL where the Settings UI is hosted. Check the [reference implementation](https://github.com/ory/kratos-selfservice-ui-node)."
                              | optional,
                          }
                          | optional,
                        verification
                          | {
                            after
                              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterVerification"
                              | { _ | Dyn }
                              | optional,
                            before
                              | refs."oneOf.0.allOf.1.definitions.selfServiceBeforeVerification"
                              | { _ | Dyn }
                              | optional,
                            enabled
                              | Bool
                              | doc "If set to true will enable [Email and Phone Verification and Account Activation](https://www.ory.sh/kratos/docs/self-service/flows/verify-email-account-activation/)."
                              | optional,
                            lifespan
                              | js2n.string.Matches
                                "^([0-9]+(ns|us|ms|s|m|h))+$"
                              | doc "Sets how long the verification request (for the UI interaction) is valid."
                              | optional,
                            notify_unknown_recipients
                              | Bool
                              | doc "Whether to notify recipients, if verification was requested for their address."
                              | optional,
                            ui_url
                              | String
                              | doc "URL where the Ory Verify UI is hosted. This is the page where users activate and / or verify their email or telephone number. Check the [reference implementation](https://github.com/ory/kratos-selfservice-ui-node)."
                              | optional,
                            use
                              | std.enum.TagOrString
                              | [| 'code, 'link |]
                              | doc "The strategy to use for verification requests"
                              | optional,
                          }
                          | optional,
                      }
                      | optional,
                    methods
                      | {
                        b2b
                          | {
                            config
                              | {
                                organizations
                                  | Array
                                    {
                                      domains | Array String | optional,
                                      id
                                        | String
                                        | doc "The ID of the organization."
                                        | optional,
                                      label
                                        | String
                                        | doc "The label of the organization."
                                        | optional,
                                      ..
                                    }
                                  | optional,
                              }
                              | optional,
                          }
                          | doc "Single Sign-On for B2B allows your customers to bring their own (workforce) identity server (e.g. OneLogin). This feature is not available in the open source licensed code."
                          | optional,
                        code
                          | std.contract.any_of
                            [
                              js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        mfa_enabled = js2n.Const false,
                                        passwordless_enabled = js2n.Const true,
                                      },
                                  required = {},
                                },
                              js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        mfa_enabled = js2n.Const true,
                                        passwordless_enabled = js2n.Const false,
                                      },
                                  required = {},
                                },
                              js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        mfa_enabled = js2n.Const false,
                                        passwordless_enabled = js2n.Const false,
                                      },
                                  required = {},
                                }
                            ]
                          | {
                            config
                              | {
                                lifespan
                                  | js2n.string.Matches
                                    "^([0-9]+(ns|us|ms|s|m|h))+$"
                                  | optional,
                                missing_credential_fallback_enabled
                                  | Bool
                                  | doc "Enabling this allows users to sign in with the code method, even if their identity schema or their credentials are not set up to use the code method. If enabled, a verified address (such as an email) will be used to send the code to the user. Use with caution and only if actually needed."
                                  | optional,
                                ..
                              }
                              | doc "Additional configuration for the code strategy."
                              | optional,
                            enabled | Bool | optional,
                            mfa_enabled | Bool | optional,
                            passwordless_enabled
                              | Bool
                              | doc "If set to true, code.enabled will be set to true as well."
                              | optional,
                            ..
                          }
                          | optional,
                        link
                          | {
                            config
                              | {
                                base_url | String | optional,
                                lifespan
                                  | js2n.string.Matches
                                    "^([0-9]+(ns|us|ms|s|m|h))+$"
                                  | optional,
                                ..
                              }
                              | doc "Additional configuration for the link strategy."
                              | optional,
                            enabled | Bool | optional,
                          }
                          | optional,
                        lookup_secret
                          | { enabled | Bool | optional, }
                          | optional,
                        oidc
                          | {
                            config
                              | {
                                base_redirect_uri
                                  | String
                                  | doc "Can be used to modify the base URL for OAuth2 Redirect URLs. If unset, the Public Base URL will be used."
                                  | optional,
                                providers
                                  | Array (
                                    std.contract.Sequence
                                      [
                                        refs."oneOf.0.allOf.1.definitions.selfServiceOIDCProvider",
                                        { _ | Dyn }
                                      ]
                                  )
                                  | doc "A list and configuration of OAuth2 and OpenID Connect providers Ory Kratos should integrate with."
                                  | optional,
                              }
                              | optional,
                            enabled | Bool | optional,
                          }
                          | optional,
                        passkey
                          | js2n.IfThenElse
                            (std.contract.any_of
                              [
                                js2n.Null,
                                Bool,
                                Number,
                                String,
                                js2n.record.Record
                                  {
                                    additional = 'Some Dyn,
                                    patterns = {},
                                    properties = { enabled = js2n.Const true, },
                                    required = { enabled = true, },
                                  },
                                Array Dyn
                              ])
                            (std.contract.any_of
                              [
                                js2n.Null,
                                Bool,
                                Number,
                                String,
                                js2n.record.Required [ "config" ],
                                Array Dyn
                              ]) js2n.Always
                          | {
                            config
                              | {
                                rp
                                  | {
                                    display_name
                                      | String
                                      | doc "A name to help the user identify this RP.",
                                    id
                                      | String
                                      | doc "The id must be a subset of the domain currently in the browser.",
                                    origins
                                      | Array String
                                      | doc "A list of explicit RP origins. If left empty, this defaults to either `origin` or `id`, prepended with the current protocol schema (HTTP or HTTPS)."
                                      | optional,
                                    ..
                                  }
                                  | optional,
                              }
                              | optional,
                            enabled | Bool | optional,
                          }
                          | optional,
                        password
                          | {
                            config
                              | {
                                haveibeenpwned_enabled
                                  | Bool
                                  | doc "If set to false the password validation does not utilize the Have I Been Pwnd API."
                                  | optional,
                                haveibeenpwned_host
                                  | String
                                  | doc "Allows changing the default HIBP host to a self hosted version."
                                  | optional,
                                identifier_similarity_check_enabled
                                  | Bool
                                  | doc "If set to false the password validation does not check for similarity between the password and the user identifier."
                                  | optional,
                                ignore_network_errors
                                  | Bool
                                  | doc "If set to false the password validation fails when the network or the Have I Been Pwnd API is down."
                                  | optional,
                                max_breaches
                                  | std.number.Integer
                                  | js2n.number.Maximum 100
                                  | js2n.number.Minimum 0
                                  | doc "Defines how often a password may have been breached before it is rejected."
                                  | optional,
                                migrate_hook
                                  | {
                                    config
                                      | {
                                        additionalProperties
                                          | js2n.Never
                                          | optional,
                                        auth
                                          | js2n.OneOf
                                            [
                                              refs."oneOf.0.allOf.1.definitions.webHookAuthApiKeyProperties",
                                              refs."oneOf.0.allOf.1.definitions.webHookAuthBasicAuthProperties"
                                            ]
                                          | { _ | Dyn }
                                          | doc "Define which auth mechanism the Web-Hook should use"
                                          | optional,
                                        emit_analytics_event
                                          | Bool
                                          | doc "Emit tracing events for this hook on delivery or error"
                                          | optional,
                                        headers
                                          | { _ | String }
                                          | doc "The HTTP headers that must be applied to the password migration hook."
                                          | optional,
                                        method
                                          | std.contract.Equal "POST"
                                          | doc "The HTTP method to use (GET, POST, etc)."
                                          | optional,
                                        url
                                          | String
                                          | doc "The URL the password migration hook should call"
                                          | optional,
                                      }
                                      | optional,
                                    enabled
                                      | Bool
                                      | doc "If set to true will enable password migration."
                                      | optional,
                                  }
                                  | optional,
                                min_password_length
                                  | std.number.Integer
                                  | js2n.number.Minimum 6
                                  | doc "Defines the minimum length of the password."
                                  | optional,
                              }
                              | doc "Define how passwords are validated."
                              | optional,
                            enabled | Bool | optional,
                          }
                          | optional,
                        profile | { enabled | Bool | optional, } | optional,
                        totp
                          | {
                            config
                              | {
                                issuer
                                  | String
                                  | doc "The issuer (e.g. a domain name) will be shown in the TOTP app (e.g. Google Authenticator). It helps the user differentiate between different codes."
                                  | optional,
                              }
                              | optional,
                            enabled | Bool | optional,
                          }
                          | optional,
                        webauthn
                          | js2n.IfThenElse
                            (std.contract.any_of
                              [
                                js2n.Null,
                                Bool,
                                Number,
                                String,
                                js2n.record.Record
                                  {
                                    additional = 'Some Dyn,
                                    patterns = {},
                                    properties = { enabled = js2n.Const true, },
                                    required = { enabled = true, },
                                  },
                                Array Dyn
                              ])
                            (std.contract.any_of
                              [
                                js2n.Null,
                                Bool,
                                Number,
                                String,
                                js2n.record.Required [ "config" ],
                                Array Dyn
                              ]) js2n.Always
                          | {
                            config
                              | {
                                passwordless
                                  | Bool
                                  | doc "If enabled will have the effect that WebAuthn is used for passwordless flows (as a first factor) and not for multi-factor set ups. With this set to true, users will see an option to sign up with WebAuthn on the registration screen."
                                  | optional,
                                rp
                                  | js2n.OneOf
                                    [
                                      std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          std.contract.Sequence
                                            [
                                              js2n.record.Record
                                                {
                                                  additional = 'Some Dyn,
                                                  patterns = {},
                                                  properties =
                                                    {
                                                        origin =
                                                          std.contract.not
                                                              js2n.Always,
                                                        origins =
                                                          std.contract.not
                                                              js2n.Always,
                                                      },
                                                  required = {},
                                                },
                                              js2n.record.Required
                                                [ "display_name", "id" ]
                                            ],
                                          Array Dyn
                                        ],
                                      std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          std.contract.Sequence
                                            [
                                              js2n.record.Record
                                                {
                                                  additional = 'Some Dyn,
                                                  patterns = {},
                                                  properties =
                                                    {
                                                        origin = String,
                                                        origins =
                                                          std.contract.not
                                                              js2n.Always,
                                                      },
                                                  required = { origin = true, },
                                                },
                                              js2n.record.Required
                                                [ "display_name", "id" ]
                                            ],
                                          Array Dyn
                                        ],
                                      std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          std.contract.Sequence
                                            [
                                              js2n.record.Record
                                                {
                                                  additional = 'Some Dyn,
                                                  patterns = {},
                                                  properties =
                                                    {
                                                        origin =
                                                          std.contract.not
                                                              js2n.Always,
                                                        origins =
                                                          js2n.array.ArrayOf
                                                              String,
                                                      },
                                                  required =
                                                    { origins = true, },
                                                },
                                              js2n.record.Required
                                                [ "display_name", "id" ]
                                            ],
                                          Array Dyn
                                        ]
                                    ]
                                  | {
                                    display_name
                                      | String
                                      | doc "An name to help the user identify this RP."
                                      | optional,
                                    icon
                                      | String
                                      | doc "An icon to help the user identify this RP."
                                      | optional,
                                    id
                                      | String
                                      | doc "The id must be a subset of the domain currently in the browser."
                                      | optional,
                                    origin
                                      | String
                                      | doc "An explicit RP origin. If left empty, this defaults to `id`, prepended with the current protocol schema (HTTP or HTTPS)."
                                      | optional,
                                    origins
                                      | Array String
                                      | doc "A list of explicit RP origins. If left empty, this defaults to either `origin` or `id`, prepended with the current protocol schema (HTTP or HTTPS)."
                                      | optional,
                                    ..
                                  }
                                  | optional,
                              }
                              | optional,
                            enabled | Bool | optional,
                          }
                          | optional,
                      }
                      | optional,
                  },
                serve
                  | {
                    admin
                      | {
                        base_url
                          | String
                          | doc "The URL where the admin endpoint is exposed at."
                          | optional,
                        host
                          | String
                          | doc "The host (interface) kratos' admin endpoint listens on."
                          | optional,
                        port
                          | std.number.Integer
                          | js2n.number.Maximum 65535
                          | js2n.number.Minimum 1
                          | doc "The port kratos' admin endpoint listens on."
                          | optional,
                        request_log
                          | {
                            disable_for_health
                              | Bool
                              | doc "Disable request logging for /health/alive and /health/ready endpoints"
                              | optional,
                          }
                          | optional,
                        socket
                          | refs."oneOf.0.allOf.1.definitions.socket"
                          | { _ | Dyn }
                          | optional,
                        tls
                          | refs."oneOf.0.allOf.1.definitions.tlsx"
                          | { _ | Dyn }
                          | optional,
                      }
                      | optional,
                    public
                      | {
                        base_url
                          | refs."oneOf.0.allOf.1.definitions.baseUrl"
                          | String
                          | optional,
                        cors
                          | {
                            allow_credentials
                              | Bool
                              | doc "Sets whether the request can include user credentials like cookies, HTTP authentication or client side SSL certificates."
                              | optional,
                            allowed_headers
                              | Array String
                              | doc "A list of non simple headers the client is allowed to use with cross-domain requests."
                              | optional,
                            allowed_methods
                              | Array (
                                std.contract.Sequence
                                  [
                                    std.enum.TagOrString,
                                    [|
                                      'TRACE,
                                      'OPTIONS,
                                      'HEAD,
                                      'CONNECT,
                                      'DELETE,
                                      'PATCH,
                                      'PUT,
                                      'GET,
                                      'POST
                                    |]
                                  ]
                              )
                              | doc "A list of HTTP methods the user agent is allowed to use with cross-domain requests."
                              | optional,
                            allowed_origins
                              | js2n.array.UniqueItems
                              | Array (
                                std.contract.Sequence
                                  [
                                    js2n.string.MinLength 1,
                                    std.contract.any_of
                                      [ String, js2n.Const "*" ],
                                    std.contract.not
                                      (js2n.string.Matches ".*\\*.*\\*.*")
                                  ]
                              )
                              | doc "A list of origins a cross-domain request can be executed from. If the special * value is present in the list, all origins will be allowed. An origin may contain a wildcard (*) to replace 0 or more characters (i.e.: http://*.domain.com). Only one wildcard can be used per origin."
                              | optional,
                            debug
                              | Bool
                              | doc "Adds additional log output to debug server side CORS issues."
                              | optional,
                            enabled
                              | Bool
                              | doc "Sets whether CORS is enabled."
                              | optional,
                            exposed_headers
                              | Array String
                              | doc "Sets which headers are safe to expose to the API of a CORS API specification."
                              | optional,
                            max_age
                              | std.number.Integer
                              | js2n.number.Minimum 0
                              | doc "Sets how long (in seconds) the results of a preflight request can be cached. If set to 0, every request is preceded by a preflight request."
                              | optional,
                            options_passthrough | Bool | doc "TODO" | optional,
                          }
                          | doc "Configures Cross Origin Resource Sharing for public endpoints."
                          | optional,
                        host
                          | String
                          | doc "The host (interface) kratos' public endpoint listens on."
                          | optional,
                        port
                          | std.number.Integer
                          | js2n.number.Maximum 65535
                          | js2n.number.Minimum 1
                          | doc "The port kratos' public endpoint listens on."
                          | optional,
                        request_log
                          | {
                            disable_for_health
                              | Bool
                              | doc "Disable request logging for /health/alive and /health/ready endpoints"
                              | optional,
                          }
                          | optional,
                        socket
                          | refs."oneOf.0.allOf.1.definitions.socket"
                          | { _ | Dyn }
                          | optional,
                        tls
                          | refs."oneOf.0.allOf.1.definitions.tlsx"
                          | { _ | Dyn }
                          | optional,
                      }
                      | optional,
                  }
                  | optional,
                session
                  | {
                    cookie
                      | {
                        domain
                          | String
                          | doc "Sets the session cookie domain. Useful when dealing with subdomains. Use with care! Overrides `cookies.domain`."
                          | optional,
                        name
                          | String
                          | doc "Sets the session cookie name. Use with care!"
                          | optional,
                        path
                          | String
                          | doc "Sets the session cookie path. Use with care! Overrides `cookies.path`."
                          | optional,
                        persistent
                          | Bool
                          | doc "If set to true will persist the cookie in the end-user's browser using the `max-age` parameter which is set to the `session.lifespan` value. Persistent cookies are not deleted when the browser is closed (e.g. on reboot or alt+f4). This option affects the Ory OAuth2 and OpenID Provider's remember feature as well."
                          | optional,
                        same_site
                          | std.enum.TagOrString
                          | [| 'None, 'Lax, 'Strict |]
                          | doc "Sets the session cookie SameSite. Overrides `cookies.same_site`."
                          | optional,
                      }
                      | optional,
                    earliest_possible_extend
                      | js2n.string.Matches "^([0-9]+(ns|us|ms|s|m|h))+$"
                      | doc "Sets when a session can be extended. Settings this value to `24h` will prevent the session from being extended before until 24 hours before it expires. This setting prevents excessive writes to the database. We highly recommend setting this value."
                      | optional,
                    lifespan
                      | js2n.string.Matches "^([0-9]+(ns|us|ms|s|m|h))+$"
                      | doc "Defines how long a session is active. Once that lifespan has been reached, the user needs to sign in again."
                      | optional,
                    whoami
                      | {
                        required_aal
                          | refs."oneOf.0.allOf.1.definitions.featureRequiredAal"
                          | String
                          | optional,
                        tokenizer
                          | {
                            templates
                              | js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns =
                                    {
                                        "[a-zA-Z0-9-_.]+" =
                                          {
                                              claims_mapper_url
                                                | String
                                                | optional,
                                              jwks_url | String,
                                              ttl
                                                | js2n.string.Matches
                                                  "^([0-9]+(ns|us|ms|s|m|h))+$"
                                                | optional,
                                              ..
                                            },
                                      },
                                  properties = {},
                                  required = {},
                                }
                              | doc "A list of different templates that govern how a session is converted to a token format."
                              | optional,
                            ..
                          }
                          | doc "Configure the tokenizer, responsible for converting a session into a token format such as JWT."
                          | optional,
                      }
                      | doc "Control how the `/sessions/whoami` endpoint is behaving."
                      | optional,
                  }
                  | optional,
                sqa-opt-out
                  | Bool
                  | doc "This is a CLI flag and environment variable and can not be set using the config file."
                  | optional,
                tracing
                  | {
                    deployment_environment
                      | String
                      | doc "Specifies the deployment environment to use on the tracer."
                      | optional,
                    provider
                      | std.enum.TagOrString
                      | [| 'zipkin, 'otel, 'jaeger |]
                      | doc "Set this to the tracing backend you wish to use. Supports Jaeger, Zipkin, and OTEL."
                      | optional,
                    providers
                      | {
                        jaeger
                          | {
                            local_agent_address
                              | std.contract.any_of
                                [
                                  js2n.string.Matches
                                    "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                  js2n.string.Matches
                                    "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                  js2n.string.Matches
                                    "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                ]
                              | doc "The address of the jaeger-agent where spans should be sent to."
                              | optional,
                            sampling
                              | js2n.record.PropertyNames
                                (std.contract.Sequence
                                  [
                                    std.enum.TagOrString,
                                    [| 'trace_id_ratio, 'server_url |]
                                  ])
                              | {
                                server_url
                                  | String
                                  | doc "The address of jaeger-agent's HTTP sampling server"
                                  | optional,
                                trace_id_ratio
                                  | Number
                                  | doc "Trace Id ratio sample"
                                  | optional,
                              }
                              | optional,
                          }
                          | doc "Configures the jaeger tracing backend."
                          | optional,
                        otlp
                          | {
                            authorization_header | String | optional,
                            insecure
                              | Bool
                              | doc "Will use HTTP if set to true; defaults to HTTPS."
                              | optional,
                            sampling
                              | js2n.record.PropertyNames
                                (std.contract.Sequence
                                  [
                                    std.enum.TagOrString,
                                    [| 'sampling_ratio |]
                                  ])
                              | {
                                sampling_ratio
                                  | Number
                                  | doc "Sampling ratio for spans."
                                  | optional,
                              }
                              | optional,
                            server_url
                              | std.contract.any_of
                                [
                                  js2n.string.Matches
                                    "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                  js2n.string.Matches
                                    "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                  js2n.string.Matches
                                    "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                ]
                              | doc "The endpoint of the OTLP exporter (HTTP) where spans should be sent to."
                              | optional,
                          }
                          | doc "Configures the OTLP tracing backend."
                          | optional,
                        zipkin
                          | {
                            sampling
                              | js2n.record.PropertyNames
                                (std.contract.Sequence
                                  [
                                    std.enum.TagOrString,
                                    [| 'sampling_ratio |]
                                  ])
                              | {
                                sampling_ratio
                                  | Number
                                  | doc "Sampling ratio for spans."
                                  | optional,
                              }
                              | optional,
                            server_url
                              | String
                              | doc "The address of the Zipkin server where spans should be sent to."
                              | optional,
                          }
                          | doc "Configures the zipkin tracing backend."
                          | optional,
                      }
                      | optional,
                    service_name
                      | String
                      | doc "Specifies the service name to use on the tracer."
                      | optional,
                  }
                  | doc "Configure distributed tracing using OpenTelemetry"
                  | optional,
                version
                  | js2n.string.Matches
                    "^(v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)|$"
                  | doc "SemVer according to https://semver.org/ prefixed with `v` as in our releases."
                  | optional,
                watch-courier
                  | Bool
                  | doc "This is a CLI flag and environment variable and can not be set using the config file."
                  | optional,
              }
            ],
      "oneOf.0.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.0.allOf.1.definitions.b2bSSOHook" =
        { config | {  .. }, hook | std.contract.Equal "b2b_sso", },
      "oneOf.0.allOf.1.definitions.baseUrl" = String,
      "oneOf.0.allOf.1.definitions.courierTemplates" =
        {
            invalid
              | {
                email
                  | refs."oneOf.0.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
              }
              | optional,
            valid
              | {
                email
                  | refs."oneOf.0.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
                sms
                  | refs."oneOf.0.allOf.1.definitions.smsCourierTemplate"
                  | { _ | Dyn }
                  | optional,
              }
              | optional,
          },
      "oneOf.0.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.0.allOf.1.definitions.emailCourierTemplate" =
        {
            body
              | {
                html
                  | String
                  | doc "The default template used for sending out emails. The template can contain HTML "
                  | optional,
                plaintext
                  | String
                  | doc "The fallback template for email clients that do not support html."
                  | optional,
              }
              | optional,
            subject | String | optional,
          },
      "oneOf.0.allOf.1.definitions.featureRequiredAal" =
        std.contract.Sequence
            [ std.enum.TagOrString, [| 'highest_available, 'aal1 |] ],
      "oneOf.0.allOf.1.definitions.httpRequestConfig" =
        {
            additionalProperties | js2n.Never | optional,
            auth
              | js2n.OneOf
                [
                  refs."oneOf.0.allOf.1.definitions.webHookAuthApiKeyProperties",
                  refs."oneOf.0.allOf.1.definitions.webHookAuthBasicAuthProperties"
                ]
              | { _ | Dyn }
              | doc "Define which auth mechanism to use for auth with the HTTP email provider"
              | optional,
            body
              | js2n.string.Matches "^(http|https|file|base64)://"
              | doc "URI pointing to the jsonnet template used for payload generation. Only used for those HTTP methods, which support HTTP body payloads"
              | optional,
            headers
              | { _ | String }
              | doc "The HTTP headers that must be applied to request"
              | optional,
            method
              | String
              | doc "The HTTP method to use (GET, POST, etc). Defaults to POST."
              | optional,
            url
              | js2n.string.Matches "^https?://"
              | doc "This URL will be used to send the emails to."
              | optional,
          },
      "oneOf.0.allOf.1.definitions.selfServiceAfterDefaultLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.0.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.selfServiceVerificationHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.selfServiceShowVerificationUIHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.0.allOf.1.definitions.selfServiceAfterLogin" =
        {
            code
              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            default_browser_return_url
              | refs."oneOf.0.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.selfServiceVerificationHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.selfServiceShowVerificationUIHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.b2bSSOHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
            lookup_secret
              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            oidc
              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterOIDCLoginMethod"
              | { _ | Dyn }
              | optional,
            passkey
              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            totp
              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.0.allOf.1.definitions.selfServiceAfterOIDCLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.0.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.b2bSSOHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.0.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.0.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterRecoveryHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.0.allOf.1.definitions.selfServiceAfterRecoveryHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ]
                  ]
              )
            ],
      "oneOf.0.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            code
              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            default_browser_return_url
              | refs."oneOf.0.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.0.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            passkey
              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.0.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.0.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.selfServiceShowVerificationUIHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.b2bSSOHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.0.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.0.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.0.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            lookup_secret
              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterSettingsAuthMethod"
              | { _ | Dyn }
              | optional,
            oidc
              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterSettingsAuthMethod"
              | { _ | Dyn }
              | optional,
            passkey
              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterSettingsAuthMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterSettingsAuthMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            totp
              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterSettingsAuthMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.0.allOf.1.definitions.selfServiceAfterSettingsAuthMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.0.allOf.1.definitions.selfServiceAfterSettingsAuthMethod" =
        {
            default_browser_return_url
              | refs."oneOf.0.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.0.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.0.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.0.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.0.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.0.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.0.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.0.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.0.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.0.allOf.1.definitions.selfServiceBeforeRecovery" =
        {
            hooks
              | refs."oneOf.0.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.0.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.0.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.0.allOf.1.definitions.selfServiceBeforeSettings" =
        {
            hooks
              | refs."oneOf.0.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.0.allOf.1.definitions.selfServiceBeforeVerification" =
        {
            hooks
              | refs."oneOf.0.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.0.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.0.allOf.1.definitions.b2bSSOHook",
                        { _ | Dyn }
                      ]
                  ]
              )
            ],
      "oneOf.0.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "microsoft_tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { microsoft_tenant = js2n.Always, },
                          required = { microsoft_tenant = true, },
                        },
                      Array Dyn
                    ])),
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "apple", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required
                          [
                            "apple_private_key",
                            "apple_private_key_id",
                            "apple_team_id"
                          ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { client_secret = js2n.string.MinLength 1, },
                              required = { client_secret = true, },
                            },
                          Array Dyn
                        ])
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required [ "client_secret" ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { apple_team_id = js2n.string.MinLength 1, },
                              required = { apple_team_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key_id =
                                      js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key = js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key = true, },
                            },
                          Array Dyn
                        ])
                  ]),
              {
                additional_id_token_audiences | Array String | optional,
                apple_private_key
                  | String
                  | doc "Sign In with Apple Private Key needed for generating a JWT token for client secret"
                  | optional,
                apple_private_key_id
                  | String
                  | doc "Sign In with Apple Private Key Identifier needed for generating a JWT token for client secret"
                  | optional,
                apple_team_id
                  | String
                  | doc "Apple Developer Team ID needed for generating a JWT token for client secret"
                  | optional,
                auth_url | String | optional,
                claims_source
                  | std.enum.TagOrString
                  | [| 'userinfo, 'id_token |]
                  | doc "Can be either `userinfo` (calls the userinfo endpoint to get the claims) or `id_token` (takes the claims from the id token). It defaults to `id_token`"
                  | optional,
                client_id | String,
                client_secret | String | optional,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                microsoft_tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                organization_id
                  | String
                  | doc "The ID of the organization that this provider belongs to. Only effective in the Ory Network."
                  | optional,
                pkce
                  | std.enum.TagOrString
                  | [| '"force", 'never, 'auto |]
                  | doc "PKCE controls if the OpenID Connect OAuth2 flow should use PKCE (Proof Key for Code Exchange). IMPORTANT: If you set this to `force`, you must whitelist a different return URL for your OAuth2 client in the provider's configuration. Instead of <base-url>/self-service/methods/oidc/callback/<provider>, you must use <base-url>/self-service/methods/oidc/callback"
                  | optional,
                provider
                  | std.enum.TagOrString
                  | [|
                    'x,
                    'lark,
                    'linkedin_v2,
                    'linkedin,
                    'patreon,
                    'dingtalk,
                    'netid,
                    'spotify,
                    'apple,
                    'yandex,
                    'vk,
                    'auth0,
                    'facebook,
                    'slack,
                    'salesforce,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github-app,
                    'github
                  |]
                  | doc "Can be one of github, github-app, gitlab, generic, google, microsoft, discord, salesforce, slack, facebook, auth0, vk, yandex, apple, spotify, netid, dingtalk, patreon.",
                requested_claims
                  | refs."oneOf.0.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                subject_source
                  | std.enum.TagOrString
                  | [| 'me, 'userinfo |]
                  | doc "Controls which source the subject identifier is taken from by microsoft provider. If set to `userinfo` (the default) then the identifier is taken from the `sub` field of OIDC ID token or data received from `/userinfo` standard OIDC endpoint. If set to `me` then the `id` field of data structure received from `https://graph.microsoft.com/v1.0/me` is taken as an identifier."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.0.allOf.1.definitions.selfServiceRequireVerifiedAddressHook" =
        { hook | std.contract.Equal "require_verified_address", },
      "oneOf.0.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.0.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.0.allOf.1.definitions.selfServiceShowVerificationUIHook" =
        { hook | std.contract.Equal "show_verification_ui", },
      "oneOf.0.allOf.1.definitions.selfServiceVerificationHook" =
        { hook | std.contract.Equal "verification", },
      "oneOf.0.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | std.contract.any_of
                [
                  std.contract.not
                    (std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Record
                          {
                            additional = 'Some Dyn,
                            patterns = {},
                            properties =
                              {
                                  response =
                                    std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          js2n.record.Record
                                            {
                                              additional = 'Some Dyn,
                                              patterns = {},
                                              properties =
                                                {
                                                    ignore = js2n.Enum [ true ],
                                                  },
                                              required = { ignore = true, },
                                            },
                                          Array Dyn
                                        ],
                                },
                            required = { response = true, },
                          },
                        Array Dyn
                      ]),
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties = { can_interrupt = js2n.Enum [ false ], },
                      required = {},
                    }
                ]
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.0.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.0.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          js2n.string.Matches "^(http|https|file|base64)://",
                          { _ | Dyn },
                          Array Dyn
                        ],
                      std.contract.not
                        (std.contract.any_of
                          [
                            js2n.Null,
                            Bool,
                            Number,
                            js2n.string.Matches "^(http|https|file|base64)://",
                            { _ | Dyn },
                            Array Dyn
                          ])
                    ]
                  | String
                  | optional,
                can_interrupt
                  | Bool
                  | doc "Deprecated, please use `response.parse` instead. If enabled allows the web hook to interrupt / abort the self-service flow. It only applies to certain flows (registration/verification/login/settings) and requires a valid response format."
                  | optional,
                emit_analytics_event
                  | Bool
                  | doc "Emit tracing events for this webhook on delivery or error"
                  | optional,
                headers
                  | { _ | String }
                  | doc "The HTTP headers that must be applied to the Web-Hook"
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                response
                  | std.contract.not
                    (std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Record
                          {
                            additional = 'Some Dyn,
                            patterns = {},
                            properties =
                              {
                                  ignore = js2n.Const true,
                                  parse = js2n.Const true,
                                },
                            required = { ignore = true, parse = true, },
                          },
                        Array Dyn
                      ])
                  | {
                    ignore
                      | Bool
                      | doc "Ignore the response from the web hook. If enabled the request will be made asynchronously which can be useful if you only wish to notify another system but do not parse the response."
                      | optional,
                    parse
                      | Bool
                      | doc "If enabled parses the response before saving the flow result. Set this value to true if you would like to modify the identity, for example identity metadata, before saving it during registration. When enabled, you may also abort the registration, verification, login or settings flow due to, for example, a validation flow. Head over to the [web hook documentation](https://www.ory.sh/docs/kratos/hooks/configure-hooks) for more information."
                      | optional,
                  }
                  | doc "How the web hook should handle the response"
                  | optional,
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.0.allOf.1.definitions.smsCourierTemplate" =
        {
            body
              | {
                plaintext
                  | String
                  | doc "A template send to the SMS provider."
                  | optional,
              }
              | optional,
          },
      "oneOf.0.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.0.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.0.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.0.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.0.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.0.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.0.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.1.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.1.allOf.1.definitions.b2bSSOHook" =
        { config | {  .. }, hook | std.contract.Equal "b2b_sso", },
      "oneOf.1.allOf.1.definitions.baseUrl" = String,
      "oneOf.1.allOf.1.definitions.courierTemplates" =
        {
            invalid
              | {
                email
                  | refs."oneOf.1.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
              }
              | optional,
            valid
              | {
                email
                  | refs."oneOf.1.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
                sms
                  | refs."oneOf.1.allOf.1.definitions.smsCourierTemplate"
                  | { _ | Dyn }
                  | optional,
              }
              | optional,
          },
      "oneOf.1.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.1.allOf.1.definitions.emailCourierTemplate" =
        {
            body
              | {
                html
                  | String
                  | doc "The default template used for sending out emails. The template can contain HTML "
                  | optional,
                plaintext
                  | String
                  | doc "The fallback template for email clients that do not support html."
                  | optional,
              }
              | optional,
            subject | String | optional,
          },
      "oneOf.1.allOf.1.definitions.featureRequiredAal" =
        std.contract.Sequence
            [ std.enum.TagOrString, [| 'highest_available, 'aal1 |] ],
      "oneOf.1.allOf.1.definitions.httpRequestConfig" =
        {
            additionalProperties | js2n.Never | optional,
            auth
              | js2n.OneOf
                [
                  refs."oneOf.1.allOf.1.definitions.webHookAuthApiKeyProperties",
                  refs."oneOf.1.allOf.1.definitions.webHookAuthBasicAuthProperties"
                ]
              | { _ | Dyn }
              | doc "Define which auth mechanism to use for auth with the HTTP email provider"
              | optional,
            body
              | js2n.string.Matches "^(http|https|file|base64)://"
              | doc "URI pointing to the jsonnet template used for payload generation. Only used for those HTTP methods, which support HTTP body payloads"
              | optional,
            headers
              | { _ | String }
              | doc "The HTTP headers that must be applied to request"
              | optional,
            method
              | String
              | doc "The HTTP method to use (GET, POST, etc). Defaults to POST."
              | optional,
            url
              | js2n.string.Matches "^https?://"
              | doc "This URL will be used to send the emails to."
              | optional,
          },
      "oneOf.1.allOf.1.definitions.selfServiceAfterDefaultLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.1.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.selfServiceVerificationHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.selfServiceShowVerificationUIHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.1.allOf.1.definitions.selfServiceAfterLogin" =
        {
            code
              | refs."oneOf.1.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            default_browser_return_url
              | refs."oneOf.1.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.selfServiceVerificationHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.selfServiceShowVerificationUIHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.b2bSSOHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
            lookup_secret
              | refs."oneOf.1.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            oidc
              | refs."oneOf.1.allOf.1.definitions.selfServiceAfterOIDCLoginMethod"
              | { _ | Dyn }
              | optional,
            passkey
              | refs."oneOf.1.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.1.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            totp
              | refs."oneOf.1.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.1.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.1.allOf.1.definitions.selfServiceAfterOIDCLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.1.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.b2bSSOHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.1.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.1.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.1.allOf.1.definitions.selfServiceAfterRecoveryHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.1.allOf.1.definitions.selfServiceAfterRecoveryHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ]
                  ]
              )
            ],
      "oneOf.1.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            code
              | refs."oneOf.1.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            default_browser_return_url
              | refs."oneOf.1.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.1.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.1.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            passkey
              | refs."oneOf.1.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.1.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.1.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.1.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.1.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.selfServiceShowVerificationUIHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.b2bSSOHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.1.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.1.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.1.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            lookup_secret
              | refs."oneOf.1.allOf.1.definitions.selfServiceAfterSettingsAuthMethod"
              | { _ | Dyn }
              | optional,
            oidc
              | refs."oneOf.1.allOf.1.definitions.selfServiceAfterSettingsAuthMethod"
              | { _ | Dyn }
              | optional,
            passkey
              | refs."oneOf.1.allOf.1.definitions.selfServiceAfterSettingsAuthMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.1.allOf.1.definitions.selfServiceAfterSettingsAuthMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.1.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            totp
              | refs."oneOf.1.allOf.1.definitions.selfServiceAfterSettingsAuthMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.1.allOf.1.definitions.selfServiceAfterSettingsAuthMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.1.allOf.1.definitions.selfServiceAfterSettingsAuthMethod" =
        {
            default_browser_return_url
              | refs."oneOf.1.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.1.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.1.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.1.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.1.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.1.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.1.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.1.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.1.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.1.allOf.1.definitions.selfServiceBeforeRecovery" =
        {
            hooks
              | refs."oneOf.1.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.1.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.1.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.1.allOf.1.definitions.selfServiceBeforeSettings" =
        {
            hooks
              | refs."oneOf.1.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.1.allOf.1.definitions.selfServiceBeforeVerification" =
        {
            hooks
              | refs."oneOf.1.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.1.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.1.allOf.1.definitions.b2bSSOHook",
                        { _ | Dyn }
                      ]
                  ]
              )
            ],
      "oneOf.1.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "microsoft_tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { microsoft_tenant = js2n.Always, },
                          required = { microsoft_tenant = true, },
                        },
                      Array Dyn
                    ])),
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "apple", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required
                          [
                            "apple_private_key",
                            "apple_private_key_id",
                            "apple_team_id"
                          ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { client_secret = js2n.string.MinLength 1, },
                              required = { client_secret = true, },
                            },
                          Array Dyn
                        ])
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required [ "client_secret" ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { apple_team_id = js2n.string.MinLength 1, },
                              required = { apple_team_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key_id =
                                      js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key = js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key = true, },
                            },
                          Array Dyn
                        ])
                  ]),
              {
                additional_id_token_audiences | Array String | optional,
                apple_private_key
                  | String
                  | doc "Sign In with Apple Private Key needed for generating a JWT token for client secret"
                  | optional,
                apple_private_key_id
                  | String
                  | doc "Sign In with Apple Private Key Identifier needed for generating a JWT token for client secret"
                  | optional,
                apple_team_id
                  | String
                  | doc "Apple Developer Team ID needed for generating a JWT token for client secret"
                  | optional,
                auth_url | String | optional,
                claims_source
                  | std.enum.TagOrString
                  | [| 'userinfo, 'id_token |]
                  | doc "Can be either `userinfo` (calls the userinfo endpoint to get the claims) or `id_token` (takes the claims from the id token). It defaults to `id_token`"
                  | optional,
                client_id | String,
                client_secret | String | optional,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                microsoft_tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                organization_id
                  | String
                  | doc "The ID of the organization that this provider belongs to. Only effective in the Ory Network."
                  | optional,
                provider
                  | std.enum.TagOrString
                  | [|
                    'x,
                    'lark,
                    'linkedin_v2,
                    'linkedin,
                    'patreon,
                    'dingtalk,
                    'netid,
                    'spotify,
                    'apple,
                    'yandex,
                    'vk,
                    'auth0,
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github-app,
                    'github
                  |]
                  | doc "Can be one of github, github-app, gitlab, generic, google, microsoft, discord, slack, facebook, auth0, vk, yandex, apple, spotify, netid, dingtalk, patreon.",
                requested_claims
                  | refs."oneOf.1.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                subject_source
                  | std.enum.TagOrString
                  | [| 'me, 'userinfo |]
                  | doc "Controls which source the subject identifier is taken from by microsoft provider. If set to `userinfo` (the default) then the identifier is taken from the `sub` field of OIDC ID token or data received from `/userinfo` standard OIDC endpoint. If set to `me` then the `id` field of data structure received from `https://graph.microsoft.com/v1.0/me` is taken as an identifier."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.1.allOf.1.definitions.selfServiceRequireVerifiedAddressHook" =
        { hook | std.contract.Equal "require_verified_address", },
      "oneOf.1.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.1.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.1.allOf.1.definitions.selfServiceShowVerificationUIHook" =
        { hook | std.contract.Equal "show_verification_ui", },
      "oneOf.1.allOf.1.definitions.selfServiceVerificationHook" =
        { hook | std.contract.Equal "verification", },
      "oneOf.1.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | std.contract.any_of
                [
                  std.contract.not
                    (std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Record
                          {
                            additional = 'Some Dyn,
                            patterns = {},
                            properties =
                              {
                                  response =
                                    std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          js2n.record.Record
                                            {
                                              additional = 'Some Dyn,
                                              patterns = {},
                                              properties =
                                                {
                                                    ignore = js2n.Enum [ true ],
                                                  },
                                              required = { ignore = true, },
                                            },
                                          Array Dyn
                                        ],
                                },
                            required = { response = true, },
                          },
                        Array Dyn
                      ]),
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties = { can_interrupt = js2n.Enum [ false ], },
                      required = {},
                    }
                ]
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.1.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.1.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          js2n.string.Matches "^(http|https|file|base64)://",
                          { _ | Dyn },
                          Array Dyn
                        ],
                      std.contract.not
                        (std.contract.any_of
                          [
                            js2n.Null,
                            Bool,
                            Number,
                            js2n.string.Matches "^(http|https|file|base64)://",
                            { _ | Dyn },
                            Array Dyn
                          ])
                    ]
                  | String
                  | optional,
                can_interrupt
                  | Bool
                  | doc "Deprecated, please use `response.parse` instead. If enabled allows the web hook to interrupt / abort the self-service flow. It only applies to certain flows (registration/verification/login/settings) and requires a valid response format."
                  | optional,
                emit_analytics_event
                  | Bool
                  | doc "Emit tracing events for this webhook on delivery or error"
                  | optional,
                headers
                  | { _ | String }
                  | doc "The HTTP headers that must be applied to the Web-Hook"
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                response
                  | std.contract.not
                    (std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Record
                          {
                            additional = 'Some Dyn,
                            patterns = {},
                            properties =
                              {
                                  ignore = js2n.Const true,
                                  parse = js2n.Const true,
                                },
                            required = { ignore = true, parse = true, },
                          },
                        Array Dyn
                      ])
                  | {
                    ignore
                      | Bool
                      | doc "Ignore the response from the web hook. If enabled the request will be made asynchronously which can be useful if you only wish to notify another system but do not parse the response."
                      | optional,
                    parse
                      | Bool
                      | doc "If enabled parses the response before saving the flow result. Set this value to true if you would like to modify the identity, for example identity metadata, before saving it during registration. When enabled, you may also abort the registration, verification, login or settings flow due to, for example, a validation flow. Head over to the [web hook documentation](https://www.ory.sh/docs/kratos/hooks/configure-hooks) for more information."
                      | optional,
                  }
                  | doc "How the web hook should handle the response"
                  | optional,
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.1.allOf.1.definitions.smsCourierTemplate" =
        {
            body
              | {
                plaintext
                  | String
                  | doc "A template send to the SMS provider."
                  | optional,
              }
              | optional,
          },
      "oneOf.1.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.1.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.1.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.1.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.1.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.1.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.1.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.10.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.10.allOf.1.definitions.baseUrl" = String,
      "oneOf.10.allOf.1.definitions.courierTemplates" =
        {
            invalid
              | {
                email
                  | refs."oneOf.10.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
              }
              | optional,
            valid
              | {
                email
                  | refs."oneOf.10.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
              }
              | optional,
          },
      "oneOf.10.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.10.allOf.1.definitions.emailCourierTemplate" =
        {
            body
              | {
                html
                  | String
                  | doc "The default template used for sending out emails. The template can contain HTML "
                  | optional,
                plaintext
                  | String
                  | doc "The fallback template for email clients that do not support html."
                  | optional,
              }
              | optional,
            subject | String | optional,
          },
      "oneOf.10.allOf.1.definitions.featureRequiredAal" =
        std.contract.Sequence
            [ std.enum.TagOrString, [| 'highest_available, 'aal1 |] ],
      "oneOf.10.allOf.1.definitions.selfServiceAfterDefaultLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.10.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.10.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.10.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.10.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.10.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.10.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.10.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.10.allOf.1.definitions.selfServiceAfterOIDCLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.10.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.10.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.10.allOf.1.definitions.selfServiceAfterOIDCLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.10.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.10.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.10.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.10.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.10.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.10.allOf.1.definitions.selfServiceAfterRecoveryHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.10.allOf.1.definitions.selfServiceAfterRecoveryHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.10.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.10.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ]
                  ]
              )
            ],
      "oneOf.10.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.10.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.10.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.10.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.10.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.10.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.10.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.10.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.10.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.10.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.10.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.10.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.10.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.10.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.10.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.10.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.10.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.10.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.10.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.10.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.10.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.10.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.10.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.10.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.10.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.10.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.10.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.10.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "microsoft_tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { microsoft_tenant = js2n.Always, },
                          required = { microsoft_tenant = true, },
                        },
                      Array Dyn
                    ])),
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "apple", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required
                          [
                            "apple_private_key",
                            "apple_private_key_id",
                            "apple_team_id"
                          ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { client_secret = js2n.string.MinLength 1, },
                              required = { client_secret = true, },
                            },
                          Array Dyn
                        ])
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required [ "client_secret" ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { apple_team_id = js2n.string.MinLength 1, },
                              required = { apple_team_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key_id =
                                      js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key = js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key = true, },
                            },
                          Array Dyn
                        ])
                  ]),
              {
                apple_private_key
                  | String
                  | doc "Sign In with Apple Private Key needed for generating a JWT token for client secret"
                  | optional,
                apple_private_key_id
                  | String
                  | doc "Sign In with Apple Private Key Identifier needed for generating a JWT token for client secret"
                  | optional,
                apple_team_id
                  | String
                  | doc "Apple Developer Team ID needed for generating a JWT token for client secret"
                  | optional,
                auth_url | String | optional,
                client_id | String,
                client_secret | String | optional,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                microsoft_tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                provider
                  | std.enum.TagOrString
                  | [|
                    'spotify,
                    'apple,
                    'yandex,
                    'vk,
                    'auth0,
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github-app,
                    'github
                  |]
                  | doc "Can be one of github, github-app, gitlab, generic, google, microsoft, discord, slack, facebook, auth0, vk, yandex, spotify.",
                requested_claims
                  | refs."oneOf.10.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.10.allOf.1.definitions.selfServiceRequireVerifiedAddressHook" =
        { hook | std.contract.Equal "require_verified_address", },
      "oneOf.10.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.10.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.10.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.10.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.10.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          js2n.string.Matches "^(http|https|file|base64)://",
                          { _ | Dyn },
                          Array Dyn
                        ],
                      std.contract.not
                        (std.contract.any_of
                          [
                            js2n.Null,
                            Bool,
                            Number,
                            js2n.string.Matches "^(http|https|file|base64)://",
                            { _ | Dyn },
                            Array Dyn
                          ])
                    ]
                  | String
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                response
                  | {
                    ignore
                      | Bool
                      | doc "Ignore the response from the web hook. If enabled the request will be made asynchronously which can be useful if you only wish to notify another system but do not parse the response."
                      | optional,
                  }
                  | doc "How the web hook should handle the response"
                  | optional,
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.10.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.10.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.10.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.10.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.10.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.10.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.10.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.11.allOf.1.definitions.defaultReturnTo" = js2n.string.MinLength 6,
      "oneOf.11.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.11.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            oidc
              | refs."oneOf.11.allOf.1.definitions.selfServiceAfterLoginStrategy"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.11.allOf.1.definitions.selfServiceAfterLoginStrategy"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.11.allOf.1.definitions.selfServiceAfterLoginStrategy" =
        {
            default_browser_return_url
              | refs."oneOf.11.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.11.allOf.1.definitions.selfServiceSessionRevokerHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.11.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.11.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            oidc
              | refs."oneOf.11.allOf.1.definitions.selfServiceAfterRegistrationStrategy"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.11.allOf.1.definitions.selfServiceAfterRegistrationStrategy"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.11.allOf.1.definitions.selfServiceAfterRegistrationStrategy" =
        {
            default_browser_return_url
              | refs."oneOf.11.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.11.allOf.1.definitions.selfServiceSessionIssuerHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.11.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.11.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            password
              | refs."oneOf.11.allOf.1.definitions.selfServiceAfterSettingsStrategy"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.11.allOf.1.definitions.selfServiceAfterSettingsStrategy"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.11.allOf.1.definitions.selfServiceAfterSettingsStrategy" =
        {
            default_browser_return_url
              | refs."oneOf.11.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.11.allOf.1.definitions.selfServiceVerifyHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.11.allOf.1.definitions.selfServiceOIDCProvider" =
        {
            auth_url | String | optional,
            client_id | String,
            client_secret | String,
            id | String,
            issuer_url | String | optional,
            mapper_url
              | String
              | doc "The URL where the jsonnet source is located for mapping the provider's data to ORY Kratos data.",
            provider
              | std.enum.TagOrString
              | [| 'microsoft, 'google, 'generic, 'github |]
              | doc "Can be one of github, generic, google, microsoft.",
            scope | Array String | optional,
            tenant
              | String
              | doc "The Azure AD Tenant to use for authentication."
              | optional,
            token_url | String | optional,
          },
      "oneOf.11.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.11.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.11.allOf.1.definitions.selfServiceVerifyHook" =
        { hook | std.contract.Equal "verify", },
      "oneOf.12.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.12.allOf.1.definitions.defaultReturnTo" = js2n.string.MinLength 1,
      "oneOf.12.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.12.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            oidc
              | refs."oneOf.12.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.12.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.12.allOf.1.definitions.selfServiceAfterLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.12.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.12.allOf.1.definitions.selfServiceSessionRevokerHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.12.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.12.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            oidc
              | refs."oneOf.12.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.12.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.12.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.12.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.12.allOf.1.definitions.selfServiceSessionIssuerHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.12.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.12.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            password
              | refs."oneOf.12.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.12.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.12.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.12.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.12.allOf.1.definitions.selfServiceVerifyHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.12.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { tenant = js2n.Always, },
                          required = { tenant = true, },
                        },
                      Array Dyn
                    ])),
              {
                auth_url | String | optional,
                client_id | String,
                client_secret | String,
                id | String,
                issuer_url | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to ORY Kratos data.",
                provider
                  | std.enum.TagOrString
                  | [|
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github
                  |]
                  | doc "Can be one of github, gitlab, generic, google, microsoft, discord.",
                requested_claims
                  | refs."oneOf.12.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.12.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.12.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.12.allOf.1.definitions.selfServiceVerifyHook" =
        { hook | std.contract.Equal "verify", },
      "oneOf.12.allOf.1.definitions.version" =
        js2n.string.Matches
            "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
      "oneOf.13.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.13.allOf.1.definitions.defaultReturnTo" = js2n.string.MinLength 1,
      "oneOf.13.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.13.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            oidc
              | refs."oneOf.13.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.13.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.13.allOf.1.definitions.selfServiceAfterLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.13.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.13.allOf.1.definitions.selfServiceSessionRevokerHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.13.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.13.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            oidc
              | refs."oneOf.13.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.13.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.13.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.13.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.13.allOf.1.definitions.selfServiceSessionIssuerHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.13.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.13.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            password
              | refs."oneOf.13.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.13.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.13.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.13.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.13.allOf.1.definitions.selfServiceVerifyHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.13.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { tenant = js2n.Always, },
                          required = { tenant = true, },
                        },
                      Array Dyn
                    ])),
              {
                auth_url | String | optional,
                client_id | String,
                client_secret | String,
                id | String,
                issuer_url | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to ORY Kratos data.",
                provider
                  | std.enum.TagOrString
                  | [|
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github
                  |]
                  | doc "Can be one of github, gitlab, generic, google, microsoft, discord.",
                requested_claims
                  | refs."oneOf.13.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.13.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.13.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.13.allOf.1.definitions.selfServiceVerifyHook" =
        { hook | std.contract.Equal "verify", },
      "oneOf.14.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.14.allOf.1.definitions.defaultReturnTo" = js2n.string.MinLength 1,
      "oneOf.14.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.14.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            oidc
              | refs."oneOf.14.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.14.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.14.allOf.1.definitions.selfServiceAfterLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.14.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.14.allOf.1.definitions.selfServiceSessionRevokerHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.14.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.14.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            oidc
              | refs."oneOf.14.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.14.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.14.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.14.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.14.allOf.1.definitions.selfServiceSessionIssuerHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.14.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.14.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            password
              | refs."oneOf.14.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.14.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.14.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.14.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.14.allOf.1.definitions.selfServiceVerifyHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.14.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { tenant = js2n.Always, },
                          required = { tenant = true, },
                        },
                      Array Dyn
                    ])),
              {
                auth_url | String | optional,
                client_id | String,
                client_secret | String,
                id | String,
                issuer_url | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to ORY Kratos data.",
                provider
                  | std.enum.TagOrString
                  | [|
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github
                  |]
                  | doc "Can be one of github, gitlab, generic, google, microsoft, discord.",
                requested_claims
                  | refs."oneOf.14.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.14.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.14.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.14.allOf.1.definitions.selfServiceVerifyHook" =
        { hook | std.contract.Equal "verify", },
      "oneOf.15.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.15.allOf.1.definitions.defaultReturnTo" = js2n.string.MinLength 1,
      "oneOf.15.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.15.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            oidc
              | refs."oneOf.15.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.15.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.15.allOf.1.definitions.selfServiceAfterLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.15.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.15.allOf.1.definitions.selfServiceSessionRevokerHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.15.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.15.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            oidc
              | refs."oneOf.15.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.15.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.15.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.15.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.15.allOf.1.definitions.selfServiceSessionIssuerHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.15.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.15.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            password
              | refs."oneOf.15.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.15.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.15.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.15.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.15.allOf.1.definitions.selfServiceVerifyHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.15.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { tenant = js2n.Always, },
                          required = { tenant = true, },
                        },
                      Array Dyn
                    ])),
              {
                auth_url | String | optional,
                client_id | String,
                client_secret | String,
                id | String,
                issuer_url | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to ORY Kratos data.",
                provider
                  | std.enum.TagOrString
                  | [|
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github
                  |]
                  | doc "Can be one of github, gitlab, generic, google, microsoft, discord.",
                requested_claims
                  | refs."oneOf.15.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.15.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.15.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.15.allOf.1.definitions.selfServiceVerifyHook" =
        { hook | std.contract.Equal "verify", },
      "oneOf.16.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.16.allOf.1.definitions.defaultReturnTo" = js2n.string.MinLength 1,
      "oneOf.16.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.16.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            oidc
              | refs."oneOf.16.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.16.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.16.allOf.1.definitions.selfServiceAfterLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.16.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.16.allOf.1.definitions.selfServiceSessionRevokerHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.16.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.16.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            oidc
              | refs."oneOf.16.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.16.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.16.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.16.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.16.allOf.1.definitions.selfServiceSessionIssuerHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.16.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.16.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            password
              | refs."oneOf.16.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.16.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.16.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.16.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.16.allOf.1.definitions.selfServiceVerifyHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.16.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { tenant = js2n.Always, },
                          required = { tenant = true, },
                        },
                      Array Dyn
                    ])),
              {
                auth_url | String | optional,
                client_id | String,
                client_secret | String,
                id | String,
                issuer_url | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to ORY Kratos data.",
                provider
                  | std.enum.TagOrString
                  | [|
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github
                  |]
                  | doc "Can be one of github, gitlab, generic, google, microsoft, discord.",
                requested_claims
                  | refs."oneOf.16.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.16.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.16.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.16.allOf.1.definitions.selfServiceVerifyHook" =
        { hook | std.contract.Equal "verify", },
      "oneOf.17.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.17.allOf.1.definitions.defaultReturnTo" = js2n.string.MinLength 1,
      "oneOf.17.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.17.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            oidc
              | refs."oneOf.17.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.17.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.17.allOf.1.definitions.selfServiceAfterLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.17.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.17.allOf.1.definitions.selfServiceSessionRevokerHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.17.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.17.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            oidc
              | refs."oneOf.17.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.17.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.17.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.17.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.17.allOf.1.definitions.selfServiceSessionIssuerHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.17.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.17.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            password
              | refs."oneOf.17.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.17.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.17.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.17.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.17.allOf.1.definitions.selfServiceVerifyHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.17.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { tenant = js2n.Always, },
                          required = { tenant = true, },
                        },
                      Array Dyn
                    ])),
              {
                auth_url | String | optional,
                client_id | String,
                client_secret | String,
                id | String,
                issuer_url | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to ORY Kratos data.",
                provider
                  | std.enum.TagOrString
                  | [|
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github
                  |]
                  | doc "Can be one of github, gitlab, generic, google, microsoft, discord.",
                requested_claims
                  | refs."oneOf.17.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.17.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.17.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.17.allOf.1.definitions.selfServiceVerifyHook" =
        { hook | std.contract.Equal "verify", },
      "oneOf.18.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.18.allOf.1.definitions.baseUrl" = String,
      "oneOf.18.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.18.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.18.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.18.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.18.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.18.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.18.allOf.1.definitions.selfServiceAfterLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.18.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.18.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.18.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.18.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.18.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.18.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.18.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.18.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.18.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.18.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.18.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.18.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.18.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.18.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.18.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.18.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.18.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.18.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.18.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.18.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.18.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.18.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.18.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.18.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.18.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.18.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.18.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.18.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.18.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.18.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.18.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.18.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.18.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { tenant = js2n.Always, },
                          required = { tenant = true, },
                        },
                      Array Dyn
                    ])),
              {
                auth_url | String | optional,
                client_id | String,
                client_secret | String,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                provider
                  | std.enum.TagOrString
                  | [|
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github
                  |]
                  | doc "Can be one of github, gitlab, generic, google, microsoft, discord, slack, facebook.",
                requested_claims
                  | refs."oneOf.18.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.18.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.18.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.18.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.18.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.18.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | String
                  | doc "Path to the jsonnet template used for payload generation. Only used for those HTTP methods, which support HTTP body payloads"
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.18.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.18.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.18.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.19.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.19.allOf.1.definitions.baseUrl" = String,
      "oneOf.19.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.19.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.19.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.19.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.19.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.19.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.19.allOf.1.definitions.selfServiceAfterLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.19.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.19.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.19.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.19.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.19.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.19.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.19.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.19.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.19.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.19.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.19.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.19.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.19.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.19.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.19.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.19.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.19.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.19.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.19.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.19.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.19.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.19.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.19.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.19.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.19.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.19.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.19.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.19.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.19.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.19.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.19.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.19.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.19.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { tenant = js2n.Always, },
                          required = { tenant = true, },
                        },
                      Array Dyn
                    ])),
              {
                auth_url | String | optional,
                client_id | String,
                client_secret | String,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                provider
                  | std.enum.TagOrString
                  | [|
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github
                  |]
                  | doc "Can be one of github, gitlab, generic, google, microsoft, discord, slack, facebook.",
                requested_claims
                  | refs."oneOf.19.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.19.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.19.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.19.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.19.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.19.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | String
                  | doc "Path to the jsonnet template used for payload generation. Only used for those HTTP methods, which support HTTP body payloads"
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.19.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.19.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.19.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.2.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.2.allOf.1.definitions.b2bSSOHook" =
        { config | {  .. }, hook | std.contract.Equal "b2b_sso", },
      "oneOf.2.allOf.1.definitions.baseUrl" = String,
      "oneOf.2.allOf.1.definitions.courierTemplates" =
        {
            invalid
              | {
                email
                  | refs."oneOf.2.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
              }
              | optional,
            valid
              | {
                email
                  | refs."oneOf.2.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
                sms
                  | refs."oneOf.2.allOf.1.definitions.smsCourierTemplate"
                  | { _ | Dyn }
                  | optional,
              }
              | optional,
          },
      "oneOf.2.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.2.allOf.1.definitions.emailCourierTemplate" =
        {
            body
              | {
                html
                  | String
                  | doc "The default template used for sending out emails. The template can contain HTML "
                  | optional,
                plaintext
                  | String
                  | doc "The fallback template for email clients that do not support html."
                  | optional,
              }
              | optional,
            subject | String | optional,
          },
      "oneOf.2.allOf.1.definitions.featureRequiredAal" =
        std.contract.Sequence
            [ std.enum.TagOrString, [| 'highest_available, 'aal1 |] ],
      "oneOf.2.allOf.1.definitions.httpRequestConfig" =
        {
            additionalProperties | js2n.Never | optional,
            auth
              | js2n.OneOf
                [
                  refs."oneOf.2.allOf.1.definitions.webHookAuthApiKeyProperties",
                  refs."oneOf.2.allOf.1.definitions.webHookAuthBasicAuthProperties"
                ]
              | { _ | Dyn }
              | doc "Define which auth mechanism to use for auth with the HTTP email provider"
              | optional,
            body
              | js2n.string.Matches "^(http|https|file|base64)://"
              | doc "URI pointing to the jsonnet template used for payload generation. Only used for those HTTP methods, which support HTTP body payloads"
              | optional,
            headers
              | { _ | String }
              | doc "The HTTP headers that must be applied to request"
              | optional,
            method
              | String
              | doc "The HTTP method to use (GET, POST, etc). Defaults to POST."
              | optional,
            url
              | js2n.string.Matches "^https?://"
              | doc "This URL will be used to send the emails to."
              | optional,
          },
      "oneOf.2.allOf.1.definitions.selfServiceAfterDefaultLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.2.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.2.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.2.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.2.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.2.allOf.1.definitions.selfServiceAfterLogin" =
        {
            code
              | refs."oneOf.2.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            default_browser_return_url
              | refs."oneOf.2.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.2.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.2.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.2.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.2.allOf.1.definitions.b2bSSOHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
            lookup_secret
              | refs."oneOf.2.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            oidc
              | refs."oneOf.2.allOf.1.definitions.selfServiceAfterOIDCLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.2.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            totp
              | refs."oneOf.2.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.2.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.2.allOf.1.definitions.selfServiceAfterOIDCLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.2.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.2.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.2.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.2.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.2.allOf.1.definitions.b2bSSOHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.2.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.2.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.2.allOf.1.definitions.selfServiceAfterRecoveryHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.2.allOf.1.definitions.selfServiceAfterRecoveryHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.2.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.2.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ]
                  ]
              )
            ],
      "oneOf.2.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            code
              | refs."oneOf.2.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            default_browser_return_url
              | refs."oneOf.2.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.2.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.2.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.2.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.2.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.2.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.2.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.2.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.2.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.2.allOf.1.definitions.selfServiceShowVerificationUIHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.2.allOf.1.definitions.b2bSSOHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.2.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.2.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.2.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            lookup_secret
              | refs."oneOf.2.allOf.1.definitions.selfServiceAfterSettingsAuthMethod"
              | { _ | Dyn }
              | optional,
            oidc
              | refs."oneOf.2.allOf.1.definitions.selfServiceAfterSettingsAuthMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.2.allOf.1.definitions.selfServiceAfterSettingsAuthMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.2.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            totp
              | refs."oneOf.2.allOf.1.definitions.selfServiceAfterSettingsAuthMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.2.allOf.1.definitions.selfServiceAfterSettingsAuthMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.2.allOf.1.definitions.selfServiceAfterSettingsAuthMethod" =
        {
            default_browser_return_url
              | refs."oneOf.2.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.2.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.2.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.2.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.2.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.2.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.2.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.2.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.2.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.2.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.2.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.2.allOf.1.definitions.selfServiceBeforeRecovery" =
        {
            hooks
              | refs."oneOf.2.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.2.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.2.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.2.allOf.1.definitions.selfServiceBeforeSettings" =
        {
            hooks
              | refs."oneOf.2.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.2.allOf.1.definitions.selfServiceBeforeVerification" =
        {
            hooks
              | refs."oneOf.2.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.2.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.2.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.2.allOf.1.definitions.b2bSSOHook",
                        { _ | Dyn }
                      ]
                  ]
              )
            ],
      "oneOf.2.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "microsoft_tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { microsoft_tenant = js2n.Always, },
                          required = { microsoft_tenant = true, },
                        },
                      Array Dyn
                    ])),
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "apple", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required
                          [
                            "apple_private_key",
                            "apple_private_key_id",
                            "apple_team_id"
                          ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { client_secret = js2n.string.MinLength 1, },
                              required = { client_secret = true, },
                            },
                          Array Dyn
                        ])
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required [ "client_secret" ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { apple_team_id = js2n.string.MinLength 1, },
                              required = { apple_team_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key_id =
                                      js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key = js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key = true, },
                            },
                          Array Dyn
                        ])
                  ]),
              {
                additional_id_token_audiences | Array String | optional,
                apple_private_key
                  | String
                  | doc "Sign In with Apple Private Key needed for generating a JWT token for client secret"
                  | optional,
                apple_private_key_id
                  | String
                  | doc "Sign In with Apple Private Key Identifier needed for generating a JWT token for client secret"
                  | optional,
                apple_team_id
                  | String
                  | doc "Apple Developer Team ID needed for generating a JWT token for client secret"
                  | optional,
                auth_url | String | optional,
                claims_source
                  | std.enum.TagOrString
                  | [| 'userinfo, 'id_token |]
                  | doc "Can be either `userinfo` (calls the userinfo endpoint to get the claims) or `id_token` (takes the claims from the id token). It defaults to `id_token`"
                  | optional,
                client_id | String,
                client_secret | String | optional,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                microsoft_tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                organization_id
                  | String
                  | doc "The ID of the organization that this provider belongs to. Only effective in the Ory Network."
                  | optional,
                provider
                  | std.enum.TagOrString
                  | [|
                    'lark,
                    'linkedin,
                    'patreon,
                    'dingtalk,
                    'netid,
                    'spotify,
                    'apple,
                    'yandex,
                    'vk,
                    'auth0,
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github-app,
                    'github
                  |]
                  | doc "Can be one of github, github-app, gitlab, generic, google, microsoft, discord, slack, facebook, auth0, vk, yandex, apple, spotify, netid, dingtalk, patreon.",
                requested_claims
                  | refs."oneOf.2.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                subject_source
                  | std.enum.TagOrString
                  | [| 'me, 'userinfo |]
                  | doc "Controls which source the subject identifier is taken from by microsoft provider. If set to `userinfo` (the default) then the identifier is taken from the `sub` field of OIDC ID token or data received from `/userinfo` standard OIDC endpoint. If set to `me` then the `id` field of data structure received from `https://graph.microsoft.com/v1.0/me` is taken as an identifier."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.2.allOf.1.definitions.selfServiceRequireVerifiedAddressHook" =
        { hook | std.contract.Equal "require_verified_address", },
      "oneOf.2.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.2.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.2.allOf.1.definitions.selfServiceShowVerificationUIHook" =
        { hook | std.contract.Equal "show_verification_ui", },
      "oneOf.2.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | std.contract.any_of
                [
                  std.contract.not
                    (std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Record
                          {
                            additional = 'Some Dyn,
                            patterns = {},
                            properties =
                              {
                                  response =
                                    std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          js2n.record.Record
                                            {
                                              additional = 'Some Dyn,
                                              patterns = {},
                                              properties =
                                                {
                                                    ignore = js2n.Enum [ true ],
                                                  },
                                              required = { ignore = true, },
                                            },
                                          Array Dyn
                                        ],
                                },
                            required = { response = true, },
                          },
                        Array Dyn
                      ]),
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties = { can_interrupt = js2n.Enum [ false ], },
                      required = {},
                    }
                ]
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.2.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.2.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          js2n.string.Matches "^(http|https|file|base64)://",
                          { _ | Dyn },
                          Array Dyn
                        ],
                      std.contract.not
                        (std.contract.any_of
                          [
                            js2n.Null,
                            Bool,
                            Number,
                            js2n.string.Matches "^(http|https|file|base64)://",
                            { _ | Dyn },
                            Array Dyn
                          ])
                    ]
                  | String
                  | optional,
                can_interrupt
                  | Bool
                  | doc "Deprecated, please use `response.parse` instead. If enabled allows the web hook to interrupt / abort the self-service flow. It only applies to certain flows (registration/verification/login/settings) and requires a valid response format."
                  | optional,
                emit_analytics_event
                  | Bool
                  | doc "Emit tracing events for this webhook on delivery or error"
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                response
                  | std.contract.not
                    (std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Record
                          {
                            additional = 'Some Dyn,
                            patterns = {},
                            properties =
                              {
                                  ignore = js2n.Const true,
                                  parse = js2n.Const true,
                                },
                            required = { ignore = true, parse = true, },
                          },
                        Array Dyn
                      ])
                  | {
                    ignore
                      | Bool
                      | doc "Ignore the response from the web hook. If enabled the request will be made asynchronously which can be useful if you only wish to notify another system but do not parse the response."
                      | optional,
                    parse
                      | Bool
                      | doc "If enabled parses the response before saving the flow result. Set this value to true if you would like to modify the identity, for example identity metadata, before saving it during registration. When enabled, you may also abort the registration, verification, login or settings flow due to, for example, a validation flow. Head over to the [web hook documentation](https://www.ory.sh/docs/kratos/hooks/configure-hooks) for more information."
                      | optional,
                  }
                  | doc "How the web hook should handle the response"
                  | optional,
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.2.allOf.1.definitions.smsCourierTemplate" =
        {
            body
              | {
                plaintext
                  | String
                  | doc "A template send to the SMS provider."
                  | optional,
              }
              | optional,
          },
      "oneOf.2.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.2.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.2.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.2.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.2.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.2.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.2.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.20.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.20.allOf.1.definitions.baseUrl" = String,
      "oneOf.20.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.20.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.20.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.20.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.20.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.20.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.20.allOf.1.definitions.selfServiceAfterLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.20.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.20.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.20.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.20.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.20.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.20.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.20.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.20.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.20.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.20.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.20.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.20.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.20.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.20.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.20.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.20.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.20.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.20.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.20.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.20.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.20.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.20.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.20.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.20.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.20.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.20.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.20.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.20.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.20.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.20.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.20.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.20.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.20.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { tenant = js2n.Always, },
                          required = { tenant = true, },
                        },
                      Array Dyn
                    ])),
              {
                auth_url | String | optional,
                client_id | String,
                client_secret | String,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                provider
                  | std.enum.TagOrString
                  | [|
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github
                  |]
                  | doc "Can be one of github, gitlab, generic, google, microsoft, discord, slack, facebook.",
                requested_claims
                  | refs."oneOf.20.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.20.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.20.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.20.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.20.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.20.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | String
                  | doc "Path to the jsonnet template used for payload generation. Only used for those HTTP methods, which support HTTP body payloads"
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.20.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.20.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.20.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.21.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.21.allOf.1.definitions.baseUrl" = String,
      "oneOf.21.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.21.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.21.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.21.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.21.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.21.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.21.allOf.1.definitions.selfServiceAfterLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.21.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.21.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.21.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.21.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.21.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.21.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.21.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.21.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.21.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.21.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.21.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.21.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.21.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.21.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.21.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.21.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.21.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.21.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.21.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.21.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.21.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.21.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.21.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.21.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.21.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.21.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.21.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.21.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.21.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.21.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.21.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.21.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.21.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { tenant = js2n.Always, },
                          required = { tenant = true, },
                        },
                      Array Dyn
                    ])),
              {
                auth_url | String | optional,
                client_id | String,
                client_secret | String,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                provider
                  | std.enum.TagOrString
                  | [|
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github
                  |]
                  | doc "Can be one of github, gitlab, generic, google, microsoft, discord, slack, facebook.",
                requested_claims
                  | refs."oneOf.21.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.21.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.21.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.21.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.21.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.21.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | String
                  | doc "Path to the jsonnet template used for payload generation. Only used for those HTTP methods, which support HTTP body payloads"
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.21.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.21.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.21.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.22.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.22.allOf.1.definitions.baseUrl" = String,
      "oneOf.22.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.22.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.22.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.22.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.22.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.22.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.22.allOf.1.definitions.selfServiceAfterLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.22.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.22.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.22.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.22.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.22.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.22.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.22.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.22.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.22.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.22.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.22.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.22.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.22.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.22.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.22.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.22.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.22.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.22.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.22.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.22.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.22.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.22.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.22.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.22.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.22.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.22.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.22.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.22.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.22.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.22.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.22.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.22.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.22.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { tenant = js2n.Always, },
                          required = { tenant = true, },
                        },
                      Array Dyn
                    ])),
              {
                auth_url | String | optional,
                client_id | String,
                client_secret | String,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                provider
                  | std.enum.TagOrString
                  | [|
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github
                  |]
                  | doc "Can be one of github, gitlab, generic, google, microsoft, discord, slack, facebook.",
                requested_claims
                  | refs."oneOf.22.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.22.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.22.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.22.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.22.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.22.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | String
                  | doc "Path to the jsonnet template used for payload generation. Only used for those HTTP methods, which support HTTP body payloads"
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.22.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.22.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.22.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.23.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.23.allOf.1.definitions.baseUrl" = String,
      "oneOf.23.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.23.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.23.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.23.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.23.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.23.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.23.allOf.1.definitions.selfServiceAfterLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.23.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.23.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.23.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.23.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.23.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.23.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.23.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.23.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.23.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.23.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.23.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.23.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.23.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.23.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.23.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.23.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.23.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.23.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.23.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.23.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.23.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.23.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.23.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.23.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.23.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.23.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.23.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.23.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.23.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.23.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.23.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.23.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.23.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { tenant = js2n.Always, },
                          required = { tenant = true, },
                        },
                      Array Dyn
                    ])),
              {
                auth_url | String | optional,
                client_id | String,
                client_secret | String,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                provider
                  | std.enum.TagOrString
                  | [|
                    'yandex,
                    'vk,
                    'auth0,
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github
                  |]
                  | doc "Can be one of github, gitlab, generic, google, microsoft, discord, slack, facebook, auth0, vk, yandex.",
                requested_claims
                  | refs."oneOf.23.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.23.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.23.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.23.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.23.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.23.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | String
                  | doc "Path to the jsonnet template used for payload generation. Only used for those HTTP methods, which support HTTP body payloads"
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.23.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.23.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.23.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.23.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.23.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.23.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.23.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.24.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.24.allOf.1.definitions.baseUrl" = String,
      "oneOf.24.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.24.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.24.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.24.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.24.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.24.allOf.1.definitions.selfServiceAfterLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.24.allOf.1.definitions.selfServiceAfterLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.24.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.24.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.24.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.24.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.24.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.24.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.24.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.24.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.24.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.24.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.24.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.24.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.24.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.24.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.24.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.24.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.24.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.24.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.24.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.24.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.24.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.24.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.24.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.24.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.24.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.24.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.24.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.24.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.24.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.24.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.24.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.24.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.24.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { tenant = js2n.Always, },
                          required = { tenant = true, },
                        },
                      Array Dyn
                    ])),
              {
                auth_url | String | optional,
                client_id | String,
                client_secret | String,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                provider
                  | std.enum.TagOrString
                  | [|
                    'yandex,
                    'vk,
                    'auth0,
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github
                  |]
                  | doc "Can be one of github, gitlab, generic, google, microsoft, discord, slack, facebook, auth0, vk, yandex.",
                requested_claims
                  | refs."oneOf.24.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.24.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.24.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.24.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.24.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.24.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | String
                  | doc "Path to the jsonnet template used for payload generation. Only used for those HTTP methods, which support HTTP body payloads"
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.24.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.24.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.24.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.24.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.24.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.24.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.24.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.25.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.25.allOf.1.definitions.baseUrl" = String,
      "oneOf.25.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.25.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.25.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.25.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.25.allOf.1.definitions.selfServiceAfterOIDCLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.25.allOf.1.definitions.selfServiceAfterPasswordLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.25.allOf.1.definitions.selfServiceAfterOIDCLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.25.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.25.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.25.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.25.allOf.1.definitions.selfServiceAfterPasswordLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.25.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.25.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.25.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.25.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.25.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.25.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.25.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.25.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.25.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.25.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.25.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.25.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.25.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.25.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.25.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.25.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.25.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.25.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.25.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.25.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.25.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.25.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.25.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.25.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.25.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.25.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.25.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.25.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.25.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.25.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.25.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.25.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.25.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.25.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { tenant = js2n.Always, },
                          required = { tenant = true, },
                        },
                      Array Dyn
                    ])),
              {
                auth_url | String | optional,
                client_id | String,
                client_secret | String,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                provider
                  | std.enum.TagOrString
                  | [|
                    'yandex,
                    'vk,
                    'auth0,
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github
                  |]
                  | doc "Can be one of github, gitlab, generic, google, microsoft, discord, slack, facebook, auth0, vk, yandex.",
                requested_claims
                  | refs."oneOf.25.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.25.allOf.1.definitions.selfServiceRequireVerifiedAddressHook" =
        { hook | std.contract.Equal "require_verified_address", },
      "oneOf.25.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.25.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.25.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.25.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.25.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          js2n.string.Matches "^(http|https|file|base64)://",
                          { _ | Dyn },
                          Array Dyn
                        ],
                      std.contract.not
                        (std.contract.any_of
                          [
                            js2n.Null,
                            Bool,
                            Number,
                            js2n.string.Matches "^(http|https|file|base64)://",
                            { _ | Dyn },
                            Array Dyn
                          ])
                    ]
                  | String
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.25.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.25.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.25.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.25.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.25.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.25.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.25.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.26.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.26.allOf.1.definitions.baseUrl" = String,
      "oneOf.26.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.26.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.26.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.26.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.26.allOf.1.definitions.selfServiceAfterOIDCLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.26.allOf.1.definitions.selfServiceAfterPasswordLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.26.allOf.1.definitions.selfServiceAfterOIDCLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.26.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.26.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.26.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.26.allOf.1.definitions.selfServiceAfterPasswordLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.26.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.26.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.26.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.26.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.26.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.26.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.26.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.26.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.26.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.26.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.26.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.26.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.26.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.26.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.26.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.26.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.26.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.26.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.26.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.26.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.26.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.26.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.26.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.26.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.26.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.26.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.26.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.26.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.26.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.26.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.26.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.26.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.26.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.26.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { tenant = js2n.Always, },
                          required = { tenant = true, },
                        },
                      Array Dyn
                    ])),
              {
                auth_url | String | optional,
                client_id | String,
                client_secret | String,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                provider
                  | std.enum.TagOrString
                  | [|
                    'yandex,
                    'vk,
                    'auth0,
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab-app,
                    'gitlab,
                    'github
                  |]
                  | doc "Can be one of github, github-app, gitlab, generic, google, microsoft, discord, slack, facebook, auth0, vk, yandex.",
                requested_claims
                  | refs."oneOf.26.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.26.allOf.1.definitions.selfServiceRequireVerifiedAddressHook" =
        { hook | std.contract.Equal "require_verified_address", },
      "oneOf.26.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.26.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.26.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.26.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.26.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          js2n.string.Matches "^(http|https|file|base64)://",
                          { _ | Dyn },
                          Array Dyn
                        ],
                      std.contract.not
                        (std.contract.any_of
                          [
                            js2n.Null,
                            Bool,
                            Number,
                            js2n.string.Matches "^(http|https|file|base64)://",
                            { _ | Dyn },
                            Array Dyn
                          ])
                    ]
                  | String
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.26.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.26.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.26.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.26.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.26.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.26.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.26.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.27.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.27.allOf.1.definitions.baseUrl" = String,
      "oneOf.27.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.27.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.27.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.27.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.27.allOf.1.definitions.selfServiceAfterOIDCLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.27.allOf.1.definitions.selfServiceAfterPasswordLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.27.allOf.1.definitions.selfServiceAfterOIDCLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.27.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.27.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.27.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.27.allOf.1.definitions.selfServiceAfterPasswordLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.27.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.27.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.27.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.27.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.27.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.27.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.27.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.27.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.27.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.27.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.27.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.27.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.27.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.27.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.27.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.27.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.27.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.27.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.27.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.27.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.27.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.27.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.27.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.27.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.27.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.27.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.27.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.27.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.27.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.27.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.27.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.27.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.27.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.27.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { tenant = js2n.Always, },
                          required = { tenant = true, },
                        },
                      Array Dyn
                    ])),
              {
                auth_url | String | optional,
                client_id | String,
                client_secret | String,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                provider
                  | std.enum.TagOrString
                  | [|
                    'yandex,
                    'vk,
                    'auth0,
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab-app,
                    'gitlab,
                    'github
                  |]
                  | doc "Can be one of github, github-app, gitlab, generic, google, microsoft, discord, slack, facebook, auth0, vk, yandex.",
                requested_claims
                  | refs."oneOf.27.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.27.allOf.1.definitions.selfServiceRequireVerifiedAddressHook" =
        { hook | std.contract.Equal "require_verified_address", },
      "oneOf.27.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.27.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.27.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.27.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.27.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          js2n.string.Matches "^(http|https|file|base64)://",
                          { _ | Dyn },
                          Array Dyn
                        ],
                      std.contract.not
                        (std.contract.any_of
                          [
                            js2n.Null,
                            Bool,
                            Number,
                            js2n.string.Matches "^(http|https|file|base64)://",
                            { _ | Dyn },
                            Array Dyn
                          ])
                    ]
                  | String
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.27.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.27.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.27.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.27.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.27.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.27.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.27.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.28.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.28.allOf.1.definitions.baseUrl" = String,
      "oneOf.28.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.28.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.28.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.28.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.28.allOf.1.definitions.selfServiceAfterOIDCLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.28.allOf.1.definitions.selfServiceAfterPasswordLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.28.allOf.1.definitions.selfServiceAfterOIDCLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.28.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.28.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.28.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.28.allOf.1.definitions.selfServiceAfterPasswordLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.28.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.28.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.28.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.28.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.28.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.28.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.28.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.28.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.28.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.28.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.28.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.28.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.28.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.28.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.28.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.28.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.28.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.28.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.28.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.28.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.28.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.28.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.28.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.28.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.28.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.28.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.28.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.28.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.28.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.28.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.28.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.28.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.28.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.28.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { tenant = js2n.Always, },
                          required = { tenant = true, },
                        },
                      Array Dyn
                    ])),
              {
                auth_url | String | optional,
                client_id | String,
                client_secret | String,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                provider
                  | std.enum.TagOrString
                  | [|
                    'yandex,
                    'vk,
                    'auth0,
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab-app,
                    'gitlab,
                    'github
                  |]
                  | doc "Can be one of github, github-app, gitlab, generic, google, microsoft, discord, slack, facebook, auth0, vk, yandex.",
                requested_claims
                  | refs."oneOf.28.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.28.allOf.1.definitions.selfServiceRequireVerifiedAddressHook" =
        { hook | std.contract.Equal "require_verified_address", },
      "oneOf.28.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.28.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.28.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.28.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.28.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          js2n.string.Matches "^(http|https|file|base64)://",
                          { _ | Dyn },
                          Array Dyn
                        ],
                      std.contract.not
                        (std.contract.any_of
                          [
                            js2n.Null,
                            Bool,
                            Number,
                            js2n.string.Matches "^(http|https|file|base64)://",
                            { _ | Dyn },
                            Array Dyn
                          ])
                    ]
                  | String
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.28.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.28.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.28.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.28.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.28.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.28.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.28.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.29.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.29.allOf.1.definitions.baseUrl" = String,
      "oneOf.29.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.29.allOf.1.definitions.featureRequiredAal" =
        std.contract.Sequence
            [ std.enum.TagOrString, [| 'highest_available, 'aal1 |] ],
      "oneOf.29.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.29.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.29.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.29.allOf.1.definitions.selfServiceAfterOIDCLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.29.allOf.1.definitions.selfServiceAfterPasswordLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.29.allOf.1.definitions.selfServiceAfterOIDCLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.29.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.29.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.29.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.29.allOf.1.definitions.selfServiceAfterPasswordLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.29.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.29.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.29.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.29.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.29.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.29.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.29.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.29.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.29.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.29.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.29.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.29.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.29.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.29.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.29.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.29.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.29.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.29.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.29.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.29.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.29.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.29.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.29.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.29.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.29.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.29.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.29.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.29.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.29.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.29.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.29.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.29.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.29.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.29.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { tenant = js2n.Always, },
                          required = { tenant = true, },
                        },
                      Array Dyn
                    ])),
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "apple", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required
                          [ "private_key", "private_key_id", "team_id" ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { client_secret = js2n.Always, },
                              required = { client_secret = true, },
                            },
                          Array Dyn
                        ])
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required [ "client_secret" ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { team_id = js2n.Always, },
                              required = { team_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { private_key_id = js2n.Always, },
                              required = { private_key_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { private_key = js2n.Always, },
                              required = { private_key = true, },
                            },
                          Array Dyn
                        ])
                  ]),
              {
                auth_url | String | optional,
                client_id | String,
                client_secret | String | optional,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                private_key
                  | String
                  | doc "Sign In with Apple Private Key needed for generating a JWT token for client secret"
                  | optional,
                private_key_id
                  | String
                  | doc "Sign In with Apple Private Key Identifier needed for generating a JWT token for client secret"
                  | optional,
                provider
                  | std.enum.TagOrString
                  | [|
                    'apple,
                    'yandex,
                    'vk,
                    'auth0,
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github-app,
                    'github
                  |]
                  | doc "Can be one of github, github-app, gitlab, generic, google, microsoft, discord, slack, facebook, auth0, vk, yandex.",
                requested_claims
                  | refs."oneOf.29.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                team_id
                  | String
                  | doc "Apple Developer Team ID needed for generating a JWT token for client secret"
                  | optional,
                tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.29.allOf.1.definitions.selfServiceRequireVerifiedAddressHook" =
        { hook | std.contract.Equal "require_verified_address", },
      "oneOf.29.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.29.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.29.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.29.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.29.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          js2n.string.Matches "^(http|https|file|base64)://",
                          { _ | Dyn },
                          Array Dyn
                        ],
                      std.contract.not
                        (std.contract.any_of
                          [
                            js2n.Null,
                            Bool,
                            Number,
                            js2n.string.Matches "^(http|https|file|base64)://",
                            { _ | Dyn },
                            Array Dyn
                          ])
                    ]
                  | String
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.29.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.29.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.29.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.29.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.29.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.29.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.29.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.3.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.3.allOf.1.definitions.baseUrl" = String,
      "oneOf.3.allOf.1.definitions.courierTemplates" =
        {
            invalid
              | {
                email
                  | refs."oneOf.3.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
              }
              | optional,
            valid
              | {
                email
                  | refs."oneOf.3.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
              }
              | optional,
          },
      "oneOf.3.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.3.allOf.1.definitions.emailCourierTemplate" =
        {
            body
              | {
                html
                  | String
                  | doc "The default template used for sending out emails. The template can contain HTML "
                  | optional,
                plaintext
                  | String
                  | doc "The fallback template for email clients that do not support html."
                  | optional,
              }
              | optional,
            subject | String | optional,
          },
      "oneOf.3.allOf.1.definitions.featureRequiredAal" =
        std.contract.Sequence
            [ std.enum.TagOrString, [| 'highest_available, 'aal1 |] ],
      "oneOf.3.allOf.1.definitions.httpRequestConfig" =
        {
            additionalProperties | js2n.Never | optional,
            auth
              | js2n.OneOf
                [
                  refs."oneOf.3.allOf.1.definitions.webHookAuthApiKeyProperties",
                  refs."oneOf.3.allOf.1.definitions.webHookAuthBasicAuthProperties"
                ]
              | { _ | Dyn }
              | doc "Define which auth mechanism to use for auth with the HTTP email provider"
              | optional,
            body
              | js2n.string.Matches "^(http|https|file|base64)://"
              | doc "URI pointing to the jsonnet template used for payload generation. Only used for those HTTP methods, which support HTTP body payloads"
              | optional,
            headers
              | { _ | String }
              | doc "The HTTP headers that must be applied to request"
              | optional,
            method
              | String
              | doc "The HTTP method to use (GET, POST, etc). Defaults to POST."
              | optional,
            url
              | js2n.string.Matches "^https?://"
              | doc "This URL will be used to send the emails to."
              | optional,
          },
      "oneOf.3.allOf.1.definitions.selfServiceAfterDefaultLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.3.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.3.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.3.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.3.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.3.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.3.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.3.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.3.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.3.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
            oidc
              | refs."oneOf.3.allOf.1.definitions.selfServiceAfterOIDCLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.3.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.3.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.3.allOf.1.definitions.selfServiceAfterOIDCLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.3.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.3.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.3.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.3.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.3.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.3.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.3.allOf.1.definitions.selfServiceAfterRecoveryHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.3.allOf.1.definitions.selfServiceAfterRecoveryHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.3.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.3.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ]
                  ]
              )
            ],
      "oneOf.3.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.3.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.3.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.3.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.3.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.3.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.3.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.3.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.3.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.3.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.3.allOf.1.definitions.selfServiceShowVerificationUIHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.3.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.3.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.3.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.3.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.3.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.3.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.3.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.3.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.3.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.3.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.3.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.3.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.3.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.3.allOf.1.definitions.selfServiceBeforeRecovery" =
        {
            hooks
              | refs."oneOf.3.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.3.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.3.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.3.allOf.1.definitions.selfServiceBeforeSettings" =
        {
            hooks
              | refs."oneOf.3.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.3.allOf.1.definitions.selfServiceBeforeVerification" =
        {
            hooks
              | refs."oneOf.3.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.3.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.3.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.3.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "microsoft_tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { microsoft_tenant = js2n.Always, },
                          required = { microsoft_tenant = true, },
                        },
                      Array Dyn
                    ])),
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "apple", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required
                          [
                            "apple_private_key",
                            "apple_private_key_id",
                            "apple_team_id"
                          ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { client_secret = js2n.string.MinLength 1, },
                              required = { client_secret = true, },
                            },
                          Array Dyn
                        ])
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required [ "client_secret" ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { apple_team_id = js2n.string.MinLength 1, },
                              required = { apple_team_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key_id =
                                      js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key = js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key = true, },
                            },
                          Array Dyn
                        ])
                  ]),
              {
                apple_private_key
                  | String
                  | doc "Sign In with Apple Private Key needed for generating a JWT token for client secret"
                  | optional,
                apple_private_key_id
                  | String
                  | doc "Sign In with Apple Private Key Identifier needed for generating a JWT token for client secret"
                  | optional,
                apple_team_id
                  | String
                  | doc "Apple Developer Team ID needed for generating a JWT token for client secret"
                  | optional,
                auth_url | String | optional,
                client_id | String,
                client_secret | String | optional,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                microsoft_tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                provider
                  | std.enum.TagOrString
                  | [|
                    'lark,
                    'linkedin,
                    'patreon,
                    'dingtalk,
                    'netid,
                    'spotify,
                    'apple,
                    'yandex,
                    'vk,
                    'auth0,
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github-app,
                    'github
                  |]
                  | doc "Can be one of github, github-app, gitlab, generic, google, microsoft, discord, slack, facebook, auth0, vk, yandex, apple, spotify, netid, dingtalk, patreon.",
                requested_claims
                  | refs."oneOf.3.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                subject_source
                  | std.enum.TagOrString
                  | [| 'me, 'userinfo |]
                  | doc "Controls which source the subject identifier is taken from by microsoft provider. If set to `userinfo` (the default) then the identifier is taken from the `sub` field of OIDC ID token or data received from `/userinfo` standard OIDC endpoint. If set to `me` then the `id` field of data structure received from `https://graph.microsoft.com/v1.0/me` is taken as an identifier."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.3.allOf.1.definitions.selfServiceRequireVerifiedAddressHook" =
        { hook | std.contract.Equal "require_verified_address", },
      "oneOf.3.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.3.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.3.allOf.1.definitions.selfServiceShowVerificationUIHook" =
        { hook | std.contract.Equal "show_verification_ui", },
      "oneOf.3.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | std.contract.any_of
                [
                  std.contract.not
                    (std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Record
                          {
                            additional = 'Some Dyn,
                            patterns = {},
                            properties =
                              {
                                  response =
                                    std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          js2n.record.Record
                                            {
                                              additional = 'Some Dyn,
                                              patterns = {},
                                              properties =
                                                {
                                                    ignore = js2n.Enum [ true ],
                                                  },
                                              required = { ignore = true, },
                                            },
                                          Array Dyn
                                        ],
                                },
                            required = { response = true, },
                          },
                        Array Dyn
                      ]),
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties = { can_interrupt = js2n.Enum [ false ], },
                      required = {},
                    }
                ]
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.3.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.3.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          js2n.string.Matches "^(http|https|file|base64)://",
                          { _ | Dyn },
                          Array Dyn
                        ],
                      std.contract.not
                        (std.contract.any_of
                          [
                            js2n.Null,
                            Bool,
                            Number,
                            js2n.string.Matches "^(http|https|file|base64)://",
                            { _ | Dyn },
                            Array Dyn
                          ])
                    ]
                  | String
                  | optional,
                can_interrupt
                  | Bool
                  | doc "Deprecated, please use `response.parse` instead. If enabled allows the web hook to interrupt / abort the self-service flow. It only applies to certain flows (registration/verification/login/settings) and requires a valid response format."
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                response
                  | std.contract.not
                    (std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Record
                          {
                            additional = 'Some Dyn,
                            patterns = {},
                            properties =
                              {
                                  ignore = js2n.Const true,
                                  parse = js2n.Const true,
                                },
                            required = { ignore = true, parse = true, },
                          },
                        Array Dyn
                      ])
                  | {
                    ignore
                      | Bool
                      | doc "Ignore the response from the web hook. If enabled the request will be made asynchronously which can be useful if you only wish to notify another system but do not parse the response."
                      | optional,
                    parse
                      | Bool
                      | doc "If enabled parses the response before saving the flow result. Set this value to true if you would like to modify the identity, for example identity metadata, before saving it during registration. When enabled, you may also abort the registration, verification, login or settings flow due to, for example, a validation flow. Head over to the [web hook documentation](https://www.ory.sh/docs/kratos/hooks/configure-hooks) for more information."
                      | optional,
                  }
                  | doc "How the web hook should handle the response"
                  | optional,
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.3.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.3.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.3.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.3.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.3.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.3.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.3.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.30.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.30.allOf.1.definitions.baseUrl" = String,
      "oneOf.30.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.30.allOf.1.definitions.featureRequiredAal" =
        std.contract.Sequence
            [ std.enum.TagOrString, [| 'highest_available, 'aal1 |] ],
      "oneOf.30.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.30.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.30.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.30.allOf.1.definitions.selfServiceAfterOIDCLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.30.allOf.1.definitions.selfServiceAfterPasswordLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.30.allOf.1.definitions.selfServiceAfterOIDCLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.30.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.30.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.30.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.30.allOf.1.definitions.selfServiceAfterPasswordLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.30.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.30.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.30.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.30.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.30.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.30.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.30.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.30.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.30.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.30.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.30.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.30.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.30.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.30.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.30.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.30.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.30.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.30.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.30.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.30.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.30.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.30.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.30.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.30.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.30.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.30.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.30.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.30.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.30.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.30.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.30.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.30.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.30.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.30.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { tenant = js2n.Always, },
                          required = { tenant = true, },
                        },
                      Array Dyn
                    ])),
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "apple", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required
                          [ "private_key", "private_key_id", "team_id" ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { client_secret = js2n.Always, },
                              required = { client_secret = true, },
                            },
                          Array Dyn
                        ])
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required [ "client_secret" ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { team_id = js2n.Always, },
                              required = { team_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { private_key_id = js2n.Always, },
                              required = { private_key_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { private_key = js2n.Always, },
                              required = { private_key = true, },
                            },
                          Array Dyn
                        ])
                  ]),
              {
                auth_url | String | optional,
                client_id | String,
                client_secret | String | optional,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                private_key
                  | String
                  | doc "Sign In with Apple Private Key needed for generating a JWT token for client secret"
                  | optional,
                private_key_id
                  | String
                  | doc "Sign In with Apple Private Key Identifier needed for generating a JWT token for client secret"
                  | optional,
                provider
                  | std.enum.TagOrString
                  | [|
                    'apple,
                    'yandex,
                    'vk,
                    'auth0,
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github-app,
                    'github
                  |]
                  | doc "Can be one of github, github-app, gitlab, generic, google, microsoft, discord, slack, facebook, auth0, vk, yandex.",
                requested_claims
                  | refs."oneOf.30.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                team_id
                  | String
                  | doc "Apple Developer Team ID needed for generating a JWT token for client secret"
                  | optional,
                tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.30.allOf.1.definitions.selfServiceRequireVerifiedAddressHook" =
        { hook | std.contract.Equal "require_verified_address", },
      "oneOf.30.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.30.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.30.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.30.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.30.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          js2n.string.Matches "^(http|https|file|base64)://",
                          { _ | Dyn },
                          Array Dyn
                        ],
                      std.contract.not
                        (std.contract.any_of
                          [
                            js2n.Null,
                            Bool,
                            Number,
                            js2n.string.Matches "^(http|https|file|base64)://",
                            { _ | Dyn },
                            Array Dyn
                          ])
                    ]
                  | String
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.30.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.30.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.30.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.30.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.30.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.30.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.30.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.31.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.31.allOf.1.definitions.baseUrl" = String,
      "oneOf.31.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.31.allOf.1.definitions.featureRequiredAal" =
        std.contract.Sequence
            [ std.enum.TagOrString, [| 'highest_available, 'aal1 |] ],
      "oneOf.31.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.31.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.31.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.31.allOf.1.definitions.selfServiceAfterOIDCLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.31.allOf.1.definitions.selfServiceAfterPasswordLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.31.allOf.1.definitions.selfServiceAfterOIDCLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.31.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.31.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.31.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.31.allOf.1.definitions.selfServiceAfterPasswordLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.31.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.31.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.31.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.31.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.31.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.31.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.31.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.31.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.31.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.31.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.31.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.31.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.31.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.31.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.31.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.31.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.31.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.31.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.31.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.31.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.31.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.31.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.31.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.31.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.31.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.31.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.31.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.31.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.31.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.31.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.31.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.31.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.31.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.31.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { tenant = js2n.Always, },
                          required = { tenant = true, },
                        },
                      Array Dyn
                    ])),
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "apple", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required
                          [ "private_key", "private_key_id", "team_id" ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { client_secret = js2n.Always, },
                              required = { client_secret = true, },
                            },
                          Array Dyn
                        ])
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required [ "client_secret" ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { team_id = js2n.Always, },
                              required = { team_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { private_key_id = js2n.Always, },
                              required = { private_key_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { private_key = js2n.Always, },
                              required = { private_key = true, },
                            },
                          Array Dyn
                        ])
                  ]),
              {
                auth_url | String | optional,
                client_id | String,
                client_secret | String | optional,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                private_key
                  | String
                  | doc "Sign In with Apple Private Key needed for generating a JWT token for client secret"
                  | optional,
                private_key_id
                  | String
                  | doc "Sign In with Apple Private Key Identifier needed for generating a JWT token for client secret"
                  | optional,
                provider
                  | std.enum.TagOrString
                  | [|
                    'apple,
                    'yandex,
                    'vk,
                    'auth0,
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github-app,
                    'github
                  |]
                  | doc "Can be one of github, github-app, gitlab, generic, google, microsoft, discord, slack, facebook, auth0, vk, yandex.",
                requested_claims
                  | refs."oneOf.31.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                team_id
                  | String
                  | doc "Apple Developer Team ID needed for generating a JWT token for client secret"
                  | optional,
                tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.31.allOf.1.definitions.selfServiceRequireVerifiedAddressHook" =
        { hook | std.contract.Equal "require_verified_address", },
      "oneOf.31.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.31.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.31.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.31.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.31.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          js2n.string.Matches "^(http|https|file|base64)://",
                          { _ | Dyn },
                          Array Dyn
                        ],
                      std.contract.not
                        (std.contract.any_of
                          [
                            js2n.Null,
                            Bool,
                            Number,
                            js2n.string.Matches "^(http|https|file|base64)://",
                            { _ | Dyn },
                            Array Dyn
                          ])
                    ]
                  | String
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.31.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.31.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.31.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.31.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.31.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.31.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.31.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.32.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.32.allOf.1.definitions.baseUrl" = String,
      "oneOf.32.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.32.allOf.1.definitions.featureRequiredAal" =
        std.contract.Sequence
            [ std.enum.TagOrString, [| 'highest_available, 'aal1 |] ],
      "oneOf.32.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.32.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.32.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.32.allOf.1.definitions.selfServiceAfterOIDCLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.32.allOf.1.definitions.selfServiceAfterPasswordLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.32.allOf.1.definitions.selfServiceAfterOIDCLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.32.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.32.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.32.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.32.allOf.1.definitions.selfServiceAfterPasswordLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.32.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.32.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.32.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.32.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.32.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.32.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.32.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.32.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.32.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.32.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.32.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.32.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.32.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.32.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.32.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.32.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.32.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.32.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.32.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.32.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.32.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.32.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.32.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.32.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.32.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.32.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.32.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.32.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.32.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.32.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.32.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.32.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.32.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.32.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { tenant = js2n.Always, },
                          required = { tenant = true, },
                        },
                      Array Dyn
                    ])),
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "apple", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required
                          [ "private_key", "private_key_id", "team_id" ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { client_secret = js2n.Always, },
                              required = { client_secret = true, },
                            },
                          Array Dyn
                        ])
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required [ "client_secret" ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { team_id = js2n.Always, },
                              required = { team_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { private_key_id = js2n.Always, },
                              required = { private_key_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { private_key = js2n.Always, },
                              required = { private_key = true, },
                            },
                          Array Dyn
                        ])
                  ]),
              {
                auth_url | String | optional,
                client_id | String,
                client_secret | String | optional,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                private_key
                  | String
                  | doc "Sign In with Apple Private Key needed for generating a JWT token for client secret"
                  | optional,
                private_key_id
                  | String
                  | doc "Sign In with Apple Private Key Identifier needed for generating a JWT token for client secret"
                  | optional,
                provider
                  | std.enum.TagOrString
                  | [|
                    'spotify,
                    'apple,
                    'yandex,
                    'vk,
                    'auth0,
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github-app,
                    'github
                  |]
                  | doc "Can be one of github, github-app, gitlab, generic, google, microsoft, discord, slack, facebook, auth0, vk, yandex, spotify.",
                requested_claims
                  | refs."oneOf.32.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                team_id
                  | String
                  | doc "Apple Developer Team ID needed for generating a JWT token for client secret"
                  | optional,
                tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.32.allOf.1.definitions.selfServiceRequireVerifiedAddressHook" =
        { hook | std.contract.Equal "require_verified_address", },
      "oneOf.32.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.32.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.32.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.32.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.32.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          js2n.string.Matches "^(http|https|file|base64)://",
                          { _ | Dyn },
                          Array Dyn
                        ],
                      std.contract.not
                        (std.contract.any_of
                          [
                            js2n.Null,
                            Bool,
                            Number,
                            js2n.string.Matches "^(http|https|file|base64)://",
                            { _ | Dyn },
                            Array Dyn
                          ])
                    ]
                  | String
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.32.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.32.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.32.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.32.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.32.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.32.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.32.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.4.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.4.allOf.1.definitions.baseUrl" = String,
      "oneOf.4.allOf.1.definitions.courierTemplates" =
        {
            invalid
              | {
                email
                  | refs."oneOf.4.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
              }
              | optional,
            valid
              | {
                email
                  | refs."oneOf.4.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
              }
              | optional,
          },
      "oneOf.4.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.4.allOf.1.definitions.emailCourierTemplate" =
        {
            body
              | {
                html
                  | String
                  | doc "The default template used for sending out emails. The template can contain HTML "
                  | optional,
                plaintext
                  | String
                  | doc "The fallback template for email clients that do not support html."
                  | optional,
              }
              | optional,
            subject | String | optional,
          },
      "oneOf.4.allOf.1.definitions.featureRequiredAal" =
        std.contract.Sequence
            [ std.enum.TagOrString, [| 'highest_available, 'aal1 |] ],
      "oneOf.4.allOf.1.definitions.selfServiceAfterDefaultLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.4.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.4.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.4.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.4.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.4.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.4.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.4.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.4.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.4.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
            oidc
              | refs."oneOf.4.allOf.1.definitions.selfServiceAfterOIDCLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.4.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.4.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.4.allOf.1.definitions.selfServiceAfterOIDCLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.4.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.4.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.4.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.4.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.4.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.4.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.4.allOf.1.definitions.selfServiceAfterRecoveryHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.4.allOf.1.definitions.selfServiceAfterRecoveryHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.4.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.4.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ]
                  ]
              )
            ],
      "oneOf.4.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.4.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.4.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.4.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.4.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.4.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.4.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.4.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.4.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.4.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.4.allOf.1.definitions.selfServiceShowVerificationUIHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.4.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.4.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.4.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.4.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.4.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.4.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.4.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.4.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.4.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.4.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.4.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.4.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.4.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.4.allOf.1.definitions.selfServiceBeforeRecovery" =
        {
            hooks
              | refs."oneOf.4.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.4.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.4.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.4.allOf.1.definitions.selfServiceBeforeSettings" =
        {
            hooks
              | refs."oneOf.4.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.4.allOf.1.definitions.selfServiceBeforeVerification" =
        {
            hooks
              | refs."oneOf.4.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.4.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.4.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.4.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "microsoft_tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { microsoft_tenant = js2n.Always, },
                          required = { microsoft_tenant = true, },
                        },
                      Array Dyn
                    ])),
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "apple", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required
                          [
                            "apple_private_key",
                            "apple_private_key_id",
                            "apple_team_id"
                          ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { client_secret = js2n.string.MinLength 1, },
                              required = { client_secret = true, },
                            },
                          Array Dyn
                        ])
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required [ "client_secret" ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { apple_team_id = js2n.string.MinLength 1, },
                              required = { apple_team_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key_id =
                                      js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key = js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key = true, },
                            },
                          Array Dyn
                        ])
                  ]),
              {
                apple_private_key
                  | String
                  | doc "Sign In with Apple Private Key needed for generating a JWT token for client secret"
                  | optional,
                apple_private_key_id
                  | String
                  | doc "Sign In with Apple Private Key Identifier needed for generating a JWT token for client secret"
                  | optional,
                apple_team_id
                  | String
                  | doc "Apple Developer Team ID needed for generating a JWT token for client secret"
                  | optional,
                auth_url | String | optional,
                client_id | String,
                client_secret | String | optional,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                microsoft_tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                provider
                  | std.enum.TagOrString
                  | [|
                    'linkedin,
                    'patreon,
                    'dingtalk,
                    'netid,
                    'spotify,
                    'apple,
                    'yandex,
                    'vk,
                    'auth0,
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github-app,
                    'github
                  |]
                  | doc "Can be one of github, github-app, gitlab, generic, google, microsoft, discord, slack, facebook, auth0, vk, yandex, apple, spotify, netid, dingtalk, patreon.",
                requested_claims
                  | refs."oneOf.4.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                subject_source
                  | std.enum.TagOrString
                  | [| 'me, 'userinfo |]
                  | doc "Controls which source the subject identifier is taken from by microsoft provider. If set to `userinfo` (the default) then the identifier is taken from the `sub` field of OIDC ID token or data received from `/userinfo` standard OIDC endpoint. If set to `me` then the `id` field of data structure received from `https://graph.microsoft.com/v1.0/me` is taken as an identifier."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.4.allOf.1.definitions.selfServiceRequireVerifiedAddressHook" =
        { hook | std.contract.Equal "require_verified_address", },
      "oneOf.4.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.4.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.4.allOf.1.definitions.selfServiceShowVerificationUIHook" =
        { hook | std.contract.Equal "show_verification_ui", },
      "oneOf.4.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | std.contract.any_of
                [
                  std.contract.not
                    (std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Record
                          {
                            additional = 'Some Dyn,
                            patterns = {},
                            properties =
                              {
                                  response =
                                    std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          js2n.record.Record
                                            {
                                              additional = 'Some Dyn,
                                              patterns = {},
                                              properties =
                                                {
                                                    ignore = js2n.Enum [ true ],
                                                  },
                                              required = { ignore = true, },
                                            },
                                          Array Dyn
                                        ],
                                },
                            required = { response = true, },
                          },
                        Array Dyn
                      ]),
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties = { can_interrupt = js2n.Enum [ false ], },
                      required = {},
                    }
                ]
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.4.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.4.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          js2n.string.Matches "^(http|https|file|base64)://",
                          { _ | Dyn },
                          Array Dyn
                        ],
                      std.contract.not
                        (std.contract.any_of
                          [
                            js2n.Null,
                            Bool,
                            Number,
                            js2n.string.Matches "^(http|https|file|base64)://",
                            { _ | Dyn },
                            Array Dyn
                          ])
                    ]
                  | String
                  | optional,
                can_interrupt
                  | Bool
                  | doc "Deprecated, please use `response.parse` instead. If enabled allows the web hook to interrupt / abort the self-service flow. It only applies to certain flows (registration/verification/login/settings) and requires a valid response format."
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                response
                  | std.contract.not
                    (std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Record
                          {
                            additional = 'Some Dyn,
                            patterns = {},
                            properties =
                              {
                                  ignore = js2n.Const true,
                                  parse = js2n.Const true,
                                },
                            required = { ignore = true, parse = true, },
                          },
                        Array Dyn
                      ])
                  | {
                    ignore
                      | Bool
                      | doc "Ignore the response from the web hook. If enabled the request will be made asynchronously which can be useful if you only wish to notify another system but do not parse the response."
                      | optional,
                    parse
                      | Bool
                      | doc "If enabled parses the response before saving the flow result. Set this value to true if you would like to modify the identity, for example identity metadata, before saving it during registration. When enabled, you may also abort the registration, verification, login or settings flow due to, for example, a validation flow. Head over to the [web hook documentation](https://www.ory.sh/docs/kratos/hooks/configure-hooks) for more information."
                      | optional,
                  }
                  | doc "How the web hook should handle the response"
                  | optional,
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.4.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.4.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.4.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.4.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.4.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.4.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.4.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.5.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.5.allOf.1.definitions.baseUrl" = String,
      "oneOf.5.allOf.1.definitions.courierTemplates" =
        {
            invalid
              | {
                email
                  | refs."oneOf.5.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
              }
              | optional,
            valid
              | {
                email
                  | refs."oneOf.5.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
              }
              | optional,
          },
      "oneOf.5.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.5.allOf.1.definitions.emailCourierTemplate" =
        {
            body
              | {
                html
                  | String
                  | doc "The default template used for sending out emails. The template can contain HTML "
                  | optional,
                plaintext
                  | String
                  | doc "The fallback template for email clients that do not support html."
                  | optional,
              }
              | optional,
            subject | String | optional,
          },
      "oneOf.5.allOf.1.definitions.featureRequiredAal" =
        std.contract.Sequence
            [ std.enum.TagOrString, [| 'highest_available, 'aal1 |] ],
      "oneOf.5.allOf.1.definitions.selfServiceAfterDefaultLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.5.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.5.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.5.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.5.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.5.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.5.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.5.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.5.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.5.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
            oidc
              | refs."oneOf.5.allOf.1.definitions.selfServiceAfterOIDCLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.5.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.5.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.5.allOf.1.definitions.selfServiceAfterOIDCLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.5.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.5.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.5.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.5.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.5.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.5.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.5.allOf.1.definitions.selfServiceAfterRecoveryHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.5.allOf.1.definitions.selfServiceAfterRecoveryHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.5.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.5.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ]
                  ]
              )
            ],
      "oneOf.5.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.5.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.5.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.5.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.5.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.5.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.5.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.5.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.5.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.5.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.5.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.5.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.5.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.5.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.5.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.5.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.5.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.5.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.5.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.5.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.5.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.5.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.5.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.5.allOf.1.definitions.selfServiceBeforeRecovery" =
        {
            hooks
              | refs."oneOf.5.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.5.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.5.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.5.allOf.1.definitions.selfServiceBeforeSettings" =
        {
            hooks
              | refs."oneOf.5.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.5.allOf.1.definitions.selfServiceBeforeVerification" =
        {
            hooks
              | refs."oneOf.5.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.5.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.5.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.5.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "microsoft_tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { microsoft_tenant = js2n.Always, },
                          required = { microsoft_tenant = true, },
                        },
                      Array Dyn
                    ])),
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "apple", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required
                          [
                            "apple_private_key",
                            "apple_private_key_id",
                            "apple_team_id"
                          ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { client_secret = js2n.string.MinLength 1, },
                              required = { client_secret = true, },
                            },
                          Array Dyn
                        ])
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required [ "client_secret" ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { apple_team_id = js2n.string.MinLength 1, },
                              required = { apple_team_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key_id =
                                      js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key = js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key = true, },
                            },
                          Array Dyn
                        ])
                  ]),
              {
                apple_private_key
                  | String
                  | doc "Sign In with Apple Private Key needed for generating a JWT token for client secret"
                  | optional,
                apple_private_key_id
                  | String
                  | doc "Sign In with Apple Private Key Identifier needed for generating a JWT token for client secret"
                  | optional,
                apple_team_id
                  | String
                  | doc "Apple Developer Team ID needed for generating a JWT token for client secret"
                  | optional,
                auth_url | String | optional,
                client_id | String,
                client_secret | String | optional,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                microsoft_tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                provider
                  | std.enum.TagOrString
                  | [|
                    'dingtalk,
                    'netid,
                    'spotify,
                    'apple,
                    'yandex,
                    'vk,
                    'auth0,
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github-app,
                    'github
                  |]
                  | doc "Can be one of github, github-app, gitlab, generic, google, microsoft, discord, slack, facebook, auth0, vk, yandex, spotify, dingtalk.",
                requested_claims
                  | refs."oneOf.5.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                subject_source
                  | std.enum.TagOrString
                  | [| 'me, 'userinfo |]
                  | doc "Controls which source the subject identifier is taken from by microsoft provider. If set to `userinfo` (the default) then the identifier is taken from the `sub` field of OIDC ID token or data received from `/userinfo` standard OIDC endpoint. If set to `me` then the `id` field of data structure received from `https://graph.microsoft.com/v1.0/me` is taken as an identifier."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.5.allOf.1.definitions.selfServiceRequireVerifiedAddressHook" =
        { hook | std.contract.Equal "require_verified_address", },
      "oneOf.5.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.5.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.5.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | std.contract.any_of
                [
                  std.contract.not
                    (std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Record
                          {
                            additional = 'Some Dyn,
                            patterns = {},
                            properties =
                              {
                                  response =
                                    std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          js2n.record.Record
                                            {
                                              additional = 'Some Dyn,
                                              patterns = {},
                                              properties =
                                                {
                                                    ignore = js2n.Enum [ true ],
                                                  },
                                              required = { ignore = true, },
                                            },
                                          Array Dyn
                                        ],
                                },
                            required = { response = true, },
                          },
                        Array Dyn
                      ]),
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties = { can_interrupt = js2n.Enum [ false ], },
                      required = {},
                    }
                ]
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.5.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.5.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          js2n.string.Matches "^(http|https|file|base64)://",
                          { _ | Dyn },
                          Array Dyn
                        ],
                      std.contract.not
                        (std.contract.any_of
                          [
                            js2n.Null,
                            Bool,
                            Number,
                            js2n.string.Matches "^(http|https|file|base64)://",
                            { _ | Dyn },
                            Array Dyn
                          ])
                    ]
                  | String
                  | optional,
                can_interrupt
                  | Bool
                  | doc "If enabled allows the web hook to interrupt / abort the self-service flow. It only applies to certain flows (registration/verification/login/settings) and requires a valid response format."
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                response
                  | {
                    ignore
                      | Bool
                      | doc "Ignore the response from the web hook. If enabled the request will be made asynchronously which can be useful if you only wish to notify another system but do not parse the response."
                      | optional,
                  }
                  | doc "How the web hook should handle the response"
                  | optional,
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.5.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.5.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.5.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.5.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.5.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.5.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.5.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.6.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.6.allOf.1.definitions.baseUrl" = String,
      "oneOf.6.allOf.1.definitions.courierTemplates" =
        {
            invalid
              | {
                email
                  | refs."oneOf.6.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
              }
              | optional,
            valid
              | {
                email
                  | refs."oneOf.6.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
              }
              | optional,
          },
      "oneOf.6.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.6.allOf.1.definitions.emailCourierTemplate" =
        {
            body
              | {
                html
                  | String
                  | doc "The default template used for sending out emails. The template can contain HTML "
                  | optional,
                plaintext
                  | String
                  | doc "The fallback template for email clients that do not support html."
                  | optional,
              }
              | optional,
            subject | String | optional,
          },
      "oneOf.6.allOf.1.definitions.featureRequiredAal" =
        std.contract.Sequence
            [ std.enum.TagOrString, [| 'highest_available, 'aal1 |] ],
      "oneOf.6.allOf.1.definitions.selfServiceAfterDefaultLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.6.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.6.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.6.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.6.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.6.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.6.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.6.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.6.allOf.1.definitions.selfServiceAfterOIDCLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.6.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.6.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.6.allOf.1.definitions.selfServiceAfterOIDCLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.6.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.6.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.6.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.6.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.6.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.6.allOf.1.definitions.selfServiceAfterRecoveryHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.6.allOf.1.definitions.selfServiceAfterRecoveryHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.6.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.6.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ]
                  ]
              )
            ],
      "oneOf.6.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.6.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.6.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.6.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.6.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.6.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.6.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.6.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.6.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.6.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.6.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.6.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.6.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.6.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.6.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.6.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.6.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.6.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.6.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.6.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.6.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.6.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.6.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.6.allOf.1.definitions.selfServiceBeforeRecovery" =
        {
            hooks
              | refs."oneOf.6.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.6.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.6.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.6.allOf.1.definitions.selfServiceBeforeSettings" =
        {
            hooks
              | refs."oneOf.6.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.6.allOf.1.definitions.selfServiceBeforeVerification" =
        {
            hooks
              | refs."oneOf.6.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.6.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.6.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.6.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "microsoft_tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { microsoft_tenant = js2n.Always, },
                          required = { microsoft_tenant = true, },
                        },
                      Array Dyn
                    ])),
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "apple", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required
                          [
                            "apple_private_key",
                            "apple_private_key_id",
                            "apple_team_id"
                          ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { client_secret = js2n.string.MinLength 1, },
                              required = { client_secret = true, },
                            },
                          Array Dyn
                        ])
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required [ "client_secret" ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { apple_team_id = js2n.string.MinLength 1, },
                              required = { apple_team_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key_id =
                                      js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key = js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key = true, },
                            },
                          Array Dyn
                        ])
                  ]),
              {
                apple_private_key
                  | String
                  | doc "Sign In with Apple Private Key needed for generating a JWT token for client secret"
                  | optional,
                apple_private_key_id
                  | String
                  | doc "Sign In with Apple Private Key Identifier needed for generating a JWT token for client secret"
                  | optional,
                apple_team_id
                  | String
                  | doc "Apple Developer Team ID needed for generating a JWT token for client secret"
                  | optional,
                auth_url | String | optional,
                client_id | String,
                client_secret | String | optional,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                microsoft_tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                provider
                  | std.enum.TagOrString
                  | [|
                    'dingtalk,
                    'netid,
                    'spotify,
                    'apple,
                    'yandex,
                    'vk,
                    'auth0,
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github-app,
                    'github
                  |]
                  | doc "Can be one of github, github-app, gitlab, generic, google, microsoft, discord, slack, facebook, auth0, vk, yandex, spotify, dingtalk.",
                requested_claims
                  | refs."oneOf.6.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                subject_source
                  | std.enum.TagOrString
                  | [| 'me, 'userinfo |]
                  | doc "Controls which source the subject identifier is taken from by microsoft provider. If set to `userinfo` (the default) then the identifier is taken from the `sub` field of OIDC ID token or data received from `/userinfo` standard OIDC endpoint. If set to `me` then the `id` field of data structure received from `https://graph.microsoft.com/v1.0/me` is taken as an identifier."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.6.allOf.1.definitions.selfServiceRequireVerifiedAddressHook" =
        { hook | std.contract.Equal "require_verified_address", },
      "oneOf.6.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.6.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.6.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | std.contract.any_of
                [
                  std.contract.not
                    (std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Record
                          {
                            additional = 'Some Dyn,
                            patterns = {},
                            properties =
                              {
                                  response =
                                    std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          js2n.record.Record
                                            {
                                              additional = 'Some Dyn,
                                              patterns = {},
                                              properties =
                                                {
                                                    ignore = js2n.Enum [ true ],
                                                  },
                                              required = { ignore = true, },
                                            },
                                          Array Dyn
                                        ],
                                },
                            required = { response = true, },
                          },
                        Array Dyn
                      ]),
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties = { can_interrupt = js2n.Enum [ false ], },
                      required = {},
                    }
                ]
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.6.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.6.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          js2n.string.Matches "^(http|https|file|base64)://",
                          { _ | Dyn },
                          Array Dyn
                        ],
                      std.contract.not
                        (std.contract.any_of
                          [
                            js2n.Null,
                            Bool,
                            Number,
                            js2n.string.Matches "^(http|https|file|base64)://",
                            { _ | Dyn },
                            Array Dyn
                          ])
                    ]
                  | String
                  | optional,
                can_interrupt
                  | Bool
                  | doc "If enabled allows the web hook to interrupt / abort the self-service flow. It only applies to certain flows (registration/verification/login/settings) and requires a valid response format."
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                response
                  | {
                    ignore
                      | Bool
                      | doc "Ignore the response from the web hook. If enabled the request will be made asynchronously which can be useful if you only wish to notify another system but do not parse the response."
                      | optional,
                  }
                  | doc "How the web hook should handle the response"
                  | optional,
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.6.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.6.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.6.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.6.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.6.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.6.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.6.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.7.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.7.allOf.1.definitions.baseUrl" = String,
      "oneOf.7.allOf.1.definitions.courierTemplates" =
        {
            invalid
              | {
                email
                  | refs."oneOf.7.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
              }
              | optional,
            valid
              | {
                email
                  | refs."oneOf.7.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
              }
              | optional,
          },
      "oneOf.7.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.7.allOf.1.definitions.emailCourierTemplate" =
        {
            body
              | {
                html
                  | String
                  | doc "The default template used for sending out emails. The template can contain HTML "
                  | optional,
                plaintext
                  | String
                  | doc "The fallback template for email clients that do not support html."
                  | optional,
              }
              | optional,
            subject | String | optional,
          },
      "oneOf.7.allOf.1.definitions.featureRequiredAal" =
        std.contract.Sequence
            [ std.enum.TagOrString, [| 'highest_available, 'aal1 |] ],
      "oneOf.7.allOf.1.definitions.selfServiceAfterDefaultLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.7.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.7.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.7.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.7.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.7.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.7.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.7.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.7.allOf.1.definitions.selfServiceAfterOIDCLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.7.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.7.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.7.allOf.1.definitions.selfServiceAfterOIDCLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.7.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.7.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.7.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.7.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.7.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.7.allOf.1.definitions.selfServiceAfterRecoveryHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.7.allOf.1.definitions.selfServiceAfterRecoveryHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.7.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.7.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ]
                  ]
              )
            ],
      "oneOf.7.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.7.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.7.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.7.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.7.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.7.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.7.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.7.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.7.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.7.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.7.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.7.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.7.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.7.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.7.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.7.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.7.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.7.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.7.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.7.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.7.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.7.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.7.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.7.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.7.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.7.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.7.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.7.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "microsoft_tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { microsoft_tenant = js2n.Always, },
                          required = { microsoft_tenant = true, },
                        },
                      Array Dyn
                    ])),
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "apple", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required
                          [
                            "apple_private_key",
                            "apple_private_key_id",
                            "apple_team_id"
                          ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { client_secret = js2n.string.MinLength 1, },
                              required = { client_secret = true, },
                            },
                          Array Dyn
                        ])
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required [ "client_secret" ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { apple_team_id = js2n.string.MinLength 1, },
                              required = { apple_team_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key_id =
                                      js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key = js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key = true, },
                            },
                          Array Dyn
                        ])
                  ]),
              {
                apple_private_key
                  | String
                  | doc "Sign In with Apple Private Key needed for generating a JWT token for client secret"
                  | optional,
                apple_private_key_id
                  | String
                  | doc "Sign In with Apple Private Key Identifier needed for generating a JWT token for client secret"
                  | optional,
                apple_team_id
                  | String
                  | doc "Apple Developer Team ID needed for generating a JWT token for client secret"
                  | optional,
                auth_url | String | optional,
                client_id | String,
                client_secret | String | optional,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                microsoft_tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                provider
                  | std.enum.TagOrString
                  | [|
                    'netid,
                    'spotify,
                    'apple,
                    'yandex,
                    'vk,
                    'auth0,
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github-app,
                    'github
                  |]
                  | doc "Can be one of github, github-app, gitlab, generic, google, microsoft, discord, slack, facebook, auth0, vk, yandex, spotify.",
                requested_claims
                  | refs."oneOf.7.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                subject_source
                  | std.enum.TagOrString
                  | [| 'me, 'userinfo |]
                  | doc "Controls which source the subject identifier is taken from by microsoft provider. If set to `userinfo` (the default) then the identifier is taken from the `sub` field of OIDC ID token or data received from `/userinfo` standard OIDC endpoint. If set to `me` then the `id` field of data structure received from `https://graph.microsoft.com/v1.0/me` is taken as an identifier."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.7.allOf.1.definitions.selfServiceRequireVerifiedAddressHook" =
        { hook | std.contract.Equal "require_verified_address", },
      "oneOf.7.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.7.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.7.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.7.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.7.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          js2n.string.Matches "^(http|https|file|base64)://",
                          { _ | Dyn },
                          Array Dyn
                        ],
                      std.contract.not
                        (std.contract.any_of
                          [
                            js2n.Null,
                            Bool,
                            Number,
                            js2n.string.Matches "^(http|https|file|base64)://",
                            { _ | Dyn },
                            Array Dyn
                          ])
                    ]
                  | String
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                response
                  | {
                    ignore
                      | Bool
                      | doc "Ignore the response from the web hook. If enabled the request will be made asynchronously which can be useful if you only wish to notify another system but do not parse the response."
                      | optional,
                  }
                  | doc "How the web hook should handle the response"
                  | optional,
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.7.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.7.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.7.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.7.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.7.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.7.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.7.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.7.allOf.1.properties.tracing" =
        {
            provider
              | std.enum.TagOrString
              | [| 'zipkin, 'jaeger |]
              | doc "Set this to the tracing backend you wish to use. Supports Jaeger."
              | optional,
            providers
              | {
                jaeger
                  | {
                    local_agent_address
                      | std.contract.any_of
                        [
                          js2n.string.Matches
                            "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                          js2n.string.Matches
                            "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                          js2n.string.Matches
                            "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                        ]
                      | doc "The address of the jaeger-agent where spans should be sent to."
                      | optional,
                    sampling
                      | js2n.record.PropertyNames
                        (std.contract.Sequence
                          [ std.enum.TagOrString, [| 'server_url |] ])
                      | {
                        server_url
                          | String
                          | doc "The address of jaeger-agent's HTTP sampling server"
                          | optional,
                      }
                      | optional,
                  }
                  | doc "Configures the jaeger tracing backend."
                  | optional,
                otlp
                  | {
                    insecure
                      | Bool
                      | doc "Will use HTTP if set to true; defaults to HTTPS."
                      | optional,
                    sampling
                      | js2n.record.PropertyNames
                        (std.contract.Sequence
                          [ std.enum.TagOrString, [| 'sampling_ratio |] ])
                      | {
                        sampling_ratio
                          | Number
                          | doc "Sampling ratio for spans."
                          | optional,
                      }
                      | optional,
                    server_url
                      | std.contract.any_of
                        [
                          js2n.string.Matches
                            "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                          js2n.string.Matches
                            "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                          js2n.string.Matches
                            "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                        ]
                      | doc "The endpoint of the OTLP exporter (HTTP) where spans should be sent to."
                      | optional,
                  }
                  | doc "Configures the OTLP tracing backend."
                  | optional,
                zipkin
                  | {
                    sampling
                      | js2n.record.PropertyNames
                        (std.contract.Sequence
                          [ std.enum.TagOrString, [| 'sampling_ratio |] ])
                      | {
                        sampling_ratio
                          | Number
                          | doc "Sampling ratio for spans."
                          | optional,
                      }
                      | optional,
                    server_url
                      | String
                      | doc "The address of the Zipkin server where spans should be sent to."
                      | optional,
                  }
                  | doc "Configures the zipkin tracing backend."
                  | optional,
              }
              | optional,
            service_name
              | String
              | doc "Specifies the service name to use on the tracer."
              | optional,
          },
      "oneOf.8.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.8.allOf.1.definitions.baseUrl" = String,
      "oneOf.8.allOf.1.definitions.courierTemplates" =
        {
            invalid
              | {
                email
                  | refs."oneOf.8.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
              }
              | optional,
            valid
              | {
                email
                  | refs."oneOf.8.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
              }
              | optional,
          },
      "oneOf.8.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.8.allOf.1.definitions.emailCourierTemplate" =
        {
            body
              | {
                html
                  | String
                  | doc "The default template used for sending out emails. The template can contain HTML "
                  | optional,
                plaintext
                  | String
                  | doc "The fallback template for email clients that do not support html."
                  | optional,
              }
              | optional,
            subject | String | optional,
          },
      "oneOf.8.allOf.1.definitions.featureRequiredAal" =
        std.contract.Sequence
            [ std.enum.TagOrString, [| 'highest_available, 'aal1 |] ],
      "oneOf.8.allOf.1.definitions.selfServiceAfterDefaultLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.8.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.8.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.8.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.8.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.8.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.8.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.8.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.8.allOf.1.definitions.selfServiceAfterOIDCLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.8.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.8.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.8.allOf.1.definitions.selfServiceAfterOIDCLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.8.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.8.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.8.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.8.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.8.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.8.allOf.1.definitions.selfServiceAfterRecoveryHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.8.allOf.1.definitions.selfServiceAfterRecoveryHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.8.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.8.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ]
                  ]
              )
            ],
      "oneOf.8.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.8.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.8.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.8.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.8.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.8.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.8.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.8.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.8.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.8.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.8.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.8.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.8.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.8.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.8.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.8.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.8.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.8.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.8.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.8.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.8.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.8.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.8.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.8.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.8.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.8.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.8.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.8.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "microsoft_tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { microsoft_tenant = js2n.Always, },
                          required = { microsoft_tenant = true, },
                        },
                      Array Dyn
                    ])),
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "apple", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required
                          [
                            "apple_private_key",
                            "apple_private_key_id",
                            "apple_team_id"
                          ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { client_secret = js2n.string.MinLength 1, },
                              required = { client_secret = true, },
                            },
                          Array Dyn
                        ])
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required [ "client_secret" ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { apple_team_id = js2n.string.MinLength 1, },
                              required = { apple_team_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key_id =
                                      js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key = js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key = true, },
                            },
                          Array Dyn
                        ])
                  ]),
              {
                apple_private_key
                  | String
                  | doc "Sign In with Apple Private Key needed for generating a JWT token for client secret"
                  | optional,
                apple_private_key_id
                  | String
                  | doc "Sign In with Apple Private Key Identifier needed for generating a JWT token for client secret"
                  | optional,
                apple_team_id
                  | String
                  | doc "Apple Developer Team ID needed for generating a JWT token for client secret"
                  | optional,
                auth_url | String | optional,
                client_id | String,
                client_secret | String | optional,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                microsoft_tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                provider
                  | std.enum.TagOrString
                  | [|
                    'netid,
                    'spotify,
                    'apple,
                    'yandex,
                    'vk,
                    'auth0,
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github-app,
                    'github
                  |]
                  | doc "Can be one of github, github-app, gitlab, generic, google, microsoft, discord, slack, facebook, auth0, vk, yandex, spotify.",
                requested_claims
                  | refs."oneOf.8.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                subject_source
                  | std.enum.TagOrString
                  | [| 'me, 'userinfo |]
                  | doc "Controls which source the subject identifier is taken from by microsoft provider. If set to `userinfo` (the default) then the identifier is taken from the `sub` field of OIDC ID token or data received from `/userinfo` standard OIDC endpoint. If set to `me` then the `id` field of data structure received from `https://graph.microsoft.com/v1.0/me` is taken as an identifier."
                  | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.8.allOf.1.definitions.selfServiceRequireVerifiedAddressHook" =
        { hook | std.contract.Equal "require_verified_address", },
      "oneOf.8.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.8.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.8.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.8.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.8.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          js2n.string.Matches "^(http|https|file|base64)://",
                          { _ | Dyn },
                          Array Dyn
                        ],
                      std.contract.not
                        (std.contract.any_of
                          [
                            js2n.Null,
                            Bool,
                            Number,
                            js2n.string.Matches "^(http|https|file|base64)://",
                            { _ | Dyn },
                            Array Dyn
                          ])
                    ]
                  | String
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                response
                  | {
                    ignore
                      | Bool
                      | doc "Ignore the response from the web hook. If enabled the request will be made asynchronously which can be useful if you only wish to notify another system but do not parse the response."
                      | optional,
                  }
                  | doc "How the web hook should handle the response"
                  | optional,
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.8.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.8.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.8.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.8.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.8.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.8.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.8.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
      "oneOf.9.allOf.1.definitions.OIDCClaims" =
        js2n.record.Record
            {
              additional = 'Some Dyn,
              patterns =
                {
                    "^userinfo$|^id_token$" =
                      std.contract.Sequence
                          [
                            {
                              _ | std.contract.any_of
                                [
                                  std.contract.Equal null,
                                  {
                                    essential
                                      | Bool
                                      | doc "Indicates whether the Claim being requested is an Essential Claim."
                                      | optional,
                                    value
                                      | std.contract.any_of
                                        [
                                          js2n.Null,
                                          Bool,
                                          Number,
                                          String,
                                          { _ | Dyn },
                                          Array Dyn
                                        ]
                                      | doc "Requests that the Claim be returned with a particular value."
                                      | optional,
                                    values
                                      | Array (
                                        std.contract.any_of
                                          [
                                            js2n.Null,
                                            Bool,
                                            Number,
                                            String,
                                            { _ | Dyn },
                                            Array Dyn
                                          ]
                                      )
                                      | doc "Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference."
                                      | optional,
                                  }
                                ]
                            },
                            js2n.record.FieldsMatch ".*"
                          ],
                  },
              properties = {},
              required = {},
            },
      "oneOf.9.allOf.1.definitions.baseUrl" = String,
      "oneOf.9.allOf.1.definitions.courierTemplates" =
        {
            invalid
              | {
                email
                  | refs."oneOf.9.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
              }
              | optional,
            valid
              | {
                email
                  | refs."oneOf.9.allOf.1.definitions.emailCourierTemplate"
                  | { _ | Dyn },
              }
              | optional,
          },
      "oneOf.9.allOf.1.definitions.defaultReturnTo" = String,
      "oneOf.9.allOf.1.definitions.emailCourierTemplate" =
        {
            body
              | {
                html
                  | String
                  | doc "The default template used for sending out emails. The template can contain HTML "
                  | optional,
                plaintext
                  | String
                  | doc "The fallback template for email clients that do not support html."
                  | optional,
              }
              | optional,
            subject | String | optional,
          },
      "oneOf.9.allOf.1.definitions.featureRequiredAal" =
        std.contract.Sequence
            [ std.enum.TagOrString, [| 'highest_available, 'aal1 |] ],
      "oneOf.9.allOf.1.definitions.selfServiceAfterDefaultLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.9.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.9.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.9.allOf.1.definitions.selfServiceRequireVerifiedAddressHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.9.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.9.allOf.1.definitions.selfServiceAfterLogin" =
        {
            default_browser_return_url
              | refs."oneOf.9.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.9.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.9.allOf.1.definitions.selfServiceAfterOIDCLoginMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.9.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.9.allOf.1.definitions.selfServiceAfterDefaultLoginMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.9.allOf.1.definitions.selfServiceAfterOIDCLoginMethod" =
        {
            default_browser_return_url
              | refs."oneOf.9.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.9.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.9.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.9.allOf.1.definitions.selfServiceAfterRecovery" =
        {
            default_browser_return_url
              | refs."oneOf.9.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.9.allOf.1.definitions.selfServiceAfterRecoveryHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.9.allOf.1.definitions.selfServiceAfterRecoveryHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.9.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.9.allOf.1.definitions.selfServiceSessionRevokerHook",
                        { _ | Dyn }
                      ]
                  ]
              )
            ],
      "oneOf.9.allOf.1.definitions.selfServiceAfterRegistration" =
        {
            default_browser_return_url
              | refs."oneOf.9.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.9.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            oidc
              | refs."oneOf.9.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            password
              | refs."oneOf.9.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
            webauthn
              | refs."oneOf.9.allOf.1.definitions.selfServiceAfterRegistrationMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.9.allOf.1.definitions.selfServiceAfterRegistrationMethod" =
        {
            default_browser_return_url
              | refs."oneOf.9.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.any_of
                  [
                    std.contract.Sequence
                      [
                        refs."oneOf.9.allOf.1.definitions.selfServiceSessionIssuerHook",
                        { _ | Dyn }
                      ],
                    std.contract.Sequence
                      [
                        refs."oneOf.9.allOf.1.definitions.selfServiceWebHook",
                        { _ | Dyn }
                      ]
                  ]
              )
              | optional,
          },
      "oneOf.9.allOf.1.definitions.selfServiceAfterSettings" =
        {
            default_browser_return_url
              | refs."oneOf.9.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.9.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
            password
              | refs."oneOf.9.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
            profile
              | refs."oneOf.9.allOf.1.definitions.selfServiceAfterSettingsMethod"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.9.allOf.1.definitions.selfServiceAfterSettingsMethod" =
        {
            default_browser_return_url
              | refs."oneOf.9.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    refs."oneOf.9.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
              | optional,
          },
      "oneOf.9.allOf.1.definitions.selfServiceAfterVerification" =
        {
            default_browser_return_url
              | refs."oneOf.9.allOf.1.definitions.defaultReturnTo"
              | String
              | optional,
            hooks
              | refs."oneOf.9.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.9.allOf.1.definitions.selfServiceBeforeLogin" =
        {
            hooks
              | refs."oneOf.9.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.9.allOf.1.definitions.selfServiceBeforeRegistration" =
        {
            hooks
              | refs."oneOf.9.allOf.1.definitions.selfServiceHooks"
              | Array Dyn
              | optional,
          },
      "oneOf.9.allOf.1.definitions.selfServiceHooks" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence
                  [
                    refs."oneOf.9.allOf.1.definitions.selfServiceWebHook",
                    { _ | Dyn }
                  ]
              )
            ],
      "oneOf.9.allOf.1.definitions.selfServiceOIDCProvider" =
        std.contract.Sequence
            [
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "microsoft", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Required [ "microsoft_tenant" ],
                    Array Dyn
                  ])
                (std.contract.not
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { microsoft_tenant = js2n.Always, },
                          required = { microsoft_tenant = true, },
                        },
                      Array Dyn
                    ])),
              js2n.IfThenElse
                (std.contract.any_of
                  [
                    js2n.Null,
                    Bool,
                    Number,
                    String,
                    js2n.record.Record
                      {
                        additional = 'Some Dyn,
                        patterns = {},
                        properties = { provider = js2n.Const "apple", },
                        required = { provider = true, },
                      },
                    Array Dyn
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required
                          [
                            "apple_private_key",
                            "apple_private_key_id",
                            "apple_team_id"
                          ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { client_secret = js2n.string.MinLength 1, },
                              required = { client_secret = true, },
                            },
                          Array Dyn
                        ])
                  ])
                (std.contract.Sequence
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Required [ "client_secret" ],
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                { apple_team_id = js2n.string.MinLength 1, },
                              required = { apple_team_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key_id =
                                      js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key_id = true, },
                            },
                          Array Dyn
                        ]),
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    apple_private_key = js2n.string.MinLength 1,
                                  },
                              required = { apple_private_key = true, },
                            },
                          Array Dyn
                        ])
                  ]),
              {
                apple_private_key
                  | String
                  | doc "Sign In with Apple Private Key needed for generating a JWT token for client secret"
                  | optional,
                apple_private_key_id
                  | String
                  | doc "Sign In with Apple Private Key Identifier needed for generating a JWT token for client secret"
                  | optional,
                apple_team_id
                  | String
                  | doc "Apple Developer Team ID needed for generating a JWT token for client secret"
                  | optional,
                auth_url | String | optional,
                client_id | String,
                client_secret | String | optional,
                id | String,
                issuer_url | String | optional,
                label | String | optional,
                mapper_url
                  | String
                  | doc "The URL where the jsonnet source is located for mapping the provider's data to Ory Kratos data.",
                microsoft_tenant
                  | String
                  | doc "The Azure AD Tenant to use for authentication."
                  | optional,
                provider
                  | std.enum.TagOrString
                  | [|
                    'spotify,
                    'apple,
                    'yandex,
                    'vk,
                    'auth0,
                    'facebook,
                    'slack,
                    'discord,
                    'microsoft,
                    'google,
                    'generic,
                    'gitlab,
                    'github-app,
                    'github
                  |]
                  | doc "Can be one of github, github-app, gitlab, generic, google, microsoft, discord, slack, facebook, auth0, vk, yandex, spotify.",
                requested_claims
                  | refs."oneOf.9.allOf.1.definitions.OIDCClaims"
                  | { _ | Dyn }
                  | optional,
                scope | Array String | optional,
                token_url | String | optional,
              }
            ],
      "oneOf.9.allOf.1.definitions.selfServiceRequireVerifiedAddressHook" =
        { hook | std.contract.Equal "require_verified_address", },
      "oneOf.9.allOf.1.definitions.selfServiceSessionIssuerHook" =
        { hook | std.contract.Equal "session", },
      "oneOf.9.allOf.1.definitions.selfServiceSessionRevokerHook" =
        { hook | std.contract.Equal "revoke_active_sessions", },
      "oneOf.9.allOf.1.definitions.selfServiceWebHook" =
        {
            config
              | {
                additionalProperties | js2n.Never | optional,
                auth
                  | js2n.OneOf
                    [
                      refs."oneOf.9.allOf.1.definitions.webHookAuthApiKeyProperties",
                      refs."oneOf.9.allOf.1.definitions.webHookAuthBasicAuthProperties"
                    ]
                  | { _ | Dyn }
                  | doc "Define which auth mechanism the Web-Hook should use"
                  | optional,
                body
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          js2n.string.Matches "^(http|https|file|base64)://",
                          { _ | Dyn },
                          Array Dyn
                        ],
                      std.contract.not
                        (std.contract.any_of
                          [
                            js2n.Null,
                            Bool,
                            Number,
                            js2n.string.Matches "^(http|https|file|base64)://",
                            { _ | Dyn },
                            Array Dyn
                          ])
                    ]
                  | String
                  | optional,
                method
                  | String
                  | doc "The HTTP method to use (GET, POST, etc).",
                response
                  | {
                    ignore
                      | Bool
                      | doc "Ignore the response from the web hook. If enabled the request will be made asynchronously which can be useful if you only wish to notify another system but do not parse the response."
                      | optional,
                  }
                  | doc "How the web hook should handle the response"
                  | optional,
                url | String | doc "The URL the Web-Hook should call",
              }
              | doc "Define what the hook should do",
            hook | std.contract.Equal "web_hook",
          },
      "oneOf.9.allOf.1.definitions.socket" =
        {
            group
              | String
              | doc "Group of unix socket. If empty, the group will be the primary group of the user running Kratos."
              | optional,
            mode
              | std.number.Integer
              | js2n.number.Maximum 511
              | js2n.number.Minimum 0
              | doc "Mode of unix socket in numeric form"
              | optional,
            owner
              | String
              | doc "Owner of unix socket. If empty, the owner will be the user running Kratos."
              | optional,
          },
      "oneOf.9.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.9.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.9.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.9.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.9.allOf.1.definitions.webHookAuthApiKeyProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    "in"
                      | std.enum.TagOrString
                      | [| 'cookie, 'header |]
                      | doc "How the api key should be transferred",
                    name | String | doc "The name of the api key",
                    value | String | doc "The value of the api key",
                  },
                type | std.contract.Equal "api_key",
              },
              Array Dyn
            ],
      "oneOf.9.allOf.1.definitions.webHookAuthBasicAuthProperties" =
        std.contract.any_of
            [
              js2n.Null,
              Bool,
              Number,
              String,
              {
                config
                  | {
                    password | String | doc "password for basic auth",
                    user | String | doc "user name for basic auth",
                  },
                type | std.contract.Equal "basic_auth",
              },
              Array Dyn
            ],
    }
    in
  std.contract.Sequence
      [
        js2n.OneOf
          [
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                ciphers =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  algorithm =
                                                    js2n.OneOf
                                                        [
                                                          js2n.Const "aes",
                                                          js2n.Const
                                                            "xchacha20-poly1305"
                                                        ],
                                                },
                                            required = { algorithm = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { ciphers = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                secrets =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Required [ "cipher" ],
                                        Array Dyn
                                      ],
                              },
                          required = { secrets = true, },
                        },
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v1.3.0", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          ciphers =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'xchacha20-poly1305,
                                                  'aes,
                                                  'noop
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          clients =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        http =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  {
                                                      disallow_private_ip_ranges =
                                                        Bool,
                                                      private_ip_exception_urls =
                                                        js2n.array.ArrayOf
                                                            String,
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          config = js2n.array.ArrayOf String,
                          cookies =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        domain = String,
                                        path = String,
                                        same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                      },
                                  required = {},
                                },
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        channels =
                                          js2n.array.ArrayOf
                                              (js2n.record.Record
                                                {
                                                  additional = 'None,
                                                  patterns = {},
                                                  properties =
                                                    {
                                                        id =
                                                          std.contract.Sequence
                                                              [
                                                                js2n.string.MaxLength
                                                                  32,
                                                                std.enum.TagOrString,
                                                                [| 'sms |]
                                                              ],
                                                        request_config =
                                                          refs."oneOf.0.allOf.1.definitions.httpRequestConfig",
                                                        type =
                                                          std.contract.Sequence
                                                              [
                                                                std.enum.TagOrString,
                                                                [| 'http |]
                                                              ],
                                                      },
                                                  required =
                                                    {
                                                        id = true,
                                                        request_config = true,
                                                      },
                                                }),
                                        delivery_strategy =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'http, 'smtp |]
                                              ],
                                        http =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      request_config =
                                                        refs."oneOf.0.allOf.1.definitions.httpRequestConfig",
                                                    },
                                                required = {},
                                              },
                                        message_retries = std.number.Integer,
                                        sms =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled = Bool,
                                                      from = String,
                                                      request_config =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    additionalProperties =
                                                                      js2n.Never,
                                                                    auth =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                refs."oneOf.0.allOf.1.definitions.webHookAuthApiKeyProperties",
                                                                                refs."oneOf.0.allOf.1.definitions.webHookAuthBasicAuthProperties"
                                                                              ],
                                                                            {
                                                                              _ | Dyn
                                                                            }
                                                                          ],
                                                                    body =
                                                                      js2n.string.Matches
                                                                          "^(http|https|file|base64)://",
                                                                    headers =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  String,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {},
                                                                            required =
                                                                              {},
                                                                          },
                                                                    method =
                                                                      String,
                                                                    url =
                                                                      js2n.string.Matches
                                                                          "^https?:\\/\\/.*",
                                                                  },
                                                              required =
                                                                {
                                                                    method =
                                                                      true,
                                                                    url = true,
                                                                  },
                                                            },
                                                    },
                                                required = {},
                                              },
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      client_cert_path = String,
                                                      client_key_path = String,
                                                      connection_uri =
                                                        js2n.string.Matches
                                                            "^smtps?:\\/\\/.*",
                                                      from_address = String,
                                                      from_name = String,
                                                      headers =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some String,
                                                              patterns = {},
                                                              properties = {},
                                                              required = {},
                                                            },
                                                      local_name = String,
                                                    },
                                                required = {},
                                              },
                                        template_override_path = String,
                                        templates =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      login_code =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    valid =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  email =
                                                                                    refs."oneOf.0.allOf.1.definitions.emailCourierTemplate",
                                                                                  sms =
                                                                                    refs."oneOf.0.allOf.1.definitions.smsCourierTemplate",
                                                                                },
                                                                            required =
                                                                              {
                                                                                  email =
                                                                                    true,
                                                                                },
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        refs."oneOf.0.allOf.1.definitions.courierTemplates",
                                                      recovery_code =
                                                        refs."oneOf.0.allOf.1.definitions.courierTemplates",
                                                      registration_code =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    valid =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  email =
                                                                                    refs."oneOf.0.allOf.1.definitions.emailCourierTemplate",
                                                                                },
                                                                            required =
                                                                              {
                                                                                  email =
                                                                                    true,
                                                                                },
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        refs."oneOf.0.allOf.1.definitions.courierTemplates",
                                                      verification_code =
                                                        refs."oneOf.0.allOf.1.definitions.courierTemplates",
                                                    },
                                                required = {},
                                              },
                                        worker =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  {
                                                      pull_count =
                                                        std.number.Integer,
                                                      pull_wait =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          database =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cleanup =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  {
                                                      batch_size =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      older_than =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      sleep =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    tables =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          dev = Bool,
                          dsn = String,
                          enterprise =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        identity_schema_fallback_url_template =
                                          String,
                                      },
                                  required = {},
                                },
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          feature_flags =
                            std.contract.any_of
                                [
                                  js2n.Null,
                                  Bool,
                                  Number,
                                  String,
                                  js2n.record.Record
                                    {
                                      additional = 'None,
                                      patterns = {},
                                      properties =
                                        {
                                            cacheable_sessions = Bool,
                                            cacheable_sessions_max_age =
                                              js2n.string.Matches
                                                  "^([0-9]+(ns|us|ms|s|m|h))+$",
                                            faster_session_extend = Bool,
                                            use_continue_with_transitions =
                                              Bool,
                                          },
                                      required = {},
                                    },
                                  Array Dyn
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_id = String,
                                        schemas =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    })
                                              ],
                                      },
                                  required = { schemas = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                        redaction_text = String,
                                      },
                                  required = {},
                                },
                          oauth2_provider =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        headers =
                                          js2n.record.Record
                                              {
                                                additional = 'Some String,
                                                patterns = {},
                                                properties = {},
                                                required = {},
                                              },
                                        override_return_to = Bool,
                                        url = String,
                                      },
                                  required = {},
                                },
                          organizations = Array Dyn,
                          preview =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        default_read_consistency_level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'eventual, 'strong |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cipher =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (std.contract.Sequence
                                                    [
                                                      js2n.string.MaxLength 32,
                                                      js2n.string.MinLength 32
                                                    ])
                                              ],
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          security =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        account_enumeration =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  { mitigate = Bool, },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allowed_return_urls =
                                          js2n.array.ArrayOf String,
                                        default_browser_return_url =
                                          refs."oneOf.0.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.0.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.0.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    style =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.enum.TagOrString,
                                                                            [|
                                                                              'identifier_first,
                                                                              'unified
                                                                            |]
                                                                          ],
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.0.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.0.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    before =
                                                                      refs."oneOf.0.allOf.1.definitions.selfServiceBeforeRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    notify_unknown_recipients =
                                                                      Bool,
                                                                    ui_url =
                                                                      String,
                                                                    use =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.enum.TagOrString,
                                                                            [|
                                                                              'code,
                                                                              'link
                                                                            |]
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.0.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.0.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    enable_legacy_one_step =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    login_hints =
                                                                      Bool,
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.0.allOf.1.definitions.selfServiceAfterSettings",
                                                                    before =
                                                                      refs."oneOf.0.allOf.1.definitions.selfServiceBeforeSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    required_aal =
                                                                      refs."oneOf.0.allOf.1.definitions.featureRequiredAal",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.0.allOf.1.definitions.selfServiceAfterVerification",
                                                                    before =
                                                                      refs."oneOf.0.allOf.1.definitions.selfServiceBeforeVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    notify_unknown_recipients =
                                                                      Bool,
                                                                    ui_url =
                                                                      String,
                                                                    use =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.enum.TagOrString,
                                                                            [|
                                                                              'code,
                                                                              'link
                                                                            |]
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      b2b =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  organizations =
                                                                                    js2n.array.ArrayOf
                                                                                        (js2n.record.Record
                                                                                          {
                                                                                            additional =
                                                                                              'Some
                                                                                                  Dyn,
                                                                                            patterns =
                                                                                              {},
                                                                                            properties =
                                                                                              {
                                                                                                  domains =
                                                                                                    js2n.array.ArrayOf
                                                                                                        String,
                                                                                                  id =
                                                                                                    String,
                                                                                                  label =
                                                                                                    String,
                                                                                                },
                                                                                            required =
                                                                                              {},
                                                                                          }),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      code =
                                                        std.contract.Sequence
                                                            [
                                                              std.contract.any_of
                                                                [
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            mfa_enabled =
                                                                              js2n.Const
                                                                                  false,
                                                                            passwordless_enabled =
                                                                              js2n.Const
                                                                                  true,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            mfa_enabled =
                                                                              js2n.Const
                                                                                  true,
                                                                            passwordless_enabled =
                                                                              js2n.Const
                                                                                  false,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            mfa_enabled =
                                                                              js2n.Const
                                                                                  false,
                                                                            passwordless_enabled =
                                                                              js2n.Const
                                                                                  false,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    }
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some
                                                                        js2n.Always,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        config =
                                                                          js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      lifespan =
                                                                                        js2n.string.Matches
                                                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                      missing_credential_fallback_enabled =
                                                                                        Bool,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              },
                                                                        enabled =
                                                                          Bool,
                                                                        mfa_enabled =
                                                                          Bool,
                                                                        passwordless_enabled =
                                                                          Bool,
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_url =
                                                                                    String,
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      lookup_secret =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_redirect_uri =
                                                                                    String,
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.0.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      passkey =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.IfThenElse
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Record
                                                                      {
                                                                        additional =
                                                                          'Some
                                                                              Dyn,
                                                                        patterns =
                                                                          {},
                                                                        properties =
                                                                          {
                                                                              enabled =
                                                                                js2n.Const
                                                                                    true,
                                                                            },
                                                                        required =
                                                                          {
                                                                              enabled =
                                                                                true,
                                                                            },
                                                                      },
                                                                    Array Dyn
                                                                  ])
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Required
                                                                      [
                                                                        "config"
                                                                      ],
                                                                    Array Dyn
                                                                  ])
                                                                js2n.Always,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        config =
                                                                          js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      rp =
                                                                                        js2n.record.Record
                                                                                            {
                                                                                              additional =
                                                                                                'Some
                                                                                                    Dyn,
                                                                                              patterns =
                                                                                                {},
                                                                                              properties =
                                                                                                {
                                                                                                    display_name =
                                                                                                      String,
                                                                                                    id =
                                                                                                      String,
                                                                                                    origins =
                                                                                                      js2n.array.ArrayOf
                                                                                                          String,
                                                                                                  },
                                                                                              required =
                                                                                                {
                                                                                                    display_name =
                                                                                                      true,
                                                                                                    id =
                                                                                                      true,
                                                                                                  },
                                                                                            },
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              },
                                                                        enabled =
                                                                          Bool,
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_enabled =
                                                                                    Bool,
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  identifier_similarity_check_enabled =
                                                                                    Bool,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                  migrate_hook =
                                                                                    js2n.record.Record
                                                                                        {
                                                                                          additional =
                                                                                            'None,
                                                                                          patterns =
                                                                                            {},
                                                                                          properties =
                                                                                            {
                                                                                                config =
                                                                                                  js2n.record.Record
                                                                                                      {
                                                                                                        additional =
                                                                                                          'None,
                                                                                                        patterns =
                                                                                                          {},
                                                                                                        properties =
                                                                                                          {
                                                                                                              additionalProperties =
                                                                                                                js2n.Never,
                                                                                                              auth =
                                                                                                                std.contract.Sequence
                                                                                                                    [
                                                                                                                      js2n.OneOf
                                                                                                                        [
                                                                                                                          refs."oneOf.0.allOf.1.definitions.webHookAuthApiKeyProperties",
                                                                                                                          refs."oneOf.0.allOf.1.definitions.webHookAuthBasicAuthProperties"
                                                                                                                        ],
                                                                                                                      {
                                                                                                                        _ | Dyn
                                                                                                                      }
                                                                                                                    ],
                                                                                                              emit_analytics_event =
                                                                                                                Bool,
                                                                                                              headers =
                                                                                                                js2n.record.Record
                                                                                                                    {
                                                                                                                      additional =
                                                                                                                        'Some
                                                                                                                            String,
                                                                                                                      patterns =
                                                                                                                        {},
                                                                                                                      properties =
                                                                                                                        {},
                                                                                                                      required =
                                                                                                                        {},
                                                                                                                    },
                                                                                                              method =
                                                                                                                js2n.Const
                                                                                                                    "POST",
                                                                                                              url =
                                                                                                                String,
                                                                                                            },
                                                                                                        required =
                                                                                                          {},
                                                                                                      },
                                                                                                enabled =
                                                                                                  Bool,
                                                                                              },
                                                                                          required =
                                                                                            {},
                                                                                        },
                                                                                  min_password_length =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Minimum
                                                                                            6
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      totp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  issuer =
                                                                                    String,
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      webauthn =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.IfThenElse
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Record
                                                                      {
                                                                        additional =
                                                                          'Some
                                                                              Dyn,
                                                                        patterns =
                                                                          {},
                                                                        properties =
                                                                          {
                                                                              enabled =
                                                                                js2n.Const
                                                                                    true,
                                                                            },
                                                                        required =
                                                                          {
                                                                              enabled =
                                                                                true,
                                                                            },
                                                                      },
                                                                    Array Dyn
                                                                  ])
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Required
                                                                      [
                                                                        "config"
                                                                      ],
                                                                    Array Dyn
                                                                  ])
                                                                js2n.Always,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        config =
                                                                          js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      passwordless =
                                                                                        Bool,
                                                                                      rp =
                                                                                        std.contract.Sequence
                                                                                            [
                                                                                              js2n.OneOf
                                                                                                [
                                                                                                  std.contract.any_of
                                                                                                    [
                                                                                                      js2n.Null,
                                                                                                      Bool,
                                                                                                      Number,
                                                                                                      String,
                                                                                                      std.contract.Sequence
                                                                                                        [
                                                                                                          js2n.record.Record
                                                                                                            {
                                                                                                              additional =
                                                                                                                'Some
                                                                                                                    Dyn,
                                                                                                              patterns =
                                                                                                                {},
                                                                                                              properties =
                                                                                                                {
                                                                                                                    origin =
                                                                                                                      std.contract.not
                                                                                                                          js2n.Always,
                                                                                                                    origins =
                                                                                                                      std.contract.not
                                                                                                                          js2n.Always,
                                                                                                                  },
                                                                                                              required =
                                                                                                                {},
                                                                                                            },
                                                                                                          js2n.record.Required
                                                                                                            [
                                                                                                              "display_name",
                                                                                                              "id"
                                                                                                            ]
                                                                                                        ],
                                                                                                      Array
                                                                                                        Dyn
                                                                                                    ],
                                                                                                  std.contract.any_of
                                                                                                    [
                                                                                                      js2n.Null,
                                                                                                      Bool,
                                                                                                      Number,
                                                                                                      String,
                                                                                                      std.contract.Sequence
                                                                                                        [
                                                                                                          js2n.record.Record
                                                                                                            {
                                                                                                              additional =
                                                                                                                'Some
                                                                                                                    Dyn,
                                                                                                              patterns =
                                                                                                                {},
                                                                                                              properties =
                                                                                                                {
                                                                                                                    origin =
                                                                                                                      String,
                                                                                                                    origins =
                                                                                                                      std.contract.not
                                                                                                                          js2n.Always,
                                                                                                                  },
                                                                                                              required =
                                                                                                                {
                                                                                                                    origin =
                                                                                                                      true,
                                                                                                                  },
                                                                                                            },
                                                                                                          js2n.record.Required
                                                                                                            [
                                                                                                              "display_name",
                                                                                                              "id"
                                                                                                            ]
                                                                                                        ],
                                                                                                      Array
                                                                                                        Dyn
                                                                                                    ],
                                                                                                  std.contract.any_of
                                                                                                    [
                                                                                                      js2n.Null,
                                                                                                      Bool,
                                                                                                      Number,
                                                                                                      String,
                                                                                                      std.contract.Sequence
                                                                                                        [
                                                                                                          js2n.record.Record
                                                                                                            {
                                                                                                              additional =
                                                                                                                'Some
                                                                                                                    Dyn,
                                                                                                              patterns =
                                                                                                                {},
                                                                                                              properties =
                                                                                                                {
                                                                                                                    origin =
                                                                                                                      std.contract.not
                                                                                                                          js2n.Always,
                                                                                                                    origins =
                                                                                                                      js2n.array.ArrayOf
                                                                                                                          String,
                                                                                                                  },
                                                                                                              required =
                                                                                                                {
                                                                                                                    origins =
                                                                                                                      true,
                                                                                                                  },
                                                                                                            },
                                                                                                          js2n.record.Required
                                                                                                            [
                                                                                                              "display_name",
                                                                                                              "id"
                                                                                                            ]
                                                                                                        ],
                                                                                                      Array
                                                                                                        Dyn
                                                                                                    ]
                                                                                                ],
                                                                                              js2n.record.Record
                                                                                                {
                                                                                                  additional =
                                                                                                    'Some
                                                                                                        Dyn,
                                                                                                  patterns =
                                                                                                    {},
                                                                                                  properties =
                                                                                                    {
                                                                                                        display_name =
                                                                                                          String,
                                                                                                        icon =
                                                                                                          String,
                                                                                                        id =
                                                                                                          String,
                                                                                                        origin =
                                                                                                          String,
                                                                                                        origins =
                                                                                                          js2n.array.ArrayOf
                                                                                                              String,
                                                                                                      },
                                                                                                  required =
                                                                                                    {},
                                                                                                }
                                                                                            ],
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              },
                                                                        enabled =
                                                                          Bool,
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.0.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.0.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.0.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.0.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.0.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        earliest_possible_extend =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        lifespan =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        whoami =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      required_aal =
                                                        refs."oneOf.0.allOf.1.definitions.featureRequiredAal",
                                                      tokenizer =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    templates =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {
                                                                                  "[a-zA-Z0-9-_.]+" =
                                                                                    js2n.record.Record
                                                                                        {
                                                                                          additional =
                                                                                            'Some
                                                                                                Dyn,
                                                                                          patterns =
                                                                                            {},
                                                                                          properties =
                                                                                            {
                                                                                                claims_mapper_url =
                                                                                                  String,
                                                                                                jwks_url =
                                                                                                  String,
                                                                                                ttl =
                                                                                                  js2n.string.Matches
                                                                                                      "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                              },
                                                                                          required =
                                                                                            {
                                                                                                jwks_url =
                                                                                                  true,
                                                                                              },
                                                                                        },
                                                                                },
                                                                            properties =
                                                                              {},
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        deployment_environment = String,
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'zipkin, 'otel, 'jaeger |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.string.Matches
                                                                              "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                                                          ],
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'trace_id_ratio,
                                                                                    'server_url
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                      trace_id_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      otlp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    authorization_header =
                                                                      String,
                                                                    insecure =
                                                                      Bool,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'sampling_ratio
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      sampling_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                    server_url =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.string.Matches
                                                                              "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'sampling_ratio
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      sampling_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^(v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)|$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                ciphers =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  algorithm =
                                                    js2n.OneOf
                                                        [
                                                          js2n.Const "aes",
                                                          js2n.Const
                                                            "xchacha20-poly1305"
                                                        ],
                                                },
                                            required = { algorithm = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { ciphers = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                secrets =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Required [ "cipher" ],
                                        Array Dyn
                                      ],
                              },
                          required = { secrets = true, },
                        },
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v1.2.0", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          ciphers =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'xchacha20-poly1305,
                                                  'aes,
                                                  'noop
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          clients =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        http =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  {
                                                      disallow_private_ip_ranges =
                                                        Bool,
                                                      private_ip_exception_urls =
                                                        js2n.array.ArrayOf
                                                            String,
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          config = js2n.array.ArrayOf String,
                          cookies =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        domain = String,
                                        path = String,
                                        same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                      },
                                  required = {},
                                },
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        channels =
                                          js2n.array.ArrayOf
                                              (js2n.record.Record
                                                {
                                                  additional = 'None,
                                                  patterns = {},
                                                  properties =
                                                    {
                                                        id =
                                                          std.contract.Sequence
                                                              [
                                                                js2n.string.MaxLength
                                                                  32,
                                                                std.enum.TagOrString,
                                                                [| 'sms |]
                                                              ],
                                                        request_config =
                                                          refs."oneOf.1.allOf.1.definitions.httpRequestConfig",
                                                        type =
                                                          std.contract.Sequence
                                                              [
                                                                std.enum.TagOrString,
                                                                [| 'http |]
                                                              ],
                                                      },
                                                  required =
                                                    {
                                                        id = true,
                                                        request_config = true,
                                                      },
                                                }),
                                        delivery_strategy =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'http, 'smtp |]
                                              ],
                                        http =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      request_config =
                                                        refs."oneOf.1.allOf.1.definitions.httpRequestConfig",
                                                    },
                                                required = {},
                                              },
                                        message_retries = std.number.Integer,
                                        sms =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled = Bool,
                                                      from = String,
                                                      request_config =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    additionalProperties =
                                                                      js2n.Never,
                                                                    auth =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                refs."oneOf.1.allOf.1.definitions.webHookAuthApiKeyProperties",
                                                                                refs."oneOf.1.allOf.1.definitions.webHookAuthBasicAuthProperties"
                                                                              ],
                                                                            {
                                                                              _ | Dyn
                                                                            }
                                                                          ],
                                                                    body =
                                                                      js2n.string.Matches
                                                                          "^(http|https|file|base64)://",
                                                                    headers =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  String,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {},
                                                                            required =
                                                                              {},
                                                                          },
                                                                    method =
                                                                      String,
                                                                    url =
                                                                      js2n.string.Matches
                                                                          "^https?:\\/\\/.*",
                                                                  },
                                                              required =
                                                                {
                                                                    method =
                                                                      true,
                                                                    url = true,
                                                                  },
                                                            },
                                                    },
                                                required = {},
                                              },
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      client_cert_path = String,
                                                      client_key_path = String,
                                                      connection_uri =
                                                        js2n.string.Matches
                                                            "^smtps?:\\/\\/.*",
                                                      from_address = String,
                                                      from_name = String,
                                                      headers =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some String,
                                                              patterns = {},
                                                              properties = {},
                                                              required = {},
                                                            },
                                                      local_name = String,
                                                    },
                                                required = {},
                                              },
                                        template_override_path = String,
                                        templates =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      login_code =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    valid =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  email =
                                                                                    refs."oneOf.1.allOf.1.definitions.emailCourierTemplate",
                                                                                  sms =
                                                                                    refs."oneOf.1.allOf.1.definitions.smsCourierTemplate",
                                                                                },
                                                                            required =
                                                                              {
                                                                                  email =
                                                                                    true,
                                                                                },
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        refs."oneOf.1.allOf.1.definitions.courierTemplates",
                                                      recovery_code =
                                                        refs."oneOf.1.allOf.1.definitions.courierTemplates",
                                                      registration_code =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    valid =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  email =
                                                                                    refs."oneOf.1.allOf.1.definitions.emailCourierTemplate",
                                                                                },
                                                                            required =
                                                                              {
                                                                                  email =
                                                                                    true,
                                                                                },
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        refs."oneOf.1.allOf.1.definitions.courierTemplates",
                                                      verification_code =
                                                        refs."oneOf.1.allOf.1.definitions.courierTemplates",
                                                    },
                                                required = {},
                                              },
                                        worker =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  {
                                                      pull_count =
                                                        std.number.Integer,
                                                      pull_wait =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          database =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cleanup =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  {
                                                      batch_size =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      older_than =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      sleep =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    tables =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          dev = Bool,
                          dsn = String,
                          enterprise =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        identity_schema_fallback_url_template =
                                          String,
                                      },
                                  required = {},
                                },
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          feature_flags =
                            std.contract.any_of
                                [
                                  js2n.Null,
                                  Bool,
                                  Number,
                                  String,
                                  js2n.record.Record
                                    {
                                      additional = 'None,
                                      patterns = {},
                                      properties =
                                        {
                                            cacheable_sessions = Bool,
                                            cacheable_sessions_max_age =
                                              js2n.string.Matches
                                                  "^([0-9]+(ns|us|ms|s|m|h))+$",
                                            use_continue_with_transitions =
                                              Bool,
                                          },
                                      required = {},
                                    },
                                  Array Dyn
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_id = String,
                                        schemas =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    })
                                              ],
                                      },
                                  required = { schemas = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                        redaction_text = String,
                                      },
                                  required = {},
                                },
                          oauth2_provider =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        headers =
                                          js2n.record.Record
                                              {
                                                additional = 'Some String,
                                                patterns = {},
                                                properties = {},
                                                required = {},
                                              },
                                        override_return_to = Bool,
                                        url = String,
                                      },
                                  required = {},
                                },
                          organizations = Array Dyn,
                          preview =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        default_read_consistency_level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'eventual, 'strong |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cipher =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (std.contract.Sequence
                                                    [
                                                      js2n.string.MaxLength 32,
                                                      js2n.string.MinLength 32
                                                    ])
                                              ],
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allowed_return_urls =
                                          js2n.array.ArrayOf String,
                                        default_browser_return_url =
                                          refs."oneOf.1.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.1.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.1.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.1.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.1.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    before =
                                                                      refs."oneOf.1.allOf.1.definitions.selfServiceBeforeRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    notify_unknown_recipients =
                                                                      Bool,
                                                                    ui_url =
                                                                      String,
                                                                    use =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.enum.TagOrString,
                                                                            [|
                                                                              'code,
                                                                              'link
                                                                            |]
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.1.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.1.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    enable_legacy_one_step =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    login_hints =
                                                                      Bool,
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.1.allOf.1.definitions.selfServiceAfterSettings",
                                                                    before =
                                                                      refs."oneOf.1.allOf.1.definitions.selfServiceBeforeSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    required_aal =
                                                                      refs."oneOf.1.allOf.1.definitions.featureRequiredAal",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.1.allOf.1.definitions.selfServiceAfterVerification",
                                                                    before =
                                                                      refs."oneOf.1.allOf.1.definitions.selfServiceBeforeVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    notify_unknown_recipients =
                                                                      Bool,
                                                                    ui_url =
                                                                      String,
                                                                    use =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.enum.TagOrString,
                                                                            [|
                                                                              'code,
                                                                              'link
                                                                            |]
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      code =
                                                        std.contract.Sequence
                                                            [
                                                              std.contract.any_of
                                                                [
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            mfa_enabled =
                                                                              js2n.Const
                                                                                  false,
                                                                            passwordless_enabled =
                                                                              js2n.Const
                                                                                  true,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            mfa_enabled =
                                                                              js2n.Const
                                                                                  true,
                                                                            passwordless_enabled =
                                                                              js2n.Const
                                                                                  false,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            mfa_enabled =
                                                                              js2n.Const
                                                                                  false,
                                                                            passwordless_enabled =
                                                                              js2n.Const
                                                                                  false,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    }
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        config =
                                                                          js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      lifespan =
                                                                                        js2n.string.Matches
                                                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              },
                                                                        enabled =
                                                                          Bool,
                                                                        mfa_enabled =
                                                                          Bool,
                                                                        passwordless_enabled =
                                                                          Bool,
                                                                        passwordless_login_fallback_enabled =
                                                                          Bool,
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_url =
                                                                                    String,
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      lookup_secret =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_redirect_uri =
                                                                                    String,
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.1.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      passkey =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.IfThenElse
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Record
                                                                      {
                                                                        additional =
                                                                          'Some
                                                                              Dyn,
                                                                        patterns =
                                                                          {},
                                                                        properties =
                                                                          {
                                                                              enabled =
                                                                                js2n.Const
                                                                                    true,
                                                                            },
                                                                        required =
                                                                          {
                                                                              enabled =
                                                                                true,
                                                                            },
                                                                      },
                                                                    Array Dyn
                                                                  ])
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Required
                                                                      [
                                                                        "config"
                                                                      ],
                                                                    Array Dyn
                                                                  ])
                                                                js2n.Always,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        config =
                                                                          js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      rp =
                                                                                        js2n.record.Record
                                                                                            {
                                                                                              additional =
                                                                                                'Some
                                                                                                    Dyn,
                                                                                              patterns =
                                                                                                {},
                                                                                              properties =
                                                                                                {
                                                                                                    display_name =
                                                                                                      String,
                                                                                                    id =
                                                                                                      String,
                                                                                                    origins =
                                                                                                      js2n.array.ArrayOf
                                                                                                          String,
                                                                                                  },
                                                                                              required =
                                                                                                {
                                                                                                    display_name =
                                                                                                      true,
                                                                                                    id =
                                                                                                      true,
                                                                                                  },
                                                                                            },
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              },
                                                                        enabled =
                                                                          Bool,
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_enabled =
                                                                                    Bool,
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  identifier_similarity_check_enabled =
                                                                                    Bool,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                  min_password_length =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Minimum
                                                                                            6
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      totp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  issuer =
                                                                                    String,
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      webauthn =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.IfThenElse
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Record
                                                                      {
                                                                        additional =
                                                                          'Some
                                                                              Dyn,
                                                                        patterns =
                                                                          {},
                                                                        properties =
                                                                          {
                                                                              enabled =
                                                                                js2n.Const
                                                                                    true,
                                                                            },
                                                                        required =
                                                                          {
                                                                              enabled =
                                                                                true,
                                                                            },
                                                                      },
                                                                    Array Dyn
                                                                  ])
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Required
                                                                      [
                                                                        "config"
                                                                      ],
                                                                    Array Dyn
                                                                  ])
                                                                js2n.Always,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        config =
                                                                          js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      passwordless =
                                                                                        Bool,
                                                                                      rp =
                                                                                        std.contract.Sequence
                                                                                            [
                                                                                              js2n.OneOf
                                                                                                [
                                                                                                  std.contract.any_of
                                                                                                    [
                                                                                                      js2n.Null,
                                                                                                      Bool,
                                                                                                      Number,
                                                                                                      String,
                                                                                                      std.contract.Sequence
                                                                                                        [
                                                                                                          js2n.record.Record
                                                                                                            {
                                                                                                              additional =
                                                                                                                'Some
                                                                                                                    Dyn,
                                                                                                              patterns =
                                                                                                                {},
                                                                                                              properties =
                                                                                                                {
                                                                                                                    origin =
                                                                                                                      std.contract.not
                                                                                                                          js2n.Always,
                                                                                                                    origins =
                                                                                                                      std.contract.not
                                                                                                                          js2n.Always,
                                                                                                                  },
                                                                                                              required =
                                                                                                                {},
                                                                                                            },
                                                                                                          js2n.record.Required
                                                                                                            [
                                                                                                              "display_name",
                                                                                                              "id"
                                                                                                            ]
                                                                                                        ],
                                                                                                      Array
                                                                                                        Dyn
                                                                                                    ],
                                                                                                  std.contract.any_of
                                                                                                    [
                                                                                                      js2n.Null,
                                                                                                      Bool,
                                                                                                      Number,
                                                                                                      String,
                                                                                                      std.contract.Sequence
                                                                                                        [
                                                                                                          js2n.record.Record
                                                                                                            {
                                                                                                              additional =
                                                                                                                'Some
                                                                                                                    Dyn,
                                                                                                              patterns =
                                                                                                                {},
                                                                                                              properties =
                                                                                                                {
                                                                                                                    origin =
                                                                                                                      String,
                                                                                                                    origins =
                                                                                                                      std.contract.not
                                                                                                                          js2n.Always,
                                                                                                                  },
                                                                                                              required =
                                                                                                                {
                                                                                                                    origin =
                                                                                                                      true,
                                                                                                                  },
                                                                                                            },
                                                                                                          js2n.record.Required
                                                                                                            [
                                                                                                              "display_name",
                                                                                                              "id"
                                                                                                            ]
                                                                                                        ],
                                                                                                      Array
                                                                                                        Dyn
                                                                                                    ],
                                                                                                  std.contract.any_of
                                                                                                    [
                                                                                                      js2n.Null,
                                                                                                      Bool,
                                                                                                      Number,
                                                                                                      String,
                                                                                                      std.contract.Sequence
                                                                                                        [
                                                                                                          js2n.record.Record
                                                                                                            {
                                                                                                              additional =
                                                                                                                'Some
                                                                                                                    Dyn,
                                                                                                              patterns =
                                                                                                                {},
                                                                                                              properties =
                                                                                                                {
                                                                                                                    origin =
                                                                                                                      std.contract.not
                                                                                                                          js2n.Always,
                                                                                                                    origins =
                                                                                                                      js2n.array.ArrayOf
                                                                                                                          String,
                                                                                                                  },
                                                                                                              required =
                                                                                                                {
                                                                                                                    origins =
                                                                                                                      true,
                                                                                                                  },
                                                                                                            },
                                                                                                          js2n.record.Required
                                                                                                            [
                                                                                                              "display_name",
                                                                                                              "id"
                                                                                                            ]
                                                                                                        ],
                                                                                                      Array
                                                                                                        Dyn
                                                                                                    ]
                                                                                                ],
                                                                                              js2n.record.Record
                                                                                                {
                                                                                                  additional =
                                                                                                    'Some
                                                                                                        Dyn,
                                                                                                  patterns =
                                                                                                    {},
                                                                                                  properties =
                                                                                                    {
                                                                                                        display_name =
                                                                                                          String,
                                                                                                        icon =
                                                                                                          String,
                                                                                                        id =
                                                                                                          String,
                                                                                                        origin =
                                                                                                          String,
                                                                                                        origins =
                                                                                                          js2n.array.ArrayOf
                                                                                                              String,
                                                                                                      },
                                                                                                  required =
                                                                                                    {},
                                                                                                }
                                                                                            ],
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              },
                                                                        enabled =
                                                                          Bool,
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.1.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.1.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.1.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.1.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.1.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        earliest_possible_extend =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        lifespan =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        whoami =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      required_aal =
                                                        refs."oneOf.1.allOf.1.definitions.featureRequiredAal",
                                                      tokenizer =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    templates =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {
                                                                                  "[a-zA-Z0-9-_.]+" =
                                                                                    js2n.record.Record
                                                                                        {
                                                                                          additional =
                                                                                            'Some
                                                                                                Dyn,
                                                                                          patterns =
                                                                                            {},
                                                                                          properties =
                                                                                            {
                                                                                                claims_mapper_url =
                                                                                                  String,
                                                                                                jwks_url =
                                                                                                  String,
                                                                                                ttl =
                                                                                                  js2n.string.Matches
                                                                                                      "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                              },
                                                                                          required =
                                                                                            {
                                                                                                jwks_url =
                                                                                                  true,
                                                                                              },
                                                                                        },
                                                                                },
                                                                            properties =
                                                                              {},
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        deployment_environment = String,
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'zipkin, 'otel, 'jaeger |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.string.Matches
                                                                              "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                                                          ],
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'trace_id_ratio,
                                                                                    'server_url
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                      trace_id_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      otlp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    authorization_header =
                                                                      String,
                                                                    insecure =
                                                                      Bool,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'sampling_ratio
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      sampling_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                    server_url =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.string.Matches
                                                                              "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'sampling_ratio
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      sampling_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^(v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)|$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                ciphers =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  algorithm =
                                                    js2n.OneOf
                                                        [
                                                          js2n.Const "aes",
                                                          js2n.Const
                                                            "xchacha20-poly1305"
                                                        ],
                                                },
                                            required = { algorithm = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { ciphers = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                secrets =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Required [ "cipher" ],
                                        Array Dyn
                                      ],
                              },
                          required = { secrets = true, },
                        },
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v1.1.0", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          ciphers =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'xchacha20-poly1305,
                                                  'aes,
                                                  'noop
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          clients =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        http =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  {
                                                      disallow_private_ip_ranges =
                                                        Bool,
                                                      private_ip_exception_urls =
                                                        js2n.array.ArrayOf
                                                            String,
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          config = js2n.array.ArrayOf String,
                          cookies =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        domain = String,
                                        path = String,
                                        same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                      },
                                  required = {},
                                },
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        channels =
                                          js2n.array.ArrayOf
                                              (js2n.record.Record
                                                {
                                                  additional = 'None,
                                                  patterns = {},
                                                  properties =
                                                    {
                                                        id =
                                                          std.contract.Sequence
                                                              [
                                                                js2n.string.MaxLength
                                                                  32,
                                                                std.enum.TagOrString,
                                                                [| 'sms |]
                                                              ],
                                                        request_config =
                                                          refs."oneOf.2.allOf.1.definitions.httpRequestConfig",
                                                        type =
                                                          std.contract.Sequence
                                                              [
                                                                std.enum.TagOrString,
                                                                [| 'http |]
                                                              ],
                                                      },
                                                  required =
                                                    {
                                                        id = true,
                                                        request_config = true,
                                                      },
                                                }),
                                        delivery_strategy =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'http, 'smtp |]
                                              ],
                                        http =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      request_config =
                                                        refs."oneOf.2.allOf.1.definitions.httpRequestConfig",
                                                    },
                                                required = {},
                                              },
                                        message_retries = std.number.Integer,
                                        sms =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled = Bool,
                                                      from = String,
                                                      request_config =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    additionalProperties =
                                                                      js2n.Never,
                                                                    auth =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                refs."oneOf.2.allOf.1.definitions.webHookAuthApiKeyProperties",
                                                                                refs."oneOf.2.allOf.1.definitions.webHookAuthBasicAuthProperties"
                                                                              ],
                                                                            {
                                                                              _ | Dyn
                                                                            }
                                                                          ],
                                                                    body =
                                                                      js2n.string.Matches
                                                                          "^(http|https|file|base64)://",
                                                                    headers =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  String,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {},
                                                                            required =
                                                                              {},
                                                                          },
                                                                    method =
                                                                      String,
                                                                    url =
                                                                      js2n.string.Matches
                                                                          "^https?:\\/\\/.*",
                                                                  },
                                                              required =
                                                                {
                                                                    method =
                                                                      true,
                                                                    url = true,
                                                                  },
                                                            },
                                                    },
                                                required = {},
                                              },
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      client_cert_path = String,
                                                      client_key_path = String,
                                                      connection_uri =
                                                        js2n.string.Matches
                                                            "^smtps?:\\/\\/.*",
                                                      from_address = String,
                                                      from_name = String,
                                                      headers =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some String,
                                                              patterns = {},
                                                              properties = {},
                                                              required = {},
                                                            },
                                                      local_name = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                        templates =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      login_code =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    valid =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  email =
                                                                                    refs."oneOf.2.allOf.1.definitions.emailCourierTemplate",
                                                                                  sms =
                                                                                    refs."oneOf.2.allOf.1.definitions.smsCourierTemplate",
                                                                                },
                                                                            required =
                                                                              {
                                                                                  email =
                                                                                    true,
                                                                                },
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        refs."oneOf.2.allOf.1.definitions.courierTemplates",
                                                      recovery_code =
                                                        refs."oneOf.2.allOf.1.definitions.courierTemplates",
                                                      registration_code =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    valid =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  email =
                                                                                    refs."oneOf.2.allOf.1.definitions.emailCourierTemplate",
                                                                                },
                                                                            required =
                                                                              {
                                                                                  email =
                                                                                    true,
                                                                                },
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        refs."oneOf.2.allOf.1.definitions.courierTemplates",
                                                      verification_code =
                                                        refs."oneOf.2.allOf.1.definitions.courierTemplates",
                                                    },
                                                required = {},
                                              },
                                        worker =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  {
                                                      pull_count =
                                                        std.number.Integer,
                                                      pull_wait =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          database =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cleanup =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  {
                                                      batch_size =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      older_than =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      sleep =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    tables =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          feature_flags =
                            std.contract.any_of
                                [
                                  js2n.Null,
                                  Bool,
                                  Number,
                                  String,
                                  js2n.record.Record
                                    {
                                      additional = 'None,
                                      patterns = {},
                                      properties =
                                        {
                                            cacheable_sessions = Bool,
                                            use_continue_with_transitions =
                                              Bool,
                                          },
                                      required = {},
                                    },
                                  Array Dyn
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_id = String,
                                        schemas =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    })
                                              ],
                                      },
                                  required = { schemas = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                        redaction_text = String,
                                      },
                                  required = {},
                                },
                          oauth2_provider =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        headers =
                                          js2n.record.Record
                                              {
                                                additional = 'Some String,
                                                patterns = {},
                                                properties = {},
                                                required = {},
                                              },
                                        override_return_to = Bool,
                                        url = String,
                                      },
                                  required = {},
                                },
                          organizations = Array Dyn,
                          preview =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        default_read_consistency_level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'eventual, 'strong |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cipher =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (std.contract.Sequence
                                                    [
                                                      js2n.string.MaxLength 32,
                                                      js2n.string.MinLength 32
                                                    ])
                                              ],
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allowed_return_urls =
                                          js2n.array.ArrayOf String,
                                        default_browser_return_url =
                                          refs."oneOf.2.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.2.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.2.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.2.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.2.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    before =
                                                                      refs."oneOf.2.allOf.1.definitions.selfServiceBeforeRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    notify_unknown_recipients =
                                                                      Bool,
                                                                    ui_url =
                                                                      String,
                                                                    use =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.enum.TagOrString,
                                                                            [|
                                                                              'code,
                                                                              'link
                                                                            |]
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.2.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.2.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    login_hints =
                                                                      Bool,
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.2.allOf.1.definitions.selfServiceAfterSettings",
                                                                    before =
                                                                      refs."oneOf.2.allOf.1.definitions.selfServiceBeforeSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    required_aal =
                                                                      refs."oneOf.2.allOf.1.definitions.featureRequiredAal",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.2.allOf.1.definitions.selfServiceAfterVerification",
                                                                    before =
                                                                      refs."oneOf.2.allOf.1.definitions.selfServiceBeforeVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    notify_unknown_recipients =
                                                                      Bool,
                                                                    ui_url =
                                                                      String,
                                                                    use =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.enum.TagOrString,
                                                                            [|
                                                                              'code,
                                                                              'link
                                                                            |]
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      code =
                                                        std.contract.Sequence
                                                            [
                                                              std.contract.any_of
                                                                [
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            mfa_enabled =
                                                                              js2n.Const
                                                                                  false,
                                                                            passwordless_enabled =
                                                                              js2n.Const
                                                                                  true,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            mfa_enabled =
                                                                              js2n.Const
                                                                                  true,
                                                                            passwordless_enabled =
                                                                              js2n.Const
                                                                                  false,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            mfa_enabled =
                                                                              js2n.Const
                                                                                  false,
                                                                            passwordless_enabled =
                                                                              js2n.Const
                                                                                  false,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    }
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        config =
                                                                          js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      lifespan =
                                                                                        js2n.string.Matches
                                                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              },
                                                                        enabled =
                                                                          Bool,
                                                                        mfa_enabled =
                                                                          Bool,
                                                                        passwordless_enabled =
                                                                          Bool,
                                                                        passwordless_login_fallback_enabled =
                                                                          Bool,
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_url =
                                                                                    String,
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      lookup_secret =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_redirect_uri =
                                                                                    String,
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.2.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_enabled =
                                                                                    Bool,
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  identifier_similarity_check_enabled =
                                                                                    Bool,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                  min_password_length =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Minimum
                                                                                            6
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      totp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  issuer =
                                                                                    String,
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      webauthn =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.IfThenElse
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Record
                                                                      {
                                                                        additional =
                                                                          'Some
                                                                              Dyn,
                                                                        patterns =
                                                                          {},
                                                                        properties =
                                                                          {
                                                                              enabled =
                                                                                js2n.Const
                                                                                    true,
                                                                            },
                                                                        required =
                                                                          {
                                                                              enabled =
                                                                                true,
                                                                            },
                                                                      },
                                                                    Array Dyn
                                                                  ])
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Required
                                                                      [
                                                                        "config"
                                                                      ],
                                                                    Array Dyn
                                                                  ])
                                                                js2n.Always,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        config =
                                                                          js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      passwordless =
                                                                                        Bool,
                                                                                      rp =
                                                                                        std.contract.Sequence
                                                                                            [
                                                                                              js2n.OneOf
                                                                                                [
                                                                                                  std.contract.any_of
                                                                                                    [
                                                                                                      js2n.Null,
                                                                                                      Bool,
                                                                                                      Number,
                                                                                                      String,
                                                                                                      std.contract.Sequence
                                                                                                        [
                                                                                                          js2n.record.Record
                                                                                                            {
                                                                                                              additional =
                                                                                                                'Some
                                                                                                                    Dyn,
                                                                                                              patterns =
                                                                                                                {},
                                                                                                              properties =
                                                                                                                {
                                                                                                                    origin =
                                                                                                                      std.contract.not
                                                                                                                          js2n.Always,
                                                                                                                    origins =
                                                                                                                      std.contract.not
                                                                                                                          js2n.Always,
                                                                                                                  },
                                                                                                              required =
                                                                                                                {},
                                                                                                            },
                                                                                                          js2n.record.Required
                                                                                                            [
                                                                                                              "display_name",
                                                                                                              "id"
                                                                                                            ]
                                                                                                        ],
                                                                                                      Array
                                                                                                        Dyn
                                                                                                    ],
                                                                                                  std.contract.any_of
                                                                                                    [
                                                                                                      js2n.Null,
                                                                                                      Bool,
                                                                                                      Number,
                                                                                                      String,
                                                                                                      std.contract.Sequence
                                                                                                        [
                                                                                                          js2n.record.Record
                                                                                                            {
                                                                                                              additional =
                                                                                                                'Some
                                                                                                                    Dyn,
                                                                                                              patterns =
                                                                                                                {},
                                                                                                              properties =
                                                                                                                {
                                                                                                                    origin =
                                                                                                                      String,
                                                                                                                    origins =
                                                                                                                      std.contract.not
                                                                                                                          js2n.Always,
                                                                                                                  },
                                                                                                              required =
                                                                                                                {
                                                                                                                    origin =
                                                                                                                      true,
                                                                                                                  },
                                                                                                            },
                                                                                                          js2n.record.Required
                                                                                                            [
                                                                                                              "display_name",
                                                                                                              "id"
                                                                                                            ]
                                                                                                        ],
                                                                                                      Array
                                                                                                        Dyn
                                                                                                    ],
                                                                                                  std.contract.any_of
                                                                                                    [
                                                                                                      js2n.Null,
                                                                                                      Bool,
                                                                                                      Number,
                                                                                                      String,
                                                                                                      std.contract.Sequence
                                                                                                        [
                                                                                                          js2n.record.Record
                                                                                                            {
                                                                                                              additional =
                                                                                                                'Some
                                                                                                                    Dyn,
                                                                                                              patterns =
                                                                                                                {},
                                                                                                              properties =
                                                                                                                {
                                                                                                                    origin =
                                                                                                                      std.contract.not
                                                                                                                          js2n.Always,
                                                                                                                    origins =
                                                                                                                      js2n.array.ArrayOf
                                                                                                                          String,
                                                                                                                  },
                                                                                                              required =
                                                                                                                {
                                                                                                                    origins =
                                                                                                                      true,
                                                                                                                  },
                                                                                                            },
                                                                                                          js2n.record.Required
                                                                                                            [
                                                                                                              "display_name",
                                                                                                              "id"
                                                                                                            ]
                                                                                                        ],
                                                                                                      Array
                                                                                                        Dyn
                                                                                                    ]
                                                                                                ],
                                                                                              js2n.record.Record
                                                                                                {
                                                                                                  additional =
                                                                                                    'Some
                                                                                                        Dyn,
                                                                                                  patterns =
                                                                                                    {},
                                                                                                  properties =
                                                                                                    {
                                                                                                        display_name =
                                                                                                          String,
                                                                                                        icon =
                                                                                                          String,
                                                                                                        id =
                                                                                                          String,
                                                                                                        origin =
                                                                                                          String,
                                                                                                        origins =
                                                                                                          js2n.array.ArrayOf
                                                                                                              String,
                                                                                                      },
                                                                                                  required =
                                                                                                    {},
                                                                                                }
                                                                                            ],
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              },
                                                                        enabled =
                                                                          Bool,
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.2.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.2.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.2.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.2.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.2.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        earliest_possible_extend =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        lifespan =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        whoami =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      required_aal =
                                                        refs."oneOf.2.allOf.1.definitions.featureRequiredAal",
                                                      tokenizer =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    templates =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {
                                                                                  "[a-zA-Z0-9-_.]+" =
                                                                                    js2n.record.Record
                                                                                        {
                                                                                          additional =
                                                                                            'Some
                                                                                                Dyn,
                                                                                          patterns =
                                                                                            {},
                                                                                          properties =
                                                                                            {
                                                                                                claims_mapper_url =
                                                                                                  String,
                                                                                                jwks_url =
                                                                                                  String,
                                                                                                ttl =
                                                                                                  js2n.string.Matches
                                                                                                      "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                              },
                                                                                          required =
                                                                                            {
                                                                                                jwks_url =
                                                                                                  true,
                                                                                              },
                                                                                        },
                                                                                },
                                                                            properties =
                                                                              {},
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        deployment_environment = String,
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'zipkin, 'otel, 'jaeger |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.string.Matches
                                                                              "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                                                          ],
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'trace_id_ratio,
                                                                                    'server_url
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                      trace_id_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      otlp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    authorization_header =
                                                                      String,
                                                                    insecure =
                                                                      Bool,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'sampling_ratio
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      sampling_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                    server_url =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.string.Matches
                                                                              "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'sampling_ratio
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      sampling_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^(v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)|$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                ciphers =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  algorithm =
                                                    js2n.OneOf
                                                        [
                                                          js2n.Const "aes",
                                                          js2n.Const
                                                            "xchacha20-poly1305"
                                                        ],
                                                },
                                            required = { algorithm = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { ciphers = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                secrets =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Required [ "cipher" ],
                                        Array Dyn
                                      ],
                              },
                          required = { secrets = true, },
                        },
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v1.0.0", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          ciphers =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'xchacha20-poly1305,
                                                  'aes,
                                                  'noop
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          clients =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        http =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  {
                                                      disallow_private_ip_ranges =
                                                        Bool,
                                                      private_ip_exception_urls =
                                                        js2n.array.ArrayOf
                                                            String,
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          config = js2n.array.ArrayOf String,
                          cookies =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        domain = String,
                                        path = String,
                                        same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                      },
                                  required = {},
                                },
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        delivery_strategy =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'http, 'smtp |]
                                              ],
                                        http =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      request_config =
                                                        refs."oneOf.3.allOf.1.definitions.httpRequestConfig",
                                                    },
                                                required = {},
                                              },
                                        message_retries = std.number.Integer,
                                        sms =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled = Bool,
                                                      from = String,
                                                      request_config =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    additionalProperties =
                                                                      js2n.Never,
                                                                    auth =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                refs."oneOf.3.allOf.1.definitions.webHookAuthApiKeyProperties",
                                                                                refs."oneOf.3.allOf.1.definitions.webHookAuthBasicAuthProperties"
                                                                              ],
                                                                            {
                                                                              _ | Dyn
                                                                            }
                                                                          ],
                                                                    body =
                                                                      js2n.string.Matches
                                                                          "^(http|https|file|base64)://",
                                                                    headers =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  String,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {},
                                                                            required =
                                                                              {},
                                                                          },
                                                                    method =
                                                                      String,
                                                                    url =
                                                                      js2n.string.Matches
                                                                          "^https?:\\/\\/.*",
                                                                  },
                                                              required =
                                                                {
                                                                    method =
                                                                      true,
                                                                    url = true,
                                                                  },
                                                            },
                                                    },
                                                required = {},
                                              },
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      client_cert_path = String,
                                                      client_key_path = String,
                                                      connection_uri =
                                                        js2n.string.Matches
                                                            "^smtps?:\\/\\/.*",
                                                      from_address = String,
                                                      from_name = String,
                                                      headers =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some String,
                                                              patterns = {},
                                                              properties = {},
                                                              required = {},
                                                            },
                                                      local_name = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                        templates =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      recovery =
                                                        refs."oneOf.3.allOf.1.definitions.courierTemplates",
                                                      recovery_code =
                                                        refs."oneOf.3.allOf.1.definitions.courierTemplates",
                                                      verification =
                                                        refs."oneOf.3.allOf.1.definitions.courierTemplates",
                                                      verification_code =
                                                        refs."oneOf.3.allOf.1.definitions.courierTemplates",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = { smtp = true, },
                                },
                          database =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cleanup =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  {
                                                      batch_size =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      older_than =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      sleep =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    tables =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          feature_flags =
                            std.contract.any_of
                                [
                                  js2n.Null,
                                  Bool,
                                  Number,
                                  String,
                                  js2n.record.Record
                                    {
                                      additional = 'None,
                                      patterns = {},
                                      properties =
                                        { cacheable_sessions = Bool, },
                                      required = {},
                                    },
                                  Array Dyn
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_id = String,
                                        schemas =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    })
                                              ],
                                      },
                                  required = { schemas = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                        redaction_text = String,
                                      },
                                  required = {},
                                },
                          oauth2_provider =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        headers =
                                          js2n.record.Record
                                              {
                                                additional = 'Some String,
                                                patterns = {},
                                                properties = {},
                                                required = {},
                                              },
                                        override_return_to = Bool,
                                        url = String,
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cipher =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (std.contract.Sequence
                                                    [
                                                      js2n.string.MaxLength 32,
                                                      js2n.string.MinLength 32
                                                    ])
                                              ],
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allowed_return_urls =
                                          js2n.array.ArrayOf String,
                                        default_browser_return_url =
                                          refs."oneOf.3.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.3.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.3.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.3.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.3.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    before =
                                                                      refs."oneOf.3.allOf.1.definitions.selfServiceBeforeRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    notify_unknown_recipients =
                                                                      Bool,
                                                                    ui_url =
                                                                      String,
                                                                    use =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.enum.TagOrString,
                                                                            [|
                                                                              'code,
                                                                              'link
                                                                            |]
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.3.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.3.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.3.allOf.1.definitions.selfServiceAfterSettings",
                                                                    before =
                                                                      refs."oneOf.3.allOf.1.definitions.selfServiceBeforeSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    required_aal =
                                                                      refs."oneOf.3.allOf.1.definitions.featureRequiredAal",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.3.allOf.1.definitions.selfServiceAfterVerification",
                                                                    before =
                                                                      refs."oneOf.3.allOf.1.definitions.selfServiceBeforeVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    notify_unknown_recipients =
                                                                      Bool,
                                                                    ui_url =
                                                                      String,
                                                                    use =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.enum.TagOrString,
                                                                            [|
                                                                              'code,
                                                                              'link
                                                                            |]
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      code =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_url =
                                                                                    String,
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      lookup_secret =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_redirect_uri =
                                                                                    String,
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.3.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_enabled =
                                                                                    Bool,
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  identifier_similarity_check_enabled =
                                                                                    Bool,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                  min_password_length =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Minimum
                                                                                            6
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      totp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  issuer =
                                                                                    String,
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      webauthn =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.IfThenElse
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Record
                                                                      {
                                                                        additional =
                                                                          'Some
                                                                              Dyn,
                                                                        patterns =
                                                                          {},
                                                                        properties =
                                                                          {
                                                                              enabled =
                                                                                js2n.Const
                                                                                    true,
                                                                            },
                                                                        required =
                                                                          {
                                                                              enabled =
                                                                                true,
                                                                            },
                                                                      },
                                                                    Array Dyn
                                                                  ])
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Required
                                                                      [
                                                                        "config"
                                                                      ],
                                                                    Array Dyn
                                                                  ])
                                                                js2n.Always,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        config =
                                                                          js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      passwordless =
                                                                                        Bool,
                                                                                      rp =
                                                                                        js2n.record.Record
                                                                                            {
                                                                                              additional =
                                                                                                'Some
                                                                                                    Dyn,
                                                                                              patterns =
                                                                                                {},
                                                                                              properties =
                                                                                                {
                                                                                                    display_name =
                                                                                                      String,
                                                                                                    icon =
                                                                                                      String,
                                                                                                    id =
                                                                                                      String,
                                                                                                    origin =
                                                                                                      String,
                                                                                                  },
                                                                                              required =
                                                                                                {
                                                                                                    display_name =
                                                                                                      true,
                                                                                                    id =
                                                                                                      true,
                                                                                                  },
                                                                                            },
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              },
                                                                        enabled =
                                                                          Bool,
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.3.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.3.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.3.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.3.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.3.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        earliest_possible_extend =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        lifespan =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        whoami =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      required_aal =
                                                        refs."oneOf.3.allOf.1.definitions.featureRequiredAal",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'zipkin, 'otel, 'jaeger |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.string.Matches
                                                                              "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                                                          ],
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'trace_id_ratio,
                                                                                    'server_url
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                      trace_id_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      otlp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    insecure =
                                                                      Bool,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'sampling_ratio
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      sampling_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                    server_url =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.string.Matches
                                                                              "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'sampling_ratio
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      sampling_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^(v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)|$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                ciphers =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  algorithm =
                                                    js2n.OneOf
                                                        [
                                                          js2n.Const "aes",
                                                          js2n.Const
                                                            "xchacha20-poly1305"
                                                        ],
                                                },
                                            required = { algorithm = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { ciphers = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                secrets =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Required [ "cipher" ],
                                        Array Dyn
                                      ],
                              },
                          required = { secrets = true, },
                        },
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.13.0", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          ciphers =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'xchacha20-poly1305,
                                                  'aes,
                                                  'noop
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          clients =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        http =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  {
                                                      disallow_private_ip_ranges =
                                                        Bool,
                                                      private_ip_exception_urls =
                                                        js2n.array.ArrayOf
                                                            String,
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          config = js2n.array.ArrayOf String,
                          cookies =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        domain = String,
                                        path = String,
                                        same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                      },
                                  required = {},
                                },
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        message_retries = std.number.Integer,
                                        sms =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled = Bool,
                                                      from = String,
                                                      request_config =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    additionalProperties =
                                                                      js2n.Never,
                                                                    auth =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                refs."oneOf.4.allOf.1.definitions.webHookAuthApiKeyProperties",
                                                                                refs."oneOf.4.allOf.1.definitions.webHookAuthBasicAuthProperties"
                                                                              ],
                                                                            {
                                                                              _ | Dyn
                                                                            }
                                                                          ],
                                                                    body =
                                                                      js2n.string.Matches
                                                                          "^(http|https|file|base64)://",
                                                                    headers =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  String,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {},
                                                                            required =
                                                                              {},
                                                                          },
                                                                    method =
                                                                      String,
                                                                    url =
                                                                      js2n.string.Matches
                                                                          "^https?:\\/\\/.*",
                                                                  },
                                                              required =
                                                                {
                                                                    method =
                                                                      true,
                                                                    url = true,
                                                                  },
                                                            },
                                                    },
                                                required = {},
                                              },
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      client_cert_path = String,
                                                      client_key_path = String,
                                                      connection_uri =
                                                        js2n.string.Matches
                                                            "^smtps?:\\/\\/.*",
                                                      from_address = String,
                                                      from_name = String,
                                                      headers =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some String,
                                                              patterns = {},
                                                              properties = {},
                                                              required = {},
                                                            },
                                                      local_name = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                        templates =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      recovery =
                                                        refs."oneOf.4.allOf.1.definitions.courierTemplates",
                                                      recovery_code =
                                                        refs."oneOf.4.allOf.1.definitions.courierTemplates",
                                                      verification =
                                                        refs."oneOf.4.allOf.1.definitions.courierTemplates",
                                                      verification_code =
                                                        refs."oneOf.4.allOf.1.definitions.courierTemplates",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = { smtp = true, },
                                },
                          database =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cleanup =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  {
                                                      batch_size =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      older_than =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      sleep =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    tables =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          feature_flags =
                            std.contract.any_of
                                [
                                  js2n.Null,
                                  Bool,
                                  Number,
                                  String,
                                  js2n.record.Record
                                    {
                                      additional = 'None,
                                      patterns = {},
                                      properties =
                                        { cacheable_sessions = Bool, },
                                      required = {},
                                    },
                                  Array Dyn
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_id = String,
                                        schemas =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    })
                                              ],
                                      },
                                  required = { schemas = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                        redaction_text = String,
                                      },
                                  required = {},
                                },
                          oauth2_provider =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        headers =
                                          js2n.record.Record
                                              {
                                                additional = 'Some String,
                                                patterns = {},
                                                properties = {},
                                                required = {},
                                              },
                                        url = String,
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cipher =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (std.contract.Sequence
                                                    [
                                                      js2n.string.MaxLength 32,
                                                      js2n.string.MinLength 32
                                                    ])
                                              ],
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allowed_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                        default_browser_return_url =
                                          refs."oneOf.4.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.4.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.4.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.4.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.4.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    before =
                                                                      refs."oneOf.4.allOf.1.definitions.selfServiceBeforeRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    notify_unknown_recipients =
                                                                      Bool,
                                                                    ui_url =
                                                                      String,
                                                                    use =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.enum.TagOrString,
                                                                            [|
                                                                              'code,
                                                                              'link
                                                                            |]
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.4.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.4.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.4.allOf.1.definitions.selfServiceAfterSettings",
                                                                    before =
                                                                      refs."oneOf.4.allOf.1.definitions.selfServiceBeforeSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    required_aal =
                                                                      refs."oneOf.4.allOf.1.definitions.featureRequiredAal",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.4.allOf.1.definitions.selfServiceAfterVerification",
                                                                    before =
                                                                      refs."oneOf.4.allOf.1.definitions.selfServiceBeforeVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    notify_unknown_recipients =
                                                                      Bool,
                                                                    ui_url =
                                                                      String,
                                                                    use =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.enum.TagOrString,
                                                                            [|
                                                                              'code,
                                                                              'link
                                                                            |]
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      code =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_url =
                                                                                    String,
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      lookup_secret =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_redirect_uri =
                                                                                    String,
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.4.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_enabled =
                                                                                    Bool,
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  identifier_similarity_check_enabled =
                                                                                    Bool,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                  min_password_length =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Minimum
                                                                                            6
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      totp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  issuer =
                                                                                    String,
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      webauthn =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.IfThenElse
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Record
                                                                      {
                                                                        additional =
                                                                          'Some
                                                                              Dyn,
                                                                        patterns =
                                                                          {},
                                                                        properties =
                                                                          {
                                                                              enabled =
                                                                                js2n.Const
                                                                                    true,
                                                                            },
                                                                        required =
                                                                          {
                                                                              enabled =
                                                                                true,
                                                                            },
                                                                      },
                                                                    Array Dyn
                                                                  ])
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Required
                                                                      [
                                                                        "config"
                                                                      ],
                                                                    Array Dyn
                                                                  ])
                                                                js2n.Always,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        config =
                                                                          js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      passwordless =
                                                                                        Bool,
                                                                                      rp =
                                                                                        js2n.record.Record
                                                                                            {
                                                                                              additional =
                                                                                                'Some
                                                                                                    Dyn,
                                                                                              patterns =
                                                                                                {},
                                                                                              properties =
                                                                                                {
                                                                                                    display_name =
                                                                                                      String,
                                                                                                    icon =
                                                                                                      String,
                                                                                                    id =
                                                                                                      String,
                                                                                                    origin =
                                                                                                      String,
                                                                                                  },
                                                                                              required =
                                                                                                {
                                                                                                    display_name =
                                                                                                      true,
                                                                                                    id =
                                                                                                      true,
                                                                                                  },
                                                                                            },
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              },
                                                                        enabled =
                                                                          Bool,
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.4.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.4.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.4.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.4.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.4.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        earliest_possible_extend =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        lifespan =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        whoami =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      required_aal =
                                                        refs."oneOf.4.allOf.1.definitions.featureRequiredAal",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'zipkin, 'otel, 'jaeger |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.string.Matches
                                                                              "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                                                          ],
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'trace_id_ratio,
                                                                                    'server_url
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                      trace_id_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      otlp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    insecure =
                                                                      Bool,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'sampling_ratio
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      sampling_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                    server_url =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.string.Matches
                                                                              "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'sampling_ratio
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      sampling_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^(v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)|$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                ciphers =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  algorithm =
                                                    js2n.OneOf
                                                        [
                                                          js2n.Const "aes",
                                                          js2n.Const
                                                            "xchacha20-poly1305"
                                                        ],
                                                },
                                            required = { algorithm = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { ciphers = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                secrets =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Required [ "cipher" ],
                                        Array Dyn
                                      ],
                              },
                          required = { secrets = true, },
                        },
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.11.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          ciphers =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'xchacha20-poly1305,
                                                  'aes,
                                                  'noop
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          clients =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        http =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  {
                                                      disallow_private_ip_ranges =
                                                        Bool,
                                                      private_ip_exception_urls =
                                                        js2n.array.ArrayOf
                                                            String,
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          config = js2n.array.ArrayOf String,
                          cookies =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        domain = String,
                                        path = String,
                                        same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                      },
                                  required = {},
                                },
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        message_retries = std.number.Integer,
                                        sms =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled = Bool,
                                                      from = String,
                                                      request_config =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    additionalProperties =
                                                                      js2n.Never,
                                                                    auth =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                refs."oneOf.5.allOf.1.definitions.webHookAuthApiKeyProperties",
                                                                                refs."oneOf.5.allOf.1.definitions.webHookAuthBasicAuthProperties"
                                                                              ],
                                                                            {
                                                                              _ | Dyn
                                                                            }
                                                                          ],
                                                                    body =
                                                                      js2n.string.Matches
                                                                          "^(http|https|file|base64)://",
                                                                    headers =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  String,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {},
                                                                            required =
                                                                              {},
                                                                          },
                                                                    method =
                                                                      String,
                                                                    url =
                                                                      js2n.string.Matches
                                                                          "^https?:\\/\\/.*",
                                                                  },
                                                              required =
                                                                {
                                                                    method =
                                                                      true,
                                                                    url = true,
                                                                  },
                                                            },
                                                    },
                                                required = {},
                                              },
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      client_cert_path = String,
                                                      client_key_path = String,
                                                      connection_uri =
                                                        js2n.string.Matches
                                                            "^smtps?:\\/\\/.*",
                                                      from_address = String,
                                                      from_name = String,
                                                      headers =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some String,
                                                              patterns = {},
                                                              properties = {},
                                                              required = {},
                                                            },
                                                      local_name = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                        templates =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      recovery =
                                                        refs."oneOf.5.allOf.1.definitions.courierTemplates",
                                                      recovery_code =
                                                        refs."oneOf.5.allOf.1.definitions.courierTemplates",
                                                      verification =
                                                        refs."oneOf.5.allOf.1.definitions.courierTemplates",
                                                      verification_code =
                                                        refs."oneOf.5.allOf.1.definitions.courierTemplates",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = { smtp = true, },
                                },
                          database =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cleanup =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  {
                                                      batch_size =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      older_than =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      sleep =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    tables =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          feature_flags =
                            std.contract.any_of
                                [
                                  js2n.Null,
                                  Bool,
                                  Number,
                                  String,
                                  js2n.record.Record
                                    {
                                      additional = 'None,
                                      patterns = {},
                                      properties =
                                        { cacheable_sessions = Bool, },
                                      required = {},
                                    },
                                  Array Dyn
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_id = String,
                                        schemas =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    })
                                              ],
                                      },
                                  required = { schemas = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                        redaction_text = String,
                                      },
                                  required = {},
                                },
                          oauth2_provider =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        headers =
                                          js2n.record.Record
                                              {
                                                additional = 'Some String,
                                                patterns = {},
                                                properties = {},
                                                required = {},
                                              },
                                        url = String,
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cipher =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (std.contract.Sequence
                                                    [
                                                      js2n.string.MaxLength 32,
                                                      js2n.string.MinLength 32
                                                    ])
                                              ],
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allowed_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                        default_browser_return_url =
                                          refs."oneOf.5.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.5.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.5.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.5.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.5.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    before =
                                                                      refs."oneOf.5.allOf.1.definitions.selfServiceBeforeRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                    use =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.enum.TagOrString,
                                                                            [|
                                                                              'code,
                                                                              'link
                                                                            |]
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.5.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.5.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.5.allOf.1.definitions.selfServiceAfterSettings",
                                                                    before =
                                                                      refs."oneOf.5.allOf.1.definitions.selfServiceBeforeSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    required_aal =
                                                                      refs."oneOf.5.allOf.1.definitions.featureRequiredAal",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.5.allOf.1.definitions.selfServiceAfterVerification",
                                                                    before =
                                                                      refs."oneOf.5.allOf.1.definitions.selfServiceBeforeVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                    use =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.enum.TagOrString,
                                                                            [|
                                                                              'code,
                                                                              'link
                                                                            |]
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      code =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_url =
                                                                                    String,
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      lookup_secret =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_redirect_uri =
                                                                                    String,
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.5.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_enabled =
                                                                                    Bool,
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  identifier_similarity_check_enabled =
                                                                                    Bool,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                  min_password_length =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Minimum
                                                                                            6
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      totp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  issuer =
                                                                                    String,
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      webauthn =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.IfThenElse
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Record
                                                                      {
                                                                        additional =
                                                                          'Some
                                                                              Dyn,
                                                                        patterns =
                                                                          {},
                                                                        properties =
                                                                          {
                                                                              enabled =
                                                                                js2n.Const
                                                                                    true,
                                                                            },
                                                                        required =
                                                                          {
                                                                              enabled =
                                                                                true,
                                                                            },
                                                                      },
                                                                    Array Dyn
                                                                  ])
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Required
                                                                      [
                                                                        "config"
                                                                      ],
                                                                    Array Dyn
                                                                  ])
                                                                js2n.Always,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        config =
                                                                          js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      passwordless =
                                                                                        Bool,
                                                                                      rp =
                                                                                        js2n.record.Record
                                                                                            {
                                                                                              additional =
                                                                                                'Some
                                                                                                    Dyn,
                                                                                              patterns =
                                                                                                {},
                                                                                              properties =
                                                                                                {
                                                                                                    display_name =
                                                                                                      String,
                                                                                                    icon =
                                                                                                      String,
                                                                                                    id =
                                                                                                      String,
                                                                                                    origin =
                                                                                                      String,
                                                                                                  },
                                                                                              required =
                                                                                                {
                                                                                                    display_name =
                                                                                                      true,
                                                                                                    id =
                                                                                                      true,
                                                                                                  },
                                                                                            },
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              },
                                                                        enabled =
                                                                          Bool,
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.5.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.5.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.5.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.5.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.5.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        earliest_possible_extend =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        lifespan =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        whoami =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      required_aal =
                                                        refs."oneOf.5.allOf.1.definitions.featureRequiredAal",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'zipkin, 'otel, 'jaeger |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.string.Matches
                                                                              "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                                                          ],
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'trace_id_ratio,
                                                                                    'server_url
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                      trace_id_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      otlp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    insecure =
                                                                      Bool,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'sampling_ratio
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      sampling_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                    server_url =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.string.Matches
                                                                              "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'sampling_ratio
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      sampling_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^(v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)|$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                ciphers =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  algorithm =
                                                    js2n.OneOf
                                                        [
                                                          js2n.Const "aes",
                                                          js2n.Const
                                                            "xchacha20-poly1305"
                                                        ],
                                                },
                                            required = { algorithm = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { ciphers = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                secrets =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Required [ "cipher" ],
                                        Array Dyn
                                      ],
                              },
                          required = { secrets = true, },
                        },
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.11.0", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          ciphers =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'xchacha20-poly1305,
                                                  'aes,
                                                  'noop
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          clients =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        http =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  {
                                                      disallow_private_ip_ranges =
                                                        Bool,
                                                      private_ip_exception_urls =
                                                        js2n.array.ArrayOf
                                                            String,
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          config = js2n.array.ArrayOf String,
                          cookies =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        domain = String,
                                        path = String,
                                        same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                      },
                                  required = {},
                                },
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        message_retries = std.number.Integer,
                                        sms =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled = Bool,
                                                      from = String,
                                                      request_config =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    additionalProperties =
                                                                      js2n.Never,
                                                                    auth =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                refs."oneOf.6.allOf.1.definitions.webHookAuthApiKeyProperties",
                                                                                refs."oneOf.6.allOf.1.definitions.webHookAuthBasicAuthProperties"
                                                                              ],
                                                                            {
                                                                              _ | Dyn
                                                                            }
                                                                          ],
                                                                    body =
                                                                      js2n.string.Matches
                                                                          "^(http|https|file|base64)://",
                                                                    headers =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  String,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {},
                                                                            required =
                                                                              {},
                                                                          },
                                                                    method =
                                                                      String,
                                                                    url =
                                                                      js2n.string.Matches
                                                                          "^https?:\\/\\/.*",
                                                                  },
                                                              required =
                                                                {
                                                                    method =
                                                                      true,
                                                                    url = true,
                                                                  },
                                                            },
                                                    },
                                                required = {},
                                              },
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      client_cert_path = String,
                                                      client_key_path = String,
                                                      connection_uri =
                                                        js2n.string.Matches
                                                            "^smtps?:\\/\\/.*",
                                                      from_address = String,
                                                      from_name = String,
                                                      headers =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some String,
                                                              patterns = {},
                                                              properties = {},
                                                              required = {},
                                                            },
                                                      local_name = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                        templates =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      recovery =
                                                        refs."oneOf.6.allOf.1.definitions.courierTemplates",
                                                      recovery_code =
                                                        refs."oneOf.6.allOf.1.definitions.courierTemplates",
                                                      verification =
                                                        refs."oneOf.6.allOf.1.definitions.courierTemplates",
                                                      verification_code =
                                                        refs."oneOf.6.allOf.1.definitions.courierTemplates",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = { smtp = true, },
                                },
                          database =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cleanup =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  {
                                                      batch_size =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      older_than =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      sleep =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    tables =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          feature_flags =
                            std.contract.any_of
                                [
                                  js2n.Null,
                                  Bool,
                                  Number,
                                  String,
                                  js2n.record.Record
                                    {
                                      additional = 'None,
                                      patterns = {},
                                      properties =
                                        { cacheable_sessions = Bool, },
                                      required = {},
                                    },
                                  Array Dyn
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_id = String,
                                        schemas =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    })
                                              ],
                                      },
                                  required = { schemas = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                        redaction_text = String,
                                      },
                                  required = {},
                                },
                          oauth2_provider =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        headers =
                                          js2n.record.Record
                                              {
                                                additional = 'Some String,
                                                patterns = {},
                                                properties = {},
                                                required = {},
                                              },
                                        url = String,
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cipher =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (std.contract.Sequence
                                                    [
                                                      js2n.string.MaxLength 32,
                                                      js2n.string.MinLength 32
                                                    ])
                                              ],
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allowed_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                        default_browser_return_url =
                                          refs."oneOf.6.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.6.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.6.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.6.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.6.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    before =
                                                                      refs."oneOf.6.allOf.1.definitions.selfServiceBeforeRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                    use =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.enum.TagOrString,
                                                                            [|
                                                                              'code,
                                                                              'link
                                                                            |]
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.6.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.6.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.6.allOf.1.definitions.selfServiceAfterSettings",
                                                                    before =
                                                                      refs."oneOf.6.allOf.1.definitions.selfServiceBeforeSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    required_aal =
                                                                      refs."oneOf.6.allOf.1.definitions.featureRequiredAal",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.6.allOf.1.definitions.selfServiceAfterVerification",
                                                                    before =
                                                                      refs."oneOf.6.allOf.1.definitions.selfServiceBeforeVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                    use =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.enum.TagOrString,
                                                                            [|
                                                                              'code,
                                                                              'link
                                                                            |]
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      code =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_url =
                                                                                    String,
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      lookup_secret =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_redirect_uri =
                                                                                    String,
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.6.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_enabled =
                                                                                    Bool,
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  identifier_similarity_check_enabled =
                                                                                    Bool,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                  min_password_length =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Minimum
                                                                                            6
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      totp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  issuer =
                                                                                    String,
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      webauthn =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.IfThenElse
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Record
                                                                      {
                                                                        additional =
                                                                          'Some
                                                                              Dyn,
                                                                        patterns =
                                                                          {},
                                                                        properties =
                                                                          {
                                                                              enabled =
                                                                                js2n.Const
                                                                                    true,
                                                                            },
                                                                        required =
                                                                          {
                                                                              enabled =
                                                                                true,
                                                                            },
                                                                      },
                                                                    Array Dyn
                                                                  ])
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Required
                                                                      [
                                                                        "config"
                                                                      ],
                                                                    Array Dyn
                                                                  ])
                                                                js2n.Always,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        config =
                                                                          js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      passwordless =
                                                                                        Bool,
                                                                                      rp =
                                                                                        js2n.record.Record
                                                                                            {
                                                                                              additional =
                                                                                                'Some
                                                                                                    Dyn,
                                                                                              patterns =
                                                                                                {},
                                                                                              properties =
                                                                                                {
                                                                                                    display_name =
                                                                                                      String,
                                                                                                    icon =
                                                                                                      String,
                                                                                                    id =
                                                                                                      String,
                                                                                                    origin =
                                                                                                      String,
                                                                                                  },
                                                                                              required =
                                                                                                {
                                                                                                    display_name =
                                                                                                      true,
                                                                                                    id =
                                                                                                      true,
                                                                                                  },
                                                                                            },
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              },
                                                                        enabled =
                                                                          Bool,
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.6.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.6.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.6.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.6.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.6.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        earliest_possible_extend =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        lifespan =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        whoami =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      required_aal =
                                                        refs."oneOf.6.allOf.1.definitions.featureRequiredAal",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'zipkin, 'otel, 'jaeger |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.string.Matches
                                                                              "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                                                          ],
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      otlp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    insecure =
                                                                      Bool,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'sampling_ratio
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      sampling_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                    server_url =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.string.Matches
                                                                              "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'sampling_ratio
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      sampling_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^(v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)|$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                ciphers =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  algorithm =
                                                    js2n.OneOf
                                                        [
                                                          js2n.Const "aes",
                                                          js2n.Const
                                                            "xchacha20-poly1305"
                                                        ],
                                                },
                                            required = { algorithm = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { ciphers = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                secrets =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Required [ "cipher" ],
                                        Array Dyn
                                      ],
                              },
                          required = { secrets = true, },
                        },
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.10.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          ciphers =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'xchacha20-poly1305,
                                                  'aes,
                                                  'noop
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          clients =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        http =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  {
                                                      disallow_private_ip_ranges =
                                                        Bool,
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          config = js2n.array.ArrayOf String,
                          cookies =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        domain = String,
                                        path = String,
                                        same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                      },
                                  required = {},
                                },
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        message_ttl =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        sms =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled = Bool,
                                                      from = String,
                                                      request_config =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    additionalProperties =
                                                                      js2n.Never,
                                                                    auth =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                refs."oneOf.7.allOf.1.definitions.webHookAuthApiKeyProperties",
                                                                                refs."oneOf.7.allOf.1.definitions.webHookAuthBasicAuthProperties"
                                                                              ],
                                                                            {
                                                                              _ | Dyn
                                                                            }
                                                                          ],
                                                                    body =
                                                                      js2n.string.Matches
                                                                          "^(http|https|file|base64)://",
                                                                    header =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  String,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {},
                                                                            required =
                                                                              {},
                                                                          },
                                                                    method =
                                                                      String,
                                                                    url =
                                                                      js2n.string.Matches
                                                                          "^https?:\\/\\/.*",
                                                                  },
                                                              required =
                                                                {
                                                                    method =
                                                                      true,
                                                                    url = true,
                                                                  },
                                                            },
                                                    },
                                                required = {},
                                              },
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      client_cert_path = String,
                                                      client_key_path = String,
                                                      connection_uri =
                                                        js2n.string.Matches
                                                            "^smtps?:\\/\\/.*",
                                                      from_address = String,
                                                      from_name = String,
                                                      headers = { _ | Dyn },
                                                      local_name = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                        templates =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      recovery =
                                                        refs."oneOf.7.allOf.1.definitions.courierTemplates",
                                                      verification =
                                                        refs."oneOf.7.allOf.1.definitions.courierTemplates",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = { smtp = true, },
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_id = String,
                                        schemas =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    })
                                              ],
                                      },
                                  required = { schemas = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                        redaction_text = String,
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cipher =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (std.contract.Sequence
                                                    [
                                                      js2n.string.MaxLength 32,
                                                      js2n.string.MinLength 32
                                                    ])
                                              ],
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allowed_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                        default_browser_return_url =
                                          refs."oneOf.7.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.7.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.7.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.7.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.7.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.7.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.7.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.7.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    required_aal =
                                                                      refs."oneOf.7.allOf.1.definitions.featureRequiredAal",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.7.allOf.1.definitions.selfServiceAfterVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_url =
                                                                                    String,
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      lookup_secret =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_redirect_uri =
                                                                                    String,
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.7.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_enabled =
                                                                                    Bool,
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  identifier_similarity_check_enabled =
                                                                                    Bool,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                  min_password_length =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Minimum
                                                                                            6
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      totp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  issuer =
                                                                                    String,
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      webauthn =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.IfThenElse
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Record
                                                                      {
                                                                        additional =
                                                                          'Some
                                                                              Dyn,
                                                                        patterns =
                                                                          {},
                                                                        properties =
                                                                          {
                                                                              enabled =
                                                                                js2n.Const
                                                                                    true,
                                                                            },
                                                                        required =
                                                                          {
                                                                              enabled =
                                                                                true,
                                                                            },
                                                                      },
                                                                    Array Dyn
                                                                  ])
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Required
                                                                      [
                                                                        "config"
                                                                      ],
                                                                    Array Dyn
                                                                  ])
                                                                js2n.Always,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        config =
                                                                          js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      passwordless =
                                                                                        Bool,
                                                                                      rp =
                                                                                        js2n.record.Record
                                                                                            {
                                                                                              additional =
                                                                                                'Some
                                                                                                    Dyn,
                                                                                              patterns =
                                                                                                {},
                                                                                              properties =
                                                                                                {
                                                                                                    display_name =
                                                                                                      String,
                                                                                                    icon =
                                                                                                      String,
                                                                                                    id =
                                                                                                      String,
                                                                                                    origin =
                                                                                                      String,
                                                                                                  },
                                                                                              required =
                                                                                                {
                                                                                                    display_name =
                                                                                                      true,
                                                                                                    id =
                                                                                                      true,
                                                                                                  },
                                                                                            },
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              },
                                                                        enabled =
                                                                          Bool,
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.7.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.7.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.7.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.7.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.7.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        earliest_possible_extend =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        lifespan =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        whoami =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      required_aal =
                                                        refs."oneOf.7.allOf.1.definitions.featureRequiredAal",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'zipkin, 'jaeger |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.string.Matches
                                                                              "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                                                          ],
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      otlp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    insecure =
                                                                      Bool,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'sampling_ratio
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      sampling_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                    server_url =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.string.Matches
                                                                              "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'sampling_ratio
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      sampling_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^(v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)|$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                ciphers =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  algorithm =
                                                    js2n.OneOf
                                                        [
                                                          js2n.Const "aes",
                                                          js2n.Const
                                                            "xchacha20-poly1305"
                                                        ],
                                                },
                                            required = { algorithm = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { ciphers = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                secrets =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Required [ "cipher" ],
                                        Array Dyn
                                      ],
                              },
                          required = { secrets = true, },
                        },
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.10.0", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          ciphers =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'xchacha20-poly1305,
                                                  'aes,
                                                  'noop
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          clients =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        http =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  {
                                                      disallow_private_ip_ranges =
                                                        Bool,
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          config = js2n.array.ArrayOf String,
                          cookies =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        domain = String,
                                        path = String,
                                        same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                      },
                                  required = {},
                                },
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        message_ttl =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        sms =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled = Bool,
                                                      from = String,
                                                      request_config =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    additionalProperties =
                                                                      js2n.Never,
                                                                    auth =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                refs."oneOf.8.allOf.1.definitions.webHookAuthApiKeyProperties",
                                                                                refs."oneOf.8.allOf.1.definitions.webHookAuthBasicAuthProperties"
                                                                              ],
                                                                            {
                                                                              _ | Dyn
                                                                            }
                                                                          ],
                                                                    body =
                                                                      js2n.string.Matches
                                                                          "^(http|https|file|base64)://",
                                                                    header =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  String,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {},
                                                                            required =
                                                                              {},
                                                                          },
                                                                    method =
                                                                      String,
                                                                    url =
                                                                      js2n.string.Matches
                                                                          "^https?:\\/\\/.*",
                                                                  },
                                                              required =
                                                                {
                                                                    method =
                                                                      true,
                                                                    url = true,
                                                                  },
                                                            },
                                                    },
                                                required = {},
                                              },
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      client_cert_path = String,
                                                      client_key_path = String,
                                                      connection_uri =
                                                        js2n.string.Matches
                                                            "^smtps?:\\/\\/.*",
                                                      from_address = String,
                                                      from_name = String,
                                                      headers = { _ | Dyn },
                                                      local_name = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                        templates =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      recovery =
                                                        refs."oneOf.8.allOf.1.definitions.courierTemplates",
                                                      verification =
                                                        refs."oneOf.8.allOf.1.definitions.courierTemplates",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = { smtp = true, },
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_id = String,
                                        schemas =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    })
                                              ],
                                      },
                                  required = { schemas = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                        redaction_text = String,
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cipher =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (std.contract.Sequence
                                                    [
                                                      js2n.string.MaxLength 32,
                                                      js2n.string.MinLength 32
                                                    ])
                                              ],
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allowed_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                        default_browser_return_url =
                                          refs."oneOf.8.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.8.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.8.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.8.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.8.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.8.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.8.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.8.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    required_aal =
                                                                      refs."oneOf.8.allOf.1.definitions.featureRequiredAal",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.8.allOf.1.definitions.selfServiceAfterVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_url =
                                                                                    String,
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      lookup_secret =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_redirect_uri =
                                                                                    String,
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.8.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_enabled =
                                                                                    Bool,
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  identifier_similarity_check_enabled =
                                                                                    Bool,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                  min_password_length =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Minimum
                                                                                            6
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      totp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  issuer =
                                                                                    String,
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      webauthn =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.IfThenElse
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Record
                                                                      {
                                                                        additional =
                                                                          'Some
                                                                              Dyn,
                                                                        patterns =
                                                                          {},
                                                                        properties =
                                                                          {
                                                                              enabled =
                                                                                js2n.Const
                                                                                    true,
                                                                            },
                                                                        required =
                                                                          {
                                                                              enabled =
                                                                                true,
                                                                            },
                                                                      },
                                                                    Array Dyn
                                                                  ])
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Required
                                                                      [
                                                                        "config"
                                                                      ],
                                                                    Array Dyn
                                                                  ])
                                                                js2n.Always,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        config =
                                                                          js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      passwordless =
                                                                                        Bool,
                                                                                      rp =
                                                                                        js2n.record.Record
                                                                                            {
                                                                                              additional =
                                                                                                'Some
                                                                                                    Dyn,
                                                                                              patterns =
                                                                                                {},
                                                                                              properties =
                                                                                                {
                                                                                                    display_name =
                                                                                                      String,
                                                                                                    icon =
                                                                                                      String,
                                                                                                    id =
                                                                                                      String,
                                                                                                    origin =
                                                                                                      String,
                                                                                                  },
                                                                                              required =
                                                                                                {
                                                                                                    display_name =
                                                                                                      true,
                                                                                                    id =
                                                                                                      true,
                                                                                                  },
                                                                                            },
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              },
                                                                        enabled =
                                                                          Bool,
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.8.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.8.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.8.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.8.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.8.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        earliest_possible_extend =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        lifespan =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        whoami =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      required_aal =
                                                        refs."oneOf.8.allOf.1.definitions.featureRequiredAal",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing = refs."oneOf.7.allOf.1.properties.tracing",
                          version =
                            js2n.string.Matches
                                "^(v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)|$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                ciphers =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  algorithm =
                                                    js2n.OneOf
                                                        [
                                                          js2n.Const "aes",
                                                          js2n.Const
                                                            "xchacha20-poly1305"
                                                        ],
                                                },
                                            required = { algorithm = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { ciphers = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                secrets =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Required [ "cipher" ],
                                        Array Dyn
                                      ],
                              },
                          required = { secrets = true, },
                        },
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.9.0-alpha.3", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          ciphers =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'xchacha20-poly1305,
                                                  'aes,
                                                  'noop
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          clients =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        http =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  {
                                                      disallow_private_ip_ranges =
                                                        Bool,
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          config = js2n.array.ArrayOf String,
                          cookies =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        domain = String,
                                        path = String,
                                        same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                      },
                                  required = {},
                                },
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        message_ttl =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        sms =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled = Bool,
                                                      from = String,
                                                      request_config =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    additionalProperties =
                                                                      js2n.Never,
                                                                    auth =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                refs."oneOf.9.allOf.1.definitions.webHookAuthApiKeyProperties",
                                                                                refs."oneOf.9.allOf.1.definitions.webHookAuthBasicAuthProperties"
                                                                              ],
                                                                            {
                                                                              _ | Dyn
                                                                            }
                                                                          ],
                                                                    body =
                                                                      js2n.string.Matches
                                                                          "^(http|https|file|base64)://",
                                                                    header =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  String,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {},
                                                                            required =
                                                                              {},
                                                                          },
                                                                    method =
                                                                      String,
                                                                    url =
                                                                      js2n.string.Matches
                                                                          "^https?:\\/\\/.*",
                                                                  },
                                                              required =
                                                                {
                                                                    method =
                                                                      true,
                                                                    url = true,
                                                                  },
                                                            },
                                                    },
                                                required = {},
                                              },
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri =
                                                        js2n.string.Matches
                                                            "^smtps?:\\/\\/.*",
                                                      from_address = String,
                                                      from_name = String,
                                                      headers = { _ | Dyn },
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                        templates =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      recovery =
                                                        refs."oneOf.9.allOf.1.definitions.courierTemplates",
                                                      verification =
                                                        refs."oneOf.9.allOf.1.definitions.courierTemplates",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = { smtp = true, },
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_id = String,
                                        schemas =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    })
                                              ],
                                      },
                                  required = { schemas = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                        redaction_text = String,
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cipher =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (std.contract.Sequence
                                                    [
                                                      js2n.string.MaxLength 32,
                                                      js2n.string.MinLength 32
                                                    ])
                                              ],
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allowed_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                        default_browser_return_url =
                                          refs."oneOf.9.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.9.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.9.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.9.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.9.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.9.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.9.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.9.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    required_aal =
                                                                      refs."oneOf.9.allOf.1.definitions.featureRequiredAal",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.9.allOf.1.definitions.selfServiceAfterVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_url =
                                                                                    String,
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      lookup_secret =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_redirect_uri =
                                                                                    String,
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.9.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_enabled =
                                                                                    Bool,
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  identifier_similarity_check_enabled =
                                                                                    Bool,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                  min_password_length =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Minimum
                                                                                            6
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      totp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  issuer =
                                                                                    String,
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      webauthn =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.IfThenElse
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Record
                                                                      {
                                                                        additional =
                                                                          'Some
                                                                              Dyn,
                                                                        patterns =
                                                                          {},
                                                                        properties =
                                                                          {
                                                                              enabled =
                                                                                js2n.Const
                                                                                    true,
                                                                            },
                                                                        required =
                                                                          {
                                                                              enabled =
                                                                                true,
                                                                            },
                                                                      },
                                                                    Array Dyn
                                                                  ])
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Required
                                                                      [
                                                                        "config"
                                                                      ],
                                                                    Array Dyn
                                                                  ])
                                                                js2n.Always,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        config =
                                                                          js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      passwordless =
                                                                                        Bool,
                                                                                      rp =
                                                                                        js2n.record.Record
                                                                                            {
                                                                                              additional =
                                                                                                'Some
                                                                                                    Dyn,
                                                                                              patterns =
                                                                                                {},
                                                                                              properties =
                                                                                                {
                                                                                                    display_name =
                                                                                                      String,
                                                                                                    icon =
                                                                                                      String,
                                                                                                    id =
                                                                                                      String,
                                                                                                    origin =
                                                                                                      String,
                                                                                                  },
                                                                                              required =
                                                                                                {
                                                                                                    display_name =
                                                                                                      true,
                                                                                                    id =
                                                                                                      true,
                                                                                                  },
                                                                                            },
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              },
                                                                        enabled =
                                                                          Bool,
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.9.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.9.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.9.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.9.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.9.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        whoami =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      required_aal =
                                                        refs."oneOf.9.allOf.1.definitions.featureRequiredAal",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'instana,
                                                  'elastic-apm,
                                                  'datadog,
                                                  'zipkin,
                                                  'jaeger
                                                |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^(v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)|$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                ciphers =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  algorithm =
                                                    js2n.OneOf
                                                        [
                                                          js2n.Const "aes",
                                                          js2n.Const
                                                            "xchacha20-poly1305"
                                                        ],
                                                },
                                            required = { algorithm = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { ciphers = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                secrets =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Required [ "cipher" ],
                                        Array Dyn
                                      ],
                              },
                          required = { secrets = true, },
                        },
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.9.0-alpha.2", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          ciphers =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'xchacha20-poly1305,
                                                  'aes,
                                                  'noop
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          clients =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        http =
                                          js2n.record.Record
                                              {
                                                additional = 'Some Dyn,
                                                patterns = {},
                                                properties =
                                                  {
                                                      disallow_private_ip_ranges =
                                                        Bool,
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          config = js2n.array.ArrayOf String,
                          cookies =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        domain = String,
                                        path = String,
                                        same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                      },
                                  required = {},
                                },
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        message_ttl =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        sms =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled = Bool,
                                                      from = String,
                                                      request_config =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    additionalProperties =
                                                                      js2n.Never,
                                                                    auth =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                refs."oneOf.10.allOf.1.definitions.webHookAuthApiKeyProperties",
                                                                                refs."oneOf.10.allOf.1.definitions.webHookAuthBasicAuthProperties"
                                                                              ],
                                                                            {
                                                                              _ | Dyn
                                                                            }
                                                                          ],
                                                                    body =
                                                                      js2n.string.Matches
                                                                          "^(http|https|file|base64)://",
                                                                    header =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  String,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {},
                                                                            required =
                                                                              {},
                                                                          },
                                                                    method =
                                                                      String,
                                                                    url =
                                                                      js2n.string.Matches
                                                                          "^https?:\\/\\/.*",
                                                                  },
                                                              required =
                                                                {
                                                                    method =
                                                                      true,
                                                                    url = true,
                                                                  },
                                                            },
                                                    },
                                                required = {},
                                              },
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri =
                                                        js2n.string.Matches
                                                            "^smtps?:\\/\\/.*",
                                                      from_address = String,
                                                      from_name = String,
                                                      headers = { _ | Dyn },
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                        templates =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      recovery =
                                                        refs."oneOf.10.allOf.1.definitions.courierTemplates",
                                                      verification =
                                                        refs."oneOf.10.allOf.1.definitions.courierTemplates",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = { smtp = true, },
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_id = String,
                                        schemas =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    })
                                              ],
                                      },
                                  required = { schemas = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                        redaction_text = String,
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cipher =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (std.contract.Sequence
                                                    [
                                                      js2n.string.MaxLength 32,
                                                      js2n.string.MinLength 32
                                                    ])
                                              ],
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allowed_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                        default_browser_return_url =
                                          refs."oneOf.10.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.10.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.10.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.10.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.10.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.10.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.10.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.10.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    required_aal =
                                                                      refs."oneOf.10.allOf.1.definitions.featureRequiredAal",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.10.allOf.1.definitions.selfServiceAfterVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_url =
                                                                                    String,
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      lookup_secret =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  base_redirect_uri =
                                                                                    String,
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.10.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_enabled =
                                                                                    Bool,
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  identifier_similarity_check_enabled =
                                                                                    Bool,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                  min_password_length =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Minimum
                                                                                            6
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      totp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  issuer =
                                                                                    String,
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      webauthn =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.IfThenElse
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Record
                                                                      {
                                                                        additional =
                                                                          'Some
                                                                              Dyn,
                                                                        patterns =
                                                                          {},
                                                                        properties =
                                                                          {
                                                                              enabled =
                                                                                js2n.Const
                                                                                    true,
                                                                            },
                                                                        required =
                                                                          {
                                                                              enabled =
                                                                                true,
                                                                            },
                                                                      },
                                                                    Array Dyn
                                                                  ])
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Required
                                                                      [
                                                                        "config"
                                                                      ],
                                                                    Array Dyn
                                                                  ])
                                                                js2n.Always,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        config =
                                                                          js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      passwordless =
                                                                                        Bool,
                                                                                      rp =
                                                                                        js2n.record.Record
                                                                                            {
                                                                                              additional =
                                                                                                'Some
                                                                                                    Dyn,
                                                                                              patterns =
                                                                                                {},
                                                                                              properties =
                                                                                                {
                                                                                                    display_name =
                                                                                                      String,
                                                                                                    icon =
                                                                                                      String,
                                                                                                    id =
                                                                                                      String,
                                                                                                    origin =
                                                                                                      String,
                                                                                                  },
                                                                                              required =
                                                                                                {
                                                                                                    display_name =
                                                                                                      true,
                                                                                                    id =
                                                                                                      true,
                                                                                                  },
                                                                                            },
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              },
                                                                        enabled =
                                                                          Bool,
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.10.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.10.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.10.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.10.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.10.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        whoami =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      required_aal =
                                                        refs."oneOf.10.allOf.1.definitions.featureRequiredAal",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'instana,
                                                  'elastic-apm,
                                                  'datadog,
                                                  'zipkin,
                                                  'jaeger
                                                |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^(v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)|$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {},
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required = {},
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {},
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required = {},
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = {},
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = {},
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    std.contract.any_of
                                                        [
                                                          js2n.Null,
                                                          Bool,
                                                          Number,
                                                          String,
                                                          js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    verification =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.Null,
                                                                            Bool,
                                                                            Number,
                                                                            String,
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      enabled =
                                                                                        js2n.Const
                                                                                            true,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              },
                                                                            Array
                                                                              Dyn
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                          Array Dyn
                                                        ],
                                                },
                                            required = {},
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = {},
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.4.6-alpha.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri = String,
                                                      from_address = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dsn = String,
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16384
                                                            ],
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.string.Matches
                                                                    "^default$",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required = {},
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.11.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.11.allOf.1.definitions.selfServiceAfterLogin",
                                                                    request_lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.11.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.11.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                    request_lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.11.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    request_lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.11.allOf.1.definitions.selfServiceAfterSettings",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    request_lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.11.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                    request_lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        strategies =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        refs."oneOf.11.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery_token =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie_same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                        lifespan =
                                          js2n.string.Matches
                                              "^[0-9]+(ns|us|ms|s|m|h)$",
                                      },
                                  required = {},
                                },
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.5.0-alpha.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri = String,
                                                      from_address = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dsn = String,
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16384
                                                            ],
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.Const
                                                                    "default",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.12.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.12.allOf.1.definitions.selfServiceAfterLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.12.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.12.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.12.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.12.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.12.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.12.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery_token =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain =
                                                        std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              { _ | Dyn },
                                                              Array Dyn
                                                            ],
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^[0-9]+(ns|us|ms|s|m|h)$",
                                      },
                                  required = {},
                                },
                          version = refs."oneOf.12.allOf.1.definitions.version",
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.5.1-alpha.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri = String,
                                                      from_address = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dsn = String,
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16384
                                                            ],
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.Const
                                                                    "default",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.13.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.13.allOf.1.definitions.selfServiceAfterLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.13.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.13.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.13.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.13.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.13.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.13.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery_token =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^[0-9]+(ns|us|ms|s|m|h)$",
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.5.2-alpha.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri = String,
                                                      from_address = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dsn = String,
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16384
                                                            ],
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.Const
                                                                    "default",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.14.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.14.allOf.1.definitions.selfServiceAfterLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.14.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.14.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.14.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.14.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.14.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.14.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^[0-9]+(ns|us|ms|s|m|h)$",
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.5.3-alpha.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri = String,
                                                      from_address = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dsn = String,
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16384
                                                            ],
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.Const
                                                                    "default",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.15.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.15.allOf.1.definitions.selfServiceAfterLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.15.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.15.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.15.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.15.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.15.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.15.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^[0-9]+(ns|us|ms|s|m|h)$",
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.5.4-alpha.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri = String,
                                                      from_address = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dsn = String,
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16384
                                                            ],
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.Const
                                                                    "default",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.16.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.16.allOf.1.definitions.selfServiceAfterLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.16.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.16.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.16.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.16.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.16.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.16.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^[0-9]+(ns|us|ms|s|m|h)$",
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.5.5-alpha.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri = String,
                                                      from_address = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dsn = String,
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16384
                                                            ],
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.Const
                                                                    "default",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          password =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        ignore_network_errors = Bool,
                                        max_breaches =
                                          std.contract.Sequence
                                              [
                                                std.number.Integer,
                                                js2n.number.Maximum 100,
                                                js2n.number.Minimum 0
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.17.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.17.allOf.1.definitions.selfServiceAfterLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.17.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.17.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.17.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.17.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.17.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.17.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^[0-9]+(ns|us|ms|s|m|h)$",
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                session =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  cookie =
                                                    std.contract.any_of
                                                        [
                                                          js2n.Null,
                                                          Bool,
                                                          Number,
                                                          String,
                                                          js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    domain =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.Null,
                                                                            Bool,
                                                                            Number,
                                                                            js2n.string.MinLength
                                                                              1,
                                                                            {
                                                                              _ | Dyn
                                                                            },
                                                                            Array
                                                                              Dyn
                                                                          ],
                                                                  },
                                                              required =
                                                                {
                                                                    domain =
                                                                      true,
                                                                  },
                                                            },
                                                          Array Dyn
                                                        ],
                                                },
                                            required = { cookie = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { session = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                serve =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  public =
                                                    std.contract.any_of
                                                        [
                                                          js2n.Null,
                                                          Bool,
                                                          Number,
                                                          String,
                                                          js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    domain_aliases =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.Null,
                                                                            Bool,
                                                                            Number,
                                                                            String,
                                                                            {
                                                                              _ | Dyn
                                                                            },
                                                                            js2n.array.MaxItems
                                                                              0
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                          Array Dyn
                                                        ],
                                                },
                                            required = {},
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = {},
                        },
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.6.0-alpha.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          config = js2n.array.ArrayOf String,
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri = String,
                                                      from_address = String,
                                                      from_name = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.Const
                                                                    "default",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.18.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.18.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.18.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.18.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.18.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.18.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.18.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.18.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.18.allOf.1.definitions.selfServiceAfterVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.18.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.18.allOf.1.definitions.socket",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.18.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      domain_aliases =
                                                        js2n.array.Items
                                                            [
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        base_path =
                                                                          std.contract.Sequence
                                                                              [
                                                                                js2n.string.MinLength
                                                                                  1,
                                                                                js2n.string.Matches
                                                                                  "^/.*$"
                                                                              ],
                                                                        match_domain =
                                                                          js2n.string.MinLength
                                                                              1,
                                                                        scheme =
                                                                          std.contract.Sequence
                                                                              [
                                                                                std.enum.TagOrString,
                                                                                [|
                                                                                  'https,
                                                                                  'http
                                                                                |]
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        base_path =
                                                                          true,
                                                                        match_domain =
                                                                          true,
                                                                        scheme =
                                                                          true,
                                                                      },
                                                                }
                                                            ] js2n.Always,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.18.allOf.1.definitions.socket",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^[0-9]+(ns|us|ms|s|m|h)$",
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'elastic-apm,
                                                  'datadog,
                                                  'zipkin,
                                                  'jaeger
                                                |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                session =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  cookie =
                                                    std.contract.any_of
                                                        [
                                                          js2n.Null,
                                                          Bool,
                                                          Number,
                                                          String,
                                                          js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    domain =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.Null,
                                                                            Bool,
                                                                            Number,
                                                                            js2n.string.MinLength
                                                                              1,
                                                                            {
                                                                              _ | Dyn
                                                                            },
                                                                            Array
                                                                              Dyn
                                                                          ],
                                                                  },
                                                              required =
                                                                {
                                                                    domain =
                                                                      true,
                                                                  },
                                                            },
                                                          Array Dyn
                                                        ],
                                                },
                                            required = { cookie = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { session = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                serve =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  public =
                                                    std.contract.any_of
                                                        [
                                                          js2n.Null,
                                                          Bool,
                                                          Number,
                                                          String,
                                                          js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    domain_aliases =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.Null,
                                                                            Bool,
                                                                            Number,
                                                                            String,
                                                                            {
                                                                              _ | Dyn
                                                                            },
                                                                            js2n.array.MaxItems
                                                                              0
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                          Array Dyn
                                                        ],
                                                },
                                            required = {},
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = {},
                        },
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.6.0-alpha.2", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          config = js2n.array.ArrayOf String,
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri = String,
                                                      from_address = String,
                                                      from_name = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.Const
                                                                    "default",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.19.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.19.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.19.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.19.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.19.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.19.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.19.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.19.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.19.allOf.1.definitions.selfServiceAfterVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.19.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.19.allOf.1.definitions.socket",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.19.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      domain_aliases =
                                                        js2n.array.Items
                                                            [
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        base_path =
                                                                          std.contract.Sequence
                                                                              [
                                                                                js2n.string.MinLength
                                                                                  1,
                                                                                js2n.string.Matches
                                                                                  "^/.*$"
                                                                              ],
                                                                        match_domain =
                                                                          js2n.string.MinLength
                                                                              1,
                                                                        scheme =
                                                                          std.contract.Sequence
                                                                              [
                                                                                std.enum.TagOrString,
                                                                                [|
                                                                                  'https,
                                                                                  'http
                                                                                |]
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        base_path =
                                                                          true,
                                                                        match_domain =
                                                                          true,
                                                                        scheme =
                                                                          true,
                                                                      },
                                                                }
                                                            ] js2n.Always,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.19.allOf.1.definitions.socket",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^[0-9]+(ns|us|ms|s|m|h)$",
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'elastic-apm,
                                                  'datadog,
                                                  'zipkin,
                                                  'jaeger
                                                |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                session =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  cookie =
                                                    std.contract.any_of
                                                        [
                                                          js2n.Null,
                                                          Bool,
                                                          Number,
                                                          String,
                                                          js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    domain =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.Null,
                                                                            Bool,
                                                                            Number,
                                                                            js2n.string.MinLength
                                                                              1,
                                                                            {
                                                                              _ | Dyn
                                                                            },
                                                                            Array
                                                                              Dyn
                                                                          ],
                                                                  },
                                                              required =
                                                                {
                                                                    domain =
                                                                      true,
                                                                  },
                                                            },
                                                          Array Dyn
                                                        ],
                                                },
                                            required = { cookie = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { session = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                serve =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  public =
                                                    std.contract.any_of
                                                        [
                                                          js2n.Null,
                                                          Bool,
                                                          Number,
                                                          String,
                                                          js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    domain_aliases =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.Null,
                                                                            Bool,
                                                                            Number,
                                                                            String,
                                                                            {
                                                                              _ | Dyn
                                                                            },
                                                                            js2n.array.MaxItems
                                                                              0
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                          Array Dyn
                                                        ],
                                                },
                                            required = {},
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = {},
                        },
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.6.1-alpha.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          config = js2n.array.ArrayOf String,
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri = String,
                                                      from_address = String,
                                                      from_name = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.Const
                                                                    "default",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.20.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.20.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.20.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.20.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.20.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.20.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.20.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.20.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.20.allOf.1.definitions.selfServiceAfterVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.20.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.20.allOf.1.definitions.socket",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.20.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      domain_aliases =
                                                        js2n.array.Items
                                                            [
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        base_path =
                                                                          std.contract.Sequence
                                                                              [
                                                                                js2n.string.MinLength
                                                                                  1,
                                                                                js2n.string.Matches
                                                                                  "^/.*$"
                                                                              ],
                                                                        match_domain =
                                                                          js2n.string.MinLength
                                                                              1,
                                                                        scheme =
                                                                          std.contract.Sequence
                                                                              [
                                                                                std.enum.TagOrString,
                                                                                [|
                                                                                  'https,
                                                                                  'http
                                                                                |]
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        base_path =
                                                                          true,
                                                                        match_domain =
                                                                          true,
                                                                        scheme =
                                                                          true,
                                                                      },
                                                                }
                                                            ] js2n.Always,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.20.allOf.1.definitions.socket",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^[0-9]+(ns|us|ms|s|m|h)$",
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'elastic-apm,
                                                  'datadog,
                                                  'zipkin,
                                                  'jaeger
                                                |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                session =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  cookie =
                                                    std.contract.any_of
                                                        [
                                                          js2n.Null,
                                                          Bool,
                                                          Number,
                                                          String,
                                                          js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    domain =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.Null,
                                                                            Bool,
                                                                            Number,
                                                                            js2n.string.MinLength
                                                                              1,
                                                                            {
                                                                              _ | Dyn
                                                                            },
                                                                            Array
                                                                              Dyn
                                                                          ],
                                                                  },
                                                              required =
                                                                {
                                                                    domain =
                                                                      true,
                                                                  },
                                                            },
                                                          Array Dyn
                                                        ],
                                                },
                                            required = { cookie = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { session = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                serve =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  public =
                                                    std.contract.any_of
                                                        [
                                                          js2n.Null,
                                                          Bool,
                                                          Number,
                                                          String,
                                                          js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    domain_aliases =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.Null,
                                                                            Bool,
                                                                            Number,
                                                                            String,
                                                                            {
                                                                              _ | Dyn
                                                                            },
                                                                            js2n.array.MaxItems
                                                                              0
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                          Array Dyn
                                                        ],
                                                },
                                            required = {},
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = {},
                        },
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.6.2-alpha.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          config = js2n.array.ArrayOf String,
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri = String,
                                                      from_address = String,
                                                      from_name = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.Const
                                                                    "default",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.21.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.21.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.21.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.21.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.21.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.21.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.21.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.21.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.21.allOf.1.definitions.selfServiceAfterVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.21.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.21.allOf.1.definitions.socket",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.21.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      domain_aliases =
                                                        js2n.array.Items
                                                            [
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        base_path =
                                                                          std.contract.Sequence
                                                                              [
                                                                                js2n.string.MinLength
                                                                                  1,
                                                                                js2n.string.Matches
                                                                                  "^/.*$"
                                                                              ],
                                                                        match_domain =
                                                                          js2n.string.MinLength
                                                                              1,
                                                                        scheme =
                                                                          std.contract.Sequence
                                                                              [
                                                                                std.enum.TagOrString,
                                                                                [|
                                                                                  'https,
                                                                                  'http
                                                                                |]
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        base_path =
                                                                          true,
                                                                        match_domain =
                                                                          true,
                                                                        scheme =
                                                                          true,
                                                                      },
                                                                }
                                                            ] js2n.Always,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.21.allOf.1.definitions.socket",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^[0-9]+(ns|us|ms|s|m|h)$",
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'elastic-apm,
                                                  'datadog,
                                                  'zipkin,
                                                  'jaeger
                                                |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                session =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  cookie =
                                                    std.contract.any_of
                                                        [
                                                          js2n.Null,
                                                          Bool,
                                                          Number,
                                                          String,
                                                          js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    domain =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.Null,
                                                                            Bool,
                                                                            Number,
                                                                            js2n.string.MinLength
                                                                              1,
                                                                            {
                                                                              _ | Dyn
                                                                            },
                                                                            Array
                                                                              Dyn
                                                                          ],
                                                                  },
                                                              required =
                                                                {
                                                                    domain =
                                                                      true,
                                                                  },
                                                            },
                                                          Array Dyn
                                                        ],
                                                },
                                            required = { cookie = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { session = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                serve =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  public =
                                                    std.contract.any_of
                                                        [
                                                          js2n.Null,
                                                          Bool,
                                                          Number,
                                                          String,
                                                          js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    domain_aliases =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.Null,
                                                                            Bool,
                                                                            Number,
                                                                            String,
                                                                            {
                                                                              _ | Dyn
                                                                            },
                                                                            js2n.array.MaxItems
                                                                              0
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                          Array Dyn
                                                        ],
                                                },
                                            required = {},
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = {},
                        },
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.6.3-alpha.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          config = js2n.array.ArrayOf String,
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri = String,
                                                      from_address = String,
                                                      from_name = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.Const
                                                                    "default",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.22.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.22.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.22.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.22.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.22.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.22.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.22.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.22.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.22.allOf.1.definitions.selfServiceAfterVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.22.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.22.allOf.1.definitions.socket",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.22.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      domain_aliases =
                                                        js2n.array.Items
                                                            [
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        base_path =
                                                                          std.contract.Sequence
                                                                              [
                                                                                js2n.string.MinLength
                                                                                  1,
                                                                                js2n.string.Matches
                                                                                  "^/.*$"
                                                                              ],
                                                                        match_domain =
                                                                          js2n.string.MinLength
                                                                              1,
                                                                        scheme =
                                                                          std.contract.Sequence
                                                                              [
                                                                                std.enum.TagOrString,
                                                                                [|
                                                                                  'https,
                                                                                  'http
                                                                                |]
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        base_path =
                                                                          true,
                                                                        match_domain =
                                                                          true,
                                                                        scheme =
                                                                          true,
                                                                      },
                                                                }
                                                            ] js2n.Always,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.22.allOf.1.definitions.socket",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^[0-9]+(ns|us|ms|s|m|h)$",
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'elastic-apm,
                                                  'datadog,
                                                  'zipkin,
                                                  'jaeger
                                                |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                session =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  cookie =
                                                    std.contract.any_of
                                                        [
                                                          js2n.Null,
                                                          Bool,
                                                          Number,
                                                          String,
                                                          js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    domain =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.Null,
                                                                            Bool,
                                                                            Number,
                                                                            js2n.string.MinLength
                                                                              1,
                                                                            {
                                                                              _ | Dyn
                                                                            },
                                                                            Array
                                                                              Dyn
                                                                          ],
                                                                  },
                                                              required =
                                                                {
                                                                    domain =
                                                                      true,
                                                                  },
                                                            },
                                                          Array Dyn
                                                        ],
                                                },
                                            required = { cookie = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { session = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                serve =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  public =
                                                    std.contract.any_of
                                                        [
                                                          js2n.Null,
                                                          Bool,
                                                          Number,
                                                          String,
                                                          js2n.record.Record
                                                            {
                                                              additional =
                                                                'Some Dyn,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    domain_aliases =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.Null,
                                                                            Bool,
                                                                            Number,
                                                                            String,
                                                                            {
                                                                              _ | Dyn
                                                                            },
                                                                            js2n.array.MaxItems
                                                                              0
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                          Array Dyn
                                                        ],
                                                },
                                            required = {},
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = {},
                        },
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.7.0-alpha.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          config = js2n.array.ArrayOf String,
                          cookies =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        domain = String,
                                        path = String,
                                        same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                      },
                                  required = {},
                                },
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri =
                                                        js2n.string.Matches
                                                            "^smtps?:\\/\\/.*",
                                                      from_address = String,
                                                      from_name = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.Const
                                                                    "default",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.23.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.23.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.23.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.23.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.23.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.23.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.23.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.23.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.23.allOf.1.definitions.selfServiceAfterVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.23.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_enabled =
                                                                                    Bool,
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.23.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.23.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.23.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      domain_aliases =
                                                        js2n.array.Items
                                                            [
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        base_path =
                                                                          std.contract.Sequence
                                                                              [
                                                                                js2n.string.MinLength
                                                                                  1,
                                                                                js2n.string.Matches
                                                                                  "^/.*$"
                                                                              ],
                                                                        match_domain =
                                                                          js2n.string.MinLength
                                                                              1,
                                                                        scheme =
                                                                          std.contract.Sequence
                                                                              [
                                                                                std.enum.TagOrString,
                                                                                [|
                                                                                  'https,
                                                                                  'http
                                                                                |]
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        base_path =
                                                                          true,
                                                                        match_domain =
                                                                          true,
                                                                        scheme =
                                                                          true,
                                                                      },
                                                                }
                                                            ] js2n.Always,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.23.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.23.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^[0-9]+(ns|us|ms|s|m|h)$",
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'instana,
                                                  'elastic-apm,
                                                  'datadog,
                                                  'zipkin,
                                                  'jaeger
                                                |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.7.1-alpha.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          config = js2n.array.ArrayOf String,
                          cookies =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        domain = String,
                                        path = String,
                                        same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                      },
                                  required = {},
                                },
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri =
                                                        js2n.string.Matches
                                                            "^smtps?:\\/\\/.*",
                                                      from_address = String,
                                                      from_name = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.Const
                                                                    "default",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.24.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.24.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.24.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.24.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.24.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.24.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.24.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.24.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.24.allOf.1.definitions.selfServiceAfterVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.24.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_enabled =
                                                                                    Bool,
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.24.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.24.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.24.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      domain_aliases =
                                                        js2n.array.Items
                                                            [
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        base_path =
                                                                          std.contract.Sequence
                                                                              [
                                                                                js2n.string.MinLength
                                                                                  1,
                                                                                js2n.string.Matches
                                                                                  "^/.*$"
                                                                              ],
                                                                        match_domain =
                                                                          js2n.string.MinLength
                                                                              1,
                                                                        scheme =
                                                                          std.contract.Sequence
                                                                              [
                                                                                std.enum.TagOrString,
                                                                                [|
                                                                                  'https,
                                                                                  'http
                                                                                |]
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        base_path =
                                                                          true,
                                                                        match_domain =
                                                                          true,
                                                                        scheme =
                                                                          true,
                                                                      },
                                                                }
                                                            ] js2n.Always,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.24.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.24.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^[0-9]+(ns|us|ms|s|m|h)$",
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'instana,
                                                  'elastic-apm,
                                                  'datadog,
                                                  'zipkin,
                                                  'jaeger
                                                |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.7.3-alpha.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          config = js2n.array.ArrayOf String,
                          cookies =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        domain = String,
                                        path = String,
                                        same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                      },
                                  required = {},
                                },
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri =
                                                        js2n.string.Matches
                                                            "^smtps?:\\/\\/.*",
                                                      from_address = String,
                                                      from_name = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.Const
                                                                    "default",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.25.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.25.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.25.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.25.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.25.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.25.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.25.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.25.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.25.allOf.1.definitions.selfServiceAfterVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.25.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_enabled =
                                                                                    Bool,
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.25.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.25.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.25.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      domain_aliases =
                                                        js2n.array.Items
                                                            [
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        base_path =
                                                                          std.contract.Sequence
                                                                              [
                                                                                js2n.string.MinLength
                                                                                  1,
                                                                                js2n.string.Matches
                                                                                  "^/.*$"
                                                                              ],
                                                                        match_domain =
                                                                          js2n.string.MinLength
                                                                              1,
                                                                        scheme =
                                                                          std.contract.Sequence
                                                                              [
                                                                                std.enum.TagOrString,
                                                                                [|
                                                                                  'https,
                                                                                  'http
                                                                                |]
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        base_path =
                                                                          true,
                                                                        match_domain =
                                                                          true,
                                                                        scheme =
                                                                          true,
                                                                      },
                                                                }
                                                            ] js2n.Always,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.25.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.25.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^[0-9]+(ns|us|ms|s|m|h)$",
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'instana,
                                                  'elastic-apm,
                                                  'datadog,
                                                  'zipkin,
                                                  'jaeger
                                                |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.7.4-alpha.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          config = js2n.array.ArrayOf String,
                          cookies =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        domain = String,
                                        path = String,
                                        same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                      },
                                  required = {},
                                },
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri =
                                                        js2n.string.Matches
                                                            "^smtps?:\\/\\/.*",
                                                      from_address = String,
                                                      from_name = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.Const
                                                                    "default",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.26.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.26.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.26.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.26.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.26.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.26.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.26.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.26.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.26.allOf.1.definitions.selfServiceAfterVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.26.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_enabled =
                                                                                    Bool,
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.26.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.26.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.26.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      domain_aliases =
                                                        js2n.array.Items
                                                            [
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        base_path =
                                                                          std.contract.Sequence
                                                                              [
                                                                                js2n.string.MinLength
                                                                                  1,
                                                                                js2n.string.Matches
                                                                                  "^/.*$"
                                                                              ],
                                                                        match_domain =
                                                                          js2n.string.MinLength
                                                                              1,
                                                                        scheme =
                                                                          std.contract.Sequence
                                                                              [
                                                                                std.enum.TagOrString,
                                                                                [|
                                                                                  'https,
                                                                                  'http
                                                                                |]
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        base_path =
                                                                          true,
                                                                        match_domain =
                                                                          true,
                                                                        scheme =
                                                                          true,
                                                                      },
                                                                }
                                                            ] js2n.Always,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.26.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.26.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^[0-9]+(ns|us|ms|s|m|h)$",
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'instana,
                                                  'elastic-apm,
                                                  'datadog,
                                                  'zipkin,
                                                  'jaeger
                                                |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.7.5-alpha.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          config = js2n.array.ArrayOf String,
                          cookies =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        domain = String,
                                        path = String,
                                        same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                      },
                                  required = {},
                                },
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri =
                                                        js2n.string.Matches
                                                            "^smtps?:\\/\\/.*",
                                                      from_address = String,
                                                      from_name = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.Const
                                                                    "default",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.27.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.27.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.27.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.27.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.27.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.27.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.27.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.27.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.27.allOf.1.definitions.selfServiceAfterVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.27.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_enabled =
                                                                                    Bool,
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.27.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.27.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.27.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      domain_aliases =
                                                        js2n.array.Items
                                                            [
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        base_path =
                                                                          std.contract.Sequence
                                                                              [
                                                                                js2n.string.MinLength
                                                                                  1,
                                                                                js2n.string.Matches
                                                                                  "^/.*$"
                                                                              ],
                                                                        match_domain =
                                                                          js2n.string.MinLength
                                                                              1,
                                                                        scheme =
                                                                          std.contract.Sequence
                                                                              [
                                                                                std.enum.TagOrString,
                                                                                [|
                                                                                  'https,
                                                                                  'http
                                                                                |]
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        base_path =
                                                                          true,
                                                                        match_domain =
                                                                          true,
                                                                        scheme =
                                                                          true,
                                                                      },
                                                                }
                                                            ] js2n.Always,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.27.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.27.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^[0-9]+(ns|us|ms|s|m|h)$",
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'instana,
                                                  'elastic-apm,
                                                  'datadog,
                                                  'zipkin,
                                                  'jaeger
                                                |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.7.6-alpha.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          config = js2n.array.ArrayOf String,
                          cookies =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        domain = String,
                                        path = String,
                                        same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                      },
                                  required = {},
                                },
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri =
                                                        js2n.string.Matches
                                                            "^smtps?:\\/\\/.*",
                                                      from_address = String,
                                                      from_name = String,
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.Const
                                                                    "default",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.28.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.28.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.28.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.28.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.28.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.28.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.28.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.28.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.28.allOf.1.definitions.selfServiceAfterVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.28.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_enabled =
                                                                                    Bool,
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.28.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.28.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.28.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      domain_aliases =
                                                        js2n.array.Items
                                                            [
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        base_path =
                                                                          std.contract.Sequence
                                                                              [
                                                                                js2n.string.MinLength
                                                                                  1,
                                                                                js2n.string.Matches
                                                                                  "^/.*$"
                                                                              ],
                                                                        match_domain =
                                                                          js2n.string.MinLength
                                                                              1,
                                                                        scheme =
                                                                          std.contract.Sequence
                                                                              [
                                                                                std.enum.TagOrString,
                                                                                [|
                                                                                  'https,
                                                                                  'http
                                                                                |]
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        base_path =
                                                                          true,
                                                                        match_domain =
                                                                          true,
                                                                        scheme =
                                                                          true,
                                                                      },
                                                                }
                                                            ] js2n.Always,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.28.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.28.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^[0-9]+(ns|us|ms|s|m|h)$",
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'instana,
                                                  'elastic-apm,
                                                  'datadog,
                                                  'zipkin,
                                                  'jaeger
                                                |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                ciphers =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  algorithm =
                                                    js2n.OneOf
                                                        [
                                                          js2n.Const "aes",
                                                          js2n.Const
                                                            "xchacha20-poly1305"
                                                        ],
                                                },
                                            required = { algorithm = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { ciphers = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                secrets =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Required [ "cipher" ],
                                        Array Dyn
                                      ],
                              },
                          required = { secrets = true, },
                        },
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.8.0-alpha.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          ciphers =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'xchacha20-poly1305,
                                                  'aes,
                                                  'noop
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          config = js2n.array.ArrayOf String,
                          cookies =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        domain = String,
                                        path = String,
                                        same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                      },
                                  required = {},
                                },
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri =
                                                        js2n.string.Matches
                                                            "^smtps?:\\/\\/.*",
                                                      from_address = String,
                                                      from_name = String,
                                                      headers = { _ | Dyn },
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.Const
                                                                    "default",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cipher =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (std.contract.Sequence
                                                    [
                                                      js2n.string.MaxLength 32,
                                                      js2n.string.MinLength 32
                                                    ])
                                              ],
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.29.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.29.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.29.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.29.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.29.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.29.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.29.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.29.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    required_aal =
                                                                      refs."oneOf.29.allOf.1.definitions.featureRequiredAal",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.29.allOf.1.definitions.selfServiceAfterVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      lookup_secret =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.29.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_enabled =
                                                                                    Bool,
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      totp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  issuer =
                                                                                    String,
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      webauthn =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.IfThenElse
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Record
                                                                      {
                                                                        additional =
                                                                          'Some
                                                                              Dyn,
                                                                        patterns =
                                                                          {},
                                                                        properties =
                                                                          {
                                                                              enabled =
                                                                                js2n.Const
                                                                                    true,
                                                                            },
                                                                        required =
                                                                          {
                                                                              enabled =
                                                                                true,
                                                                            },
                                                                      },
                                                                    Array Dyn
                                                                  ])
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Required
                                                                      [
                                                                        "config"
                                                                      ],
                                                                    Array Dyn
                                                                  ])
                                                                js2n.Always,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        config =
                                                                          js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      rp =
                                                                                        js2n.record.Record
                                                                                            {
                                                                                              additional =
                                                                                                'Some
                                                                                                    Dyn,
                                                                                              patterns =
                                                                                                {},
                                                                                              properties =
                                                                                                {
                                                                                                    display_name =
                                                                                                      String,
                                                                                                    icon =
                                                                                                      String,
                                                                                                    id =
                                                                                                      String,
                                                                                                    origin =
                                                                                                      String,
                                                                                                  },
                                                                                              required =
                                                                                                {
                                                                                                    display_name =
                                                                                                      true,
                                                                                                    id =
                                                                                                      true,
                                                                                                  },
                                                                                            },
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              },
                                                                        enabled =
                                                                          Bool,
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.29.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.29.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.29.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      domain_aliases =
                                                        js2n.array.Items
                                                            [
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        base_path =
                                                                          std.contract.Sequence
                                                                              [
                                                                                js2n.string.MinLength
                                                                                  1,
                                                                                js2n.string.Matches
                                                                                  "^/.*$"
                                                                              ],
                                                                        match_domain =
                                                                          js2n.string.MinLength
                                                                              1,
                                                                        scheme =
                                                                          std.contract.Sequence
                                                                              [
                                                                                std.enum.TagOrString,
                                                                                [|
                                                                                  'https,
                                                                                  'http
                                                                                |]
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        base_path =
                                                                          true,
                                                                        match_domain =
                                                                          true,
                                                                        scheme =
                                                                          true,
                                                                      },
                                                                }
                                                            ] js2n.Always,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.29.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.29.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^[0-9]+(ns|us|ms|s|m|h)$",
                                        whoami =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      required_aal =
                                                        refs."oneOf.29.allOf.1.definitions.featureRequiredAal",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'instana,
                                                  'elastic-apm,
                                                  'datadog,
                                                  'zipkin,
                                                  'jaeger
                                                |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                ciphers =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  algorithm =
                                                    js2n.OneOf
                                                        [
                                                          js2n.Const "aes",
                                                          js2n.Const
                                                            "xchacha20-poly1305"
                                                        ],
                                                },
                                            required = { algorithm = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { ciphers = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                secrets =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Required [ "cipher" ],
                                        Array Dyn
                                      ],
                              },
                          required = { secrets = true, },
                        },
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.8.0-alpha.2", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          ciphers =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'xchacha20-poly1305,
                                                  'aes,
                                                  'noop
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          config = js2n.array.ArrayOf String,
                          cookies =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        domain = String,
                                        path = String,
                                        same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                      },
                                  required = {},
                                },
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri =
                                                        js2n.string.Matches
                                                            "^smtps?:\\/\\/.*",
                                                      from_address = String,
                                                      from_name = String,
                                                      headers = { _ | Dyn },
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.Const
                                                                    "default",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cipher =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (std.contract.Sequence
                                                    [
                                                      js2n.string.MaxLength 32,
                                                      js2n.string.MinLength 32
                                                    ])
                                              ],
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.30.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.30.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.30.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.30.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.30.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.30.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.30.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.30.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    required_aal =
                                                                      refs."oneOf.30.allOf.1.definitions.featureRequiredAal",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.30.allOf.1.definitions.selfServiceAfterVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      lookup_secret =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.30.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_enabled =
                                                                                    Bool,
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      totp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  issuer =
                                                                                    String,
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      webauthn =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.IfThenElse
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Record
                                                                      {
                                                                        additional =
                                                                          'Some
                                                                              Dyn,
                                                                        patterns =
                                                                          {},
                                                                        properties =
                                                                          {
                                                                              enabled =
                                                                                js2n.Const
                                                                                    true,
                                                                            },
                                                                        required =
                                                                          {
                                                                              enabled =
                                                                                true,
                                                                            },
                                                                      },
                                                                    Array Dyn
                                                                  ])
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Required
                                                                      [
                                                                        "config"
                                                                      ],
                                                                    Array Dyn
                                                                  ])
                                                                js2n.Always,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        config =
                                                                          js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      rp =
                                                                                        js2n.record.Record
                                                                                            {
                                                                                              additional =
                                                                                                'Some
                                                                                                    Dyn,
                                                                                              patterns =
                                                                                                {},
                                                                                              properties =
                                                                                                {
                                                                                                    display_name =
                                                                                                      String,
                                                                                                    icon =
                                                                                                      String,
                                                                                                    id =
                                                                                                      String,
                                                                                                    origin =
                                                                                                      String,
                                                                                                  },
                                                                                              required =
                                                                                                {
                                                                                                    display_name =
                                                                                                      true,
                                                                                                    id =
                                                                                                      true,
                                                                                                  },
                                                                                            },
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              },
                                                                        enabled =
                                                                          Bool,
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.30.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.30.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.30.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      domain_aliases =
                                                        js2n.array.Items
                                                            [
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        base_path =
                                                                          std.contract.Sequence
                                                                              [
                                                                                js2n.string.MinLength
                                                                                  1,
                                                                                js2n.string.Matches
                                                                                  "^/.*$"
                                                                              ],
                                                                        match_domain =
                                                                          js2n.string.MinLength
                                                                              1,
                                                                        scheme =
                                                                          std.contract.Sequence
                                                                              [
                                                                                std.enum.TagOrString,
                                                                                [|
                                                                                  'https,
                                                                                  'http
                                                                                |]
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        base_path =
                                                                          true,
                                                                        match_domain =
                                                                          true,
                                                                        scheme =
                                                                          true,
                                                                      },
                                                                }
                                                            ] js2n.Always,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.30.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.30.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^[0-9]+(ns|us|ms|s|m|h)$",
                                        whoami =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      required_aal =
                                                        refs."oneOf.30.allOf.1.definitions.featureRequiredAal",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'instana,
                                                  'elastic-apm,
                                                  'datadog,
                                                  'zipkin,
                                                  'jaeger
                                                |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                ciphers =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  algorithm =
                                                    js2n.OneOf
                                                        [
                                                          js2n.Const "aes",
                                                          js2n.Const
                                                            "xchacha20-poly1305"
                                                        ],
                                                },
                                            required = { algorithm = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { ciphers = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                secrets =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Required [ "cipher" ],
                                        Array Dyn
                                      ],
                              },
                          required = { secrets = true, },
                        },
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.8.0-alpha.3", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          ciphers =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'xchacha20-poly1305,
                                                  'aes,
                                                  'noop
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          config = js2n.array.ArrayOf String,
                          cookies =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        domain = String,
                                        path = String,
                                        same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                      },
                                  required = {},
                                },
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri =
                                                        js2n.string.Matches
                                                            "^smtps?:\\/\\/.*",
                                                      from_address = String,
                                                      from_name = String,
                                                      headers = { _ | Dyn },
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^[0-9]+(ns|us|ms|s|m|h)$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.Const
                                                                    "default",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cipher =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (std.contract.Sequence
                                                    [
                                                      js2n.string.MaxLength 32,
                                                      js2n.string.MinLength 32
                                                    ])
                                              ],
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.31.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.31.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.31.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.31.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.31.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.31.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.31.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.31.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    required_aal =
                                                                      refs."oneOf.31.allOf.1.definitions.featureRequiredAal",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.31.allOf.1.definitions.selfServiceAfterVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^[0-9]+(ns|us|ms|s|m|h)$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      lookup_secret =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.31.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_enabled =
                                                                                    Bool,
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      totp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  issuer =
                                                                                    String,
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      webauthn =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.IfThenElse
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Record
                                                                      {
                                                                        additional =
                                                                          'Some
                                                                              Dyn,
                                                                        patterns =
                                                                          {},
                                                                        properties =
                                                                          {
                                                                              enabled =
                                                                                js2n.Const
                                                                                    true,
                                                                            },
                                                                        required =
                                                                          {
                                                                              enabled =
                                                                                true,
                                                                            },
                                                                      },
                                                                    Array Dyn
                                                                  ])
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Required
                                                                      [
                                                                        "config"
                                                                      ],
                                                                    Array Dyn
                                                                  ])
                                                                js2n.Always,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        config =
                                                                          js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      rp =
                                                                                        js2n.record.Record
                                                                                            {
                                                                                              additional =
                                                                                                'Some
                                                                                                    Dyn,
                                                                                              patterns =
                                                                                                {},
                                                                                              properties =
                                                                                                {
                                                                                                    display_name =
                                                                                                      String,
                                                                                                    icon =
                                                                                                      String,
                                                                                                    id =
                                                                                                      String,
                                                                                                    origin =
                                                                                                      String,
                                                                                                  },
                                                                                              required =
                                                                                                {
                                                                                                    display_name =
                                                                                                      true,
                                                                                                    id =
                                                                                                      true,
                                                                                                  },
                                                                                            },
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              },
                                                                        enabled =
                                                                          Bool,
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.31.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.31.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.31.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      domain_aliases =
                                                        js2n.array.Items
                                                            [
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        base_path =
                                                                          std.contract.Sequence
                                                                              [
                                                                                js2n.string.MinLength
                                                                                  1,
                                                                                js2n.string.Matches
                                                                                  "^/.*$"
                                                                              ],
                                                                        match_domain =
                                                                          js2n.string.MinLength
                                                                              1,
                                                                        scheme =
                                                                          std.contract.Sequence
                                                                              [
                                                                                std.enum.TagOrString,
                                                                                [|
                                                                                  'https,
                                                                                  'http
                                                                                |]
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        base_path =
                                                                          true,
                                                                        match_domain =
                                                                          true,
                                                                        scheme =
                                                                          true,
                                                                      },
                                                                }
                                                            ] js2n.Always,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      socket =
                                                        refs."oneOf.31.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.31.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^[0-9]+(ns|us|ms|s|m|h)$",
                                        whoami =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      required_aal =
                                                        refs."oneOf.31.allOf.1.definitions.featureRequiredAal",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'instana,
                                                  'elastic-apm,
                                                  'datadog,
                                                  'zipkin,
                                                  'jaeger
                                                |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                selfservice =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  flows =
                                                    js2n.OneOf
                                                        [
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        verification =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        verification =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ],
                                                          std.contract.any_of
                                                            [
                                                              js2n.Null,
                                                              Bool,
                                                              Number,
                                                              String,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        recovery =
                                                                          std.contract.any_of
                                                                              [
                                                                                js2n.Null,
                                                                                Bool,
                                                                                Number,
                                                                                String,
                                                                                js2n.record.Record
                                                                                  {
                                                                                    additional =
                                                                                      'Some
                                                                                          Dyn,
                                                                                    patterns =
                                                                                      {},
                                                                                    properties =
                                                                                      {
                                                                                          enabled =
                                                                                            js2n.Const
                                                                                                true,
                                                                                        },
                                                                                    required =
                                                                                      {
                                                                                          enabled =
                                                                                            true,
                                                                                        },
                                                                                  },
                                                                                Array
                                                                                  Dyn
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        recovery =
                                                                          true,
                                                                      },
                                                                },
                                                              Array Dyn
                                                            ]
                                                        ],
                                                },
                                            required = { flows = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { selfservice = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Required [ "courier" ],
                      Array Dyn
                    ]) js2n.Always,
                js2n.IfThenElse
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                ciphers =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Record
                                          {
                                            additional = 'Some Dyn,
                                            patterns = {},
                                            properties =
                                              {
                                                  algorithm =
                                                    js2n.OneOf
                                                        [
                                                          js2n.Const "aes",
                                                          js2n.Const
                                                            "xchacha20-poly1305"
                                                        ],
                                                },
                                            required = { algorithm = true, },
                                          },
                                        Array Dyn
                                      ],
                              },
                          required = { ciphers = true, },
                        },
                      Array Dyn
                    ])
                  (std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                secrets =
                                  std.contract.any_of
                                      [
                                        js2n.Null,
                                        Bool,
                                        Number,
                                        String,
                                        js2n.record.Required [ "cipher" ],
                                        Array Dyn
                                      ],
                              },
                          required = { secrets = true, },
                        },
                      Array Dyn
                    ]) js2n.Always,
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.8.2-alpha.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          ciphers =
                            js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'xchacha20-poly1305,
                                                  'aes,
                                                  'noop
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          config = js2n.array.ArrayOf String,
                          cookies =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        domain = String,
                                        path = String,
                                        same_site =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'None, 'Lax, 'Strict |]
                                              ],
                                      },
                                  required = {},
                                },
                          courier =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        smtp =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      connection_uri =
                                                        js2n.string.Matches
                                                            "^smtps?:\\/\\/.*",
                                                      from_address = String,
                                                      from_name = String,
                                                      headers = { _ | Dyn },
                                                    },
                                                required =
                                                  { connection_uri = true, },
                                              },
                                        template_override_path = String,
                                      },
                                  required = { smtp = true, },
                                },
                          dev = Bool,
                          dsn = String,
                          expose-metrics-port =
                            std.contract.Sequence
                                [
                                  std.number.Integer,
                                  js2n.number.Maximum 65535,
                                  js2n.number.Minimum 0
                                ],
                          hashers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        algorithm =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'bcrypt, 'argon2 |]
                                              ],
                                        argon2 =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      dedicated_memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      expected_deviation =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      expected_duration =
                                                        js2n.string.Matches
                                                            "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                      iterations =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      key_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                      memory =
                                                        js2n.string.Matches
                                                            "^[0-9]+(B|KB|MB|GB|TB|PB|EB)",
                                                      parallelism =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      salt_length =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Minimum
                                                                16
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        bcrypt =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cost =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                31,
                                                              js2n.number.Minimum
                                                                4
                                                            ],
                                                    },
                                                required = { cost = true, },
                                              },
                                      },
                                  required = {},
                                },
                          help = Bool,
                          identity =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_schema_url = String,
                                        schemas =
                                          js2n.array.ArrayOf
                                              (std.contract.Sequence
                                                [
                                                  std.contract.not
                                                    (js2n.record.Record
                                                      {
                                                        additional =
                                                          'Some js2n.Always,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              id =
                                                                js2n.Const
                                                                    "default",
                                                            },
                                                        required = {},
                                                      }),
                                                  js2n.record.Record
                                                    {
                                                      additional = 'Some Dyn,
                                                      patterns = {},
                                                      properties =
                                                        {
                                                            id = String,
                                                            url = String,
                                                          },
                                                      required =
                                                        {
                                                            id = true,
                                                            url = true,
                                                          },
                                                    }
                                                ]),
                                      },
                                  required = { default_schema_url = true, },
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          secrets =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cipher =
                                          std.contract.Sequence
                                              [
                                                js2n.array.MinItems 1,
                                                js2n.array.ArrayOf
                                                  (std.contract.Sequence
                                                    [
                                                      js2n.string.MaxLength 32,
                                                      js2n.string.MinLength 32
                                                    ])
                                              ],
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                        "default" =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf
                                                  (js2n.string.MinLength 16)
                                              ],
                                      },
                                  required = {},
                                },
                          selfservice =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        default_browser_return_url =
                                          refs."oneOf.32.allOf.1.definitions.defaultReturnTo",
                                        flows =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      error =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      login =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.32.allOf.1.definitions.selfServiceAfterLogin",
                                                                    before =
                                                                      refs."oneOf.32.allOf.1.definitions.selfServiceBeforeLogin",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      logout =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  default_browser_return_url =
                                                                                    refs."oneOf.32.allOf.1.definitions.defaultReturnTo",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                  },
                                                              required = {},
                                                            },
                                                      recovery =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.32.allOf.1.definitions.selfServiceAfterRecovery",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      registration =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.32.allOf.1.definitions.selfServiceAfterRegistration",
                                                                    before =
                                                                      refs."oneOf.32.allOf.1.definitions.selfServiceBeforeRegistration",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      settings =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.32.allOf.1.definitions.selfServiceAfterSettings",
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    privileged_session_max_age =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    required_aal =
                                                                      refs."oneOf.32.allOf.1.definitions.featureRequiredAal",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                      verification =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    after =
                                                                      refs."oneOf.32.allOf.1.definitions.selfServiceAfterVerification",
                                                                    enabled =
                                                                      Bool,
                                                                    lifespan =
                                                                      js2n.string.Matches
                                                                          "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                    ui_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        methods =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      link =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'Some
                                                                                  Dyn,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  lifespan =
                                                                                    js2n.string.Matches
                                                                                        "^([0-9]+(ns|us|ms|s|m|h))+$",
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      lookup_secret =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      oidc =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  providers =
                                                                                    js2n.array.ArrayOf
                                                                                        (std.contract.Sequence
                                                                                          [
                                                                                            refs."oneOf.32.allOf.1.definitions.selfServiceOIDCProvider",
                                                                                            {
                                                                                              _ | Dyn
                                                                                            }
                                                                                          ]),
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      password =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  haveibeenpwned_enabled =
                                                                                    Bool,
                                                                                  haveibeenpwned_host =
                                                                                    String,
                                                                                  ignore_network_errors =
                                                                                    Bool,
                                                                                  max_breaches =
                                                                                    std.contract.Sequence
                                                                                        [
                                                                                          std.number.Integer,
                                                                                          js2n.number.Maximum
                                                                                            100,
                                                                                          js2n.number.Minimum
                                                                                            0
                                                                                        ],
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      profile =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      totp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    config =
                                                                      js2n.record.Record
                                                                          {
                                                                            additional =
                                                                              'None,
                                                                            patterns =
                                                                              {},
                                                                            properties =
                                                                              {
                                                                                  issuer =
                                                                                    String,
                                                                                },
                                                                            required =
                                                                              {},
                                                                          },
                                                                    enabled =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      webauthn =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.IfThenElse
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Record
                                                                      {
                                                                        additional =
                                                                          'Some
                                                                              Dyn,
                                                                        patterns =
                                                                          {},
                                                                        properties =
                                                                          {
                                                                              enabled =
                                                                                js2n.Const
                                                                                    true,
                                                                            },
                                                                        required =
                                                                          {
                                                                              enabled =
                                                                                true,
                                                                            },
                                                                      },
                                                                    Array Dyn
                                                                  ])
                                                                (std.contract.any_of
                                                                  [
                                                                    js2n.Null,
                                                                    Bool,
                                                                    Number,
                                                                    String,
                                                                    js2n.record.Required
                                                                      [
                                                                        "config"
                                                                      ],
                                                                    Array Dyn
                                                                  ])
                                                                js2n.Always,
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        config =
                                                                          js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      rp =
                                                                                        js2n.record.Record
                                                                                            {
                                                                                              additional =
                                                                                                'Some
                                                                                                    Dyn,
                                                                                              patterns =
                                                                                                {},
                                                                                              properties =
                                                                                                {
                                                                                                    display_name =
                                                                                                      String,
                                                                                                    icon =
                                                                                                      String,
                                                                                                    id =
                                                                                                      String,
                                                                                                    origin =
                                                                                                      String,
                                                                                                  },
                                                                                              required =
                                                                                                {
                                                                                                    display_name =
                                                                                                      true,
                                                                                                    id =
                                                                                                      true,
                                                                                                  },
                                                                                            },
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              },
                                                                        enabled =
                                                                          Bool,
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        whitelisted_return_urls =
                                          std.contract.Sequence
                                              [
                                                js2n.array.UniqueItems,
                                                js2n.array.ArrayOf String
                                              ],
                                      },
                                  required =
                                    { default_browser_return_url = true, },
                                },
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        admin =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url = String,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.32.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.32.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        public =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      base_url =
                                                        refs."oneOf.32.allOf.1.definitions.baseUrl",
                                                      cors =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    allow_credentials =
                                                                      Bool,
                                                                    allowed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    allowed_methods =
                                                                      js2n.array.ArrayOf
                                                                          (std.contract.Sequence
                                                                            [
                                                                              std.enum.TagOrString,
                                                                              [|
                                                                                'TRACE,
                                                                                'OPTIONS,
                                                                                'HEAD,
                                                                                'CONNECT,
                                                                                'DELETE,
                                                                                'PATCH,
                                                                                'PUT,
                                                                                'GET,
                                                                                'POST
                                                                              |]
                                                                            ]),
                                                                    allowed_origins =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.array.UniqueItems,
                                                                            js2n.array.ArrayOf
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  js2n.string.MinLength
                                                                                    1,
                                                                                  std.contract.any_of
                                                                                    [
                                                                                      String,
                                                                                      js2n.Const
                                                                                        "*"
                                                                                    ],
                                                                                  std.contract.not
                                                                                    (js2n.string.Matches
                                                                                      ".*\\*.*\\*.*")
                                                                                ])
                                                                          ],
                                                                    debug =
                                                                      Bool,
                                                                    enabled =
                                                                      Bool,
                                                                    exposed_headers =
                                                                      js2n.array.ArrayOf
                                                                          String,
                                                                    max_age =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    options_passthrough =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      domain_aliases =
                                                        js2n.array.Items
                                                            [
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'None,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        base_path =
                                                                          std.contract.Sequence
                                                                              [
                                                                                js2n.string.MinLength
                                                                                  1,
                                                                                js2n.string.Matches
                                                                                  "^/.*$"
                                                                              ],
                                                                        match_domain =
                                                                          js2n.string.MinLength
                                                                              1,
                                                                        scheme =
                                                                          std.contract.Sequence
                                                                              [
                                                                                std.enum.TagOrString,
                                                                                [|
                                                                                  'https,
                                                                                  'http
                                                                                |]
                                                                              ],
                                                                      },
                                                                  required =
                                                                    {
                                                                        base_path =
                                                                          true,
                                                                        match_domain =
                                                                          true,
                                                                        scheme =
                                                                          true,
                                                                      },
                                                                }
                                                            ] js2n.Always,
                                                      host = String,
                                                      port =
                                                        std.contract.Sequence
                                                            [
                                                              std.number.Integer,
                                                              js2n.number.Maximum
                                                                65535,
                                                              js2n.number.Minimum
                                                                1
                                                            ],
                                                      request_log =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    disable_for_health =
                                                                      Bool,
                                                                  },
                                                              required = {},
                                                            },
                                                      socket =
                                                        refs."oneOf.32.allOf.1.definitions.socket",
                                                      tls =
                                                        refs."oneOf.32.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          session =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      domain = String,
                                                      name = String,
                                                      path = String,
                                                      persistent = Bool,
                                                      same_site =
                                                        std.contract.Sequence
                                                            [
                                                              std.enum.TagOrString,
                                                              [|
                                                                'None,
                                                                'Lax,
                                                                'Strict
                                                              |]
                                                            ],
                                                    },
                                                required = {},
                                              },
                                        lifespan =
                                          js2n.string.Matches
                                              "^([0-9]+(ns|us|ms|s|m|h))+$",
                                        whoami =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      required_aal =
                                                        refs."oneOf.32.allOf.1.definitions.featureRequiredAal",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          sqa-opt-out = Bool,
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'instana,
                                                  'elastic-apm,
                                                  'datadog,
                                                  'zipkin,
                                                  'jaeger
                                                |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                          watch-courier = Bool,
                        },
                    required =
                      { dsn = true, identity = true, selfservice = true, },
                  }
              ],
            std.contract.Sequence
              [
                js2n.OneOf
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Record
                          {
                            additional = 'Some Dyn,
                            patterns = {},
                            properties = { version = js2n.string.MaxLength 0, },
                            required = { version = true, },
                          },
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { version = js2n.Always, },
                              required = { version = true, },
                            },
                          Array Dyn
                        ])
                  ],
                refs."oneOf.0.allOf.1",
                { _ | Dyn }
              ]
          ],
        { _ | Dyn }
      ]