# DO NOT EDIT
# This file was automatically generated using json-schema-to-nickel
let js2n
  = import "../lib/main.ncl"
  in
let rec refs
    = {
      "definitions.filetype_list" = Array String,
      "definitions.linter_list" = Array String,
      "definitions.template_string" = String,
    }
    in
  {
      actions
        | {
          definitions
            | Array
              {
                autogenerated_definition_path
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                description
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                display_name
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                enabled | Bool | optional,
                environment
                  | Array
                    {
                      list
                        | Array (std.contract.any_of [ Bool, Number, String ])
                        | optional,
                      name
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      "optional" | Bool | optional,
                      value
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      ..
                    }
                  | optional,
                id | std.contract.any_of [ Bool, Number, String ] | optional,
                interactive | String | optional,
                notify_on_error | Bool | optional,
                output_type | String | optional,
                packages_file
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                run | std.contract.any_of [ Bool, Number, String ] | optional,
                run_from
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                runtime | String | optional,
                shell | std.contract.any_of [ Bool, Number, String ] | optional,
                triggers
                  | Array
                    {
                      files
                        | Array (std.contract.any_of [ Bool, Number, String ])
                        | optional,
                      git_hooks
                        | Array (std.contract.any_of [ Bool, Number, String ])
                        | optional,
                      run
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      schedule
                        | std.contract.any_of
                          [
                            {
                              cron
                                | std.contract.any_of [ Bool, Number, String ]
                                | optional,
                              delay
                                | std.contract.any_of [ Bool, Number, String ]
                                | optional,
                              interval
                                | std.contract.any_of [ Bool, Number, String ]
                                | optional,
                              ..
                            },
                            String
                          ]
                        | optional,
                      ..
                    }
                  | optional,
                ..
              }
            | optional,
          disabled
            | Array (std.contract.any_of [ Bool, Number, String ])
            | optional,
          enabled
            | Array (
              std.contract.any_of
                [
                  String,
                  {
                    _ | {
                      name
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      ..
                    }
                  }
                ]
            )
            | optional,
          output_level | String | optional,
          ..
        }
        | optional,
      api
        | {
          address | std.contract.any_of [ Bool, Number, String ] | optional,
          org | std.contract.any_of [ Bool, Number, String ] | optional,
          ..
        }
        | optional,
      cli
        | {
          check_for_upgrades | Bool | optional,
          options
            | Array
              {
                args | std.contract.any_of [ Bool, Number, String ] | optional,
                commands
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                ..
              }
            | optional,
          sha256
            | {
              darwin_arm64
                | std.contract.any_of [ Bool, Number, String ]
                | optional,
              darwin_x86_64
                | std.contract.any_of [ Bool, Number, String ]
                | optional,
              linux_arm64
                | std.contract.any_of [ Bool, Number, String ]
                | optional,
              linux_x86_64
                | std.contract.any_of [ Bool, Number, String ]
                | optional,
              mingw_x86_64
                | std.contract.any_of [ Bool, Number, String ]
                | optional,
              windows_x86_64
                | std.contract.any_of [ Bool, Number, String ]
                | optional,
              ..
            }
            | optional,
          shell_hooks
            | {
              enforce | Bool | optional,
              path_add
                | Array (std.contract.any_of [ Bool, Number, String ])
                | optional,
              ..
            }
            | optional,
          version | std.contract.any_of [ Bool, Number, String ] | optional,
          ..
        }
        | optional,
      daemon
        | {
          check_for_upgrades | Bool | optional,
          idle_timeout
            | std.contract.any_of [ Bool, Number, String ]
            | optional,
          log_level | String | optional,
          monitor_repository | Bool | optional,
          ..
        }
        | optional,
      downloads
        | Array
          {
            args
              | { _ | std.contract.any_of [ Bool, Number, String ] }
              | optional,
            downloads
              | Array
                {
                  cpu
                    | { _ | std.contract.any_of [ Bool, Number, String ] }
                    | optional,
                  gpg | std.contract.any_of [ Bool, Number, String ] | optional,
                  os
                    | { _ | std.contract.any_of [ Bool, Number, String ] }
                    | optional,
                  sha256
                    | std.contract.any_of [ Bool, Number, String ]
                    | optional,
                  strip_components | std.number.Integer | optional,
                  url | std.contract.any_of [ Bool, Number, String ] | optional,
                  version
                    | std.contract.any_of [ Bool, Number, String ]
                    | optional,
                  ..
                }
              | optional,
            executable | Bool | optional,
            name | std.contract.any_of [ Bool, Number, String ] | optional,
            rename_single_file | Bool | optional,
            version | std.contract.any_of [ Bool, Number, String ] | optional,
            ..
          }
        | optional,
      environments
        | Array
          {
            environment
              | Array
                {
                  list
                    | Array (std.contract.any_of [ Bool, Number, String ])
                    | optional,
                  name
                    | std.contract.any_of [ Bool, Number, String ]
                    | optional,
                  "optional" | Bool | optional,
                  value
                    | std.contract.any_of [ Bool, Number, String ]
                    | optional,
                  ..
                }
              | optional,
            name | std.contract.any_of [ Bool, Number, String ] | optional,
            ..
          }
        | optional,
      lint
        | {
          bazel
            | {
              all_targets_query
                | std.contract.any_of [ Bool, Number, String ]
                | optional,
              compiler_override_paths
                | Array
                  {
                    cpu | String | optional,
                    os | String | optional,
                    path
                      | std.contract.any_of [ Bool, Number, String ]
                      | optional,
                    ..
                  }
                | optional,
              paths
                | {
                  system
                    | Array (std.contract.any_of [ Bool, Number, String ])
                    | optional,
                  workspace
                    | Array (std.contract.any_of [ Bool, Number, String ])
                    | optional,
                  ..
                }
                | optional,
              ..
            }
            | optional,
          comment_formats
            | Array
              {
                leading_delimiter
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                name | std.contract.any_of [ Bool, Number, String ] | optional,
                trailing_delimiter
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                ..
              }
            | optional,
          compile_commands | String | optional,
          compile_commands_roots
            | Array (std.contract.any_of [ Bool, Number, String ])
            | optional,
          default_max_file_size | std.number.Integer | optional,
          definitions
            | Array (
              std.contract.Sequence
                [
                  js2n.record.DependentContracts
                    {
                      download =
                        std.contract.not
                            (std.contract.any_of
                              [
                                js2n.Null,
                                Bool,
                                Number,
                                String,
                                js2n.record.Required [ "package" ],
                                Array Dyn
                              ]),
                      package =
                        std.contract.Sequence
                            [
                              std.contract.any_of
                                [
                                  js2n.Null,
                                  Bool,
                                  Number,
                                  String,
                                  js2n.record.Required [ "runtime" ],
                                  Array Dyn
                                ],
                              std.contract.not
                                (std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Required [ "download" ],
                                    Array Dyn
                                  ])
                            ],
                    },
                  {
                    affects_cache
                      | Array (std.contract.any_of [ Bool, Number, String ])
                      | optional,
                    allow_empty_files
                      | Bool
                      | doc "Whether or not this will be run on empty files"
                      | optional,
                    autogenerated_definition_path
                      | std.contract.any_of [ Bool, Number, String ]
                      | optional,
                    batch
                      | Bool
                      | doc m%"
                        Whether linter invocations for multiple targets should be batched; used to cut down on per-invocation overhead
                        
                        Causes every token containing ${target} to be expanded multiple times, e.g. 'my_linter target=${target}' would be expanded into 'my_linter target=target1 target=target2 ... target=targetN'
                      "%
                      | optional,
                    cache_results
                      | Bool
                      | doc "Whether Trunk can cache results for this linter"
                      | optional,
                    cache_ttl
                      | std.contract.any_of [ Bool, Number, String ]
                      | optional,
                    command
                      | Array (std.contract.any_of [ Bool, Number, String ])
                      | doc "argv of the command to invoke the linter with"
                      | optional,
                    commands
                      | Array
                        {
                          allow_empty_files
                            | Bool
                            | doc "Whether or not this will be run on empty files"
                            | optional,
                          batch
                            | Bool
                            | doc m%"
                              Whether linter invocations for multiple targets should be batched; used to cut down on per-invocation overhead
                              
                              Causes every token containing ${target} to be expanded multiple times, e.g. 'my_linter target=${target}' would be expanded into 'my_linter target=target1 target=target2 ... target=targetN'
                            "%
                            | optional,
                          cache_results
                            | Bool
                            | doc "Whether Trunk can cache results for this linter"
                            | optional,
                          cache_ttl
                            | std.contract.any_of [ Bool, Number, String ]
                            | optional,
                          direct_configs
                            | Array (
                              std.contract.any_of [ Bool, Number, String ]
                            )
                            | optional,
                          disable_upstream
                            | Bool
                            | doc "Whether or not we support linting the upstream version of a target"
                            | optional,
                          enabled
                            | Bool
                            | doc "Whether the command is enabled to run when the linter is run. Allows some commands of a linter to be run by default without others."
                            | optional,
                          error_codes
                            | Array std.number.Integer
                            | doc "Exit codes implying the linter experienced an internal error"
                            | optional,
                          files
                            | Array (
                              std.contract.any_of [ Bool, Number, String ]
                            )
                            | optional,
                          fix_prompt
                            | std.contract.any_of [ Bool, Number, String ]
                            | optional,
                          fix_verb
                            | std.contract.any_of [ Bool, Number, String ]
                            | optional,
                          formatter
                            | Bool
                            | doc "Whether or not this linter will be run by 'trunk fmt'; default: false"
                            | optional,
                          idempotent | Bool | optional,
                          in_place
                            | Bool
                            | doc "Whether the linter modifies ${target} files in-place."
                            | optional,
                          is_security | Bool | optional,
                          max_concurrency | std.number.Integer | optional,
                          max_file_size | std.number.Integer | optional,
                          name
                            | std.contract.any_of [ Bool, Number, String ]
                            | optional,
                          no_issues_codes | Array std.number.Integer | optional,
                          output
                            | String
                            | doc "Output type of this linter; controls how `trunk` parses its output"
                            | optional,
                          parse_regex
                            | std.contract.any_of [ Bool, Number, String ]
                            | optional,
                          parser
                            | {
                              run
                                | std.contract.any_of [ Bool, Number, String ]
                                | optional,
                              runtime | String | optional,
                              ..
                            }
                            | optional,
                          platforms | Array String | optional,
                          prepare_run
                            | std.contract.any_of [ Bool, Number, String ]
                            | doc "Command to initialize the linter with"
                            | optional,
                          read_output_from
                            | String
                            | doc m%"
                              Tell parser where to expect output from for reading (if 'tmpfile', then the linter should write its output to ${tmpfile})
                              
                              NOTE: this field is only respected for type=sarif linters currently
                            "%
                            | optional,
                          run
                            | refs."definitions.template_string"
                            | doc "Command to invoke the linter with (write as if you were typing into your shell)"
                            | optional,
                          run_from
                            | std.contract.any_of [ Bool, Number, String ]
                            | optional,
                          run_from_root_target
                            | std.contract.any_of [ Bool, Number, String ]
                            | doc "The nearest target to search for when 'run_linter_from' is 'root_file' or 'root_directory'"
                            | optional,
                          run_linter_from
                            | String
                            | doc m%"
                              What to use as the current working directory:
                                * workspace - the root of the repository
                                * parent_directory - the directory containing the linter target
                                * directory - the linter target itself, with the condition that the linter target is a directory itself
                                * root_file - the nearest directory containing 'run_from_root_target', e.g. the nearest directory containing a go.mod file
                                * root_directory - the nearest directory matching 'run_from_root_target', e.g. the nearest src/ directory
                              
                            "%
                            | optional,
                          run_when | Array String | optional,
                          sandbox_type | String | optional,
                          std_in
                            | Bool
                            | doc "Whether or not this linter takes its input from stdin"
                            | optional,
                          success_codes
                            | Array std.number.Integer
                            | doc "Exit codes corresponding to no issues found or issues found"
                            | optional,
                          target
                            | std.contract.any_of [ Bool, Number, String ]
                            | optional,
                          unformatted_level | String | optional,
                          verbatim_message | Bool | optional,
                          version
                            | std.contract.any_of [ Bool, Number, String ]
                            | optional,
                          ..
                        }
                      | optional,
                    deprecated
                      | std.contract.any_of [ Bool, Number, String ]
                      | optional,
                    description
                      | std.contract.any_of [ Bool, Number, String ]
                      | optional,
                    direct_configs
                      | Array (std.contract.any_of [ Bool, Number, String ])
                      | optional,
                    disable_upstream
                      | Bool
                      | doc "Whether or not we support linting the upstream version of a target"
                      | optional,
                    disabled | Bool | optional,
                    download
                      | std.contract.any_of [ Bool, Number, String ]
                      | doc "The download containing this linter (i.e. the `name` of an entry in `downloads`)"
                      | optional,
                    enabled
                      | Bool
                      | doc "Whether the command is enabled to run when the linter is run. Allows some commands of a linter to be run by default without others."
                      | optional,
                    environment
                      | Array (
                        std.contract.Sequence
                          [
                            js2n.OneOf
                              [
                                std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Required [ "name", "value" ],
                                    Array Dyn
                                  ],
                                std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Required [ "list", "name" ],
                                    Array Dyn
                                  ]
                              ],
                            {
                              list
                                | Array refs."definitions.template_string"
                                | doc "The envvar will be set to the `:`-joined list"
                                | optional,
                              name
                                | std.contract.any_of [ Bool, Number, String ]
                                | optional,
                              "optional" | Bool | optional,
                              value
                                | refs."definitions.template_string"
                                | optional,
                              ..
                            }
                          ]
                      )
                      | doc "Environment variables set when `trunk` runs the linter"
                      | optional,
                    error_codes
                      | Array std.number.Integer
                      | doc "Exit codes implying the linter experienced an internal error"
                      | optional,
                    extra_packages
                      | Array (std.contract.any_of [ Bool, Number, String ])
                      | doc "Extra packages needed to run this linter; also installed using the runtime's package manager"
                      | optional,
                    files
                      | refs."definitions.filetype_list"
                      | doc "Filetypes to run this linter on"
                      | optional,
                    formatter
                      | Bool
                      | doc "Whether or not this linter will be run by 'trunk fmt'; default: false"
                      | optional,
                    good_without_config | Bool | optional,
                    hold_the_line | Bool | optional,
                    idempotent | Bool | optional,
                    in_place
                      | Bool
                      | doc "Whether the linter modifies ${target} files in-place."
                      | optional,
                    include_lfs
                      | Bool
                      | doc "Whether or not this linter can handle LFS files; default: false"
                      | optional,
                    include_scanner_type | String | optional,
                    is_manual | Bool | optional,
                    is_recommended | Bool | optional,
                    issue_url_format
                      | std.contract.any_of [ Bool, Number, String ]
                      | optional,
                    known_bad_versions
                      | Array (std.contract.any_of [ Bool, Number, String ])
                      | optional,
                    known_good_version
                      | std.contract.any_of [ Bool, Number, String ]
                      | optional,
                    main_tool
                      | std.contract.any_of [ Bool, Number, String ]
                      | optional,
                    name
                      | std.contract.any_of [ Bool, Number, String ]
                      | doc "Linter ID; use this in fields like `enabled` to reference this linter"
                      | optional,
                    package
                      | std.contract.any_of [ Bool, Number, String ]
                      | doc "The package containing this linter; installed using the runtime's package manager"
                      | optional,
                    path_format | String | optional,
                    plugin_url
                      | std.contract.any_of [ Bool, Number, String ]
                      | optional,
                    prepare_command
                      | Array (std.contract.any_of [ Bool, Number, String ])
                      | doc "argv of the command to initialize the linter with"
                      | optional,
                    query_compile_commands | Bool | optional,
                    read_output_from
                      | String
                      | doc m%"
                        Tell parser where to expect output from for reading (if 'tmpfile', then the linter should write its output to ${tmpfile})
                        
                        NOTE: this field is only respected for type=sarif linters currently
                      "%
                      | optional,
                    run_from_root_file
                      | std.contract.any_of [ Bool, Number, String ]
                      | optional,
                    run_from_root_target
                      | std.contract.any_of [ Bool, Number, String ]
                      | doc "The nearest target to search for when 'run_linter_from' is 'root_file' or 'root_directory'"
                      | optional,
                    run_linter_from
                      | String
                      | doc m%"
                        What to use as the current working directory:
                          * workspace - the root of the repository
                          * parent_directory - the directory containing the linter target
                          * directory - the linter target itself, with the condition that the linter target is a directory itself
                          * root_file - the nearest directory containing 'run_from_root_target', e.g. the nearest directory containing a go.mod file
                          * root_directory - the nearest directory matching 'run_from_root_target', e.g. the nearest src/ directory
                        
                      "%
                      | optional,
                    run_timeout
                      | std.contract.any_of [ Bool, Number, String ]
                      | optional,
                    run_when | Array String | optional,
                    runtime
                      | String
                      | doc "The runtime, toolchain, and package manager used to run and install a linter"
                      | optional,
                    std_in
                      | Bool
                      | doc "Whether or not this linter takes its input from stdin"
                      | optional,
                    success_codes
                      | Array std.number.Integer
                      | doc "Exit codes corresponding to no issues found or issues found"
                      | optional,
                    suggest_if | String | optional,
                    supported_platforms | Array String | optional,
                    symlinks
                      | Array
                        {
                          from
                            | std.contract.any_of [ Bool, Number, String ]
                            | optional,
                          to
                            | std.contract.any_of [ Bool, Number, String ]
                            | optional,
                          ..
                        }
                      | optional,
                    target
                      | std.contract.any_of [ Bool, Number, String ]
                      | optional,
                    tools
                      | Array (std.contract.any_of [ Bool, Number, String ])
                      | optional,
                    type
                      | String
                      | doc "Output type of this linter; controls how `trunk` parses its output"
                      | optional,
                    version
                      | std.contract.any_of [ Bool, Number, String ]
                      | optional,
                    version_command
                      | {
                        parse_regex
                          | std.contract.any_of [ Bool, Number, String ]
                          | optional,
                        run
                          | std.contract.any_of [ Bool, Number, String ]
                          | optional,
                        ..
                      }
                      | optional,
                    ..
                  }
                ]
            )
            | optional,
          disabled
            | Array (std.contract.any_of [ Bool, Number, String ])
            | optional,
          do_not_recommend_linters
            | Array (std.contract.any_of [ Bool, Number, String ])
            | optional,
          downloads
            | Array
              {
                args
                  | { _ | std.contract.any_of [ Bool, Number, String ] }
                  | optional,
                downloads
                  | Array
                    {
                      cpu
                        | std.contract.any_of
                          [
                            {
                              _ | std.contract.any_of [ Bool, Number, String ]
                            },
                            String
                          ]
                        | optional,
                      gpg
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      os
                        | std.contract.any_of
                          [
                            {
                              _ | std.contract.any_of [ Bool, Number, String ]
                            },
                            String
                          ]
                        | optional,
                      sha256
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      strip_components | std.number.Integer | optional,
                      url
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      version
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      ..
                    }
                  | optional,
                executable | Bool | optional,
                name | std.contract.any_of [ Bool, Number, String ] | optional,
                rename_single_file | Bool | optional,
                version
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                ..
              }
            | optional,
          enabled
            | Array (
              std.contract.any_of
                [
                  String,
                  {
                    _ | {
                      commands
                        | Array (std.contract.any_of [ Bool, Number, String ])
                        | optional,
                      name
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      packages
                        | Array (std.contract.any_of [ Bool, Number, String ])
                        | optional,
                      ..
                    }
                  }
                ]
            )
            | optional,
          environments
            | Array
              {
                environment
                  | Array
                    {
                      list
                        | Array (std.contract.any_of [ Bool, Number, String ])
                        | optional,
                      name
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      "optional" | Bool | optional,
                      value
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      ..
                    }
                  | optional,
                name | std.contract.any_of [ Bool, Number, String ] | optional,
                ..
              }
            | optional,
          exported_configs
            | Array
              {
                configs
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                plugin_id
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                ..
              }
            | optional,
          extra_compilation_flags
            | Array (std.contract.any_of [ Bool, Number, String ])
            | optional,
          files
            | Array
              {
                comments
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                extensions
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                filenames
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                inherit
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                name | std.contract.any_of [ Bool, Number, String ] | optional,
                regexes
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                required_yaml_keys
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                shebangs
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                ..
              }
            | optional,
          hold_the_line_mode | String | optional,
          ignore
            | Array
              {
                linters | refs."definitions.linter_list" | optional,
                paths
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | doc "Paths to exclude from linting"
                  | optional,
                security | Bool | optional,
                when | Array String | optional,
                ..
              }
            | optional,
          landing_mode
            | Array
              {
                landing_mode | String | optional,
                linters
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                ..
              }
            | optional,
          linters
            | Array
              {
                affects_cache
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                allow_empty_files | Bool | optional,
                autogenerated_definition_path
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                batch | Bool | optional,
                cache_results | Bool | optional,
                cache_ttl
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                command
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                commands
                  | Array
                    {
                      allow_empty_files | Bool | optional,
                      batch | Bool | optional,
                      cache_results | Bool | optional,
                      cache_ttl
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      direct_configs
                        | Array (std.contract.any_of [ Bool, Number, String ])
                        | optional,
                      disable_upstream | Bool | optional,
                      enabled | Bool | optional,
                      error_codes | Array std.number.Integer | optional,
                      files
                        | Array (std.contract.any_of [ Bool, Number, String ])
                        | optional,
                      fix_prompt
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      fix_verb
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      formatter | Bool | optional,
                      idempotent | Bool | optional,
                      in_place | Bool | optional,
                      is_security | Bool | optional,
                      max_concurrency | std.number.Integer | optional,
                      max_file_size | std.number.Integer | optional,
                      name
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      no_issues_codes | Array std.number.Integer | optional,
                      output | String | optional,
                      parse_regex
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      parser
                        | {
                          run
                            | std.contract.any_of [ Bool, Number, String ]
                            | optional,
                          runtime | String | optional,
                          ..
                        }
                        | optional,
                      platforms | Array String | optional,
                      prepare_run
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      read_output_from | String | optional,
                      run
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      run_from
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      run_from_root_target
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      run_linter_from | String | optional,
                      run_when | Array String | optional,
                      sandbox_type | String | optional,
                      std_in | Bool | optional,
                      success_codes | Array std.number.Integer | optional,
                      target
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      unformatted_level | String | optional,
                      verbatim_message | Bool | optional,
                      version
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      ..
                    }
                  | optional,
                deprecated
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                description
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                direct_configs
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                disable_upstream | Bool | optional,
                disabled | Bool | optional,
                download
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                enabled | Bool | optional,
                environment
                  | Array
                    {
                      list
                        | Array (std.contract.any_of [ Bool, Number, String ])
                        | optional,
                      name
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      "optional" | Bool | optional,
                      value
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      ..
                    }
                  | optional,
                error_codes | Array std.number.Integer | optional,
                extra_packages
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                files
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                formatter | Bool | optional,
                good_without_config | Bool | optional,
                hold_the_line | Bool | optional,
                idempotent | Bool | optional,
                in_place | Bool | optional,
                include_lfs | Bool | optional,
                include_scanner_type | String | optional,
                is_manual | Bool | optional,
                is_recommended | Bool | optional,
                issue_url_format
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                known_bad_versions
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                known_good_version
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                main_tool
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                name | std.contract.any_of [ Bool, Number, String ] | optional,
                package
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                path_format | String | optional,
                plugin_url
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                prepare_command
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                query_compile_commands | Bool | optional,
                read_output_from | String | optional,
                run_from_root_file
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                run_from_root_target
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                run_linter_from | String | optional,
                run_timeout
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                run_when | Array String | optional,
                runtime | String | optional,
                std_in | Bool | optional,
                success_codes | Array std.number.Integer | optional,
                suggest_if | String | optional,
                supported_platforms | Array String | optional,
                symlinks
                  | Array
                    {
                      from
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      to
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      ..
                    }
                  | optional,
                target
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                tools
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                type | String | optional,
                version
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                version_command
                  | {
                    parse_regex
                      | std.contract.any_of [ Bool, Number, String ]
                      | optional,
                    run
                      | std.contract.any_of [ Bool, Number, String ]
                      | optional,
                    ..
                  }
                  | optional,
                ..
              }
            | optional,
          runtimes
            | Array
              {
                download
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                enabled | Bool | optional,
                known_good_version
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                linter_environment
                  | Array
                    {
                      list
                        | Array (std.contract.any_of [ Bool, Number, String ])
                        | optional,
                      name
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      "optional" | Bool | optional,
                      value
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      ..
                    }
                  | optional,
                runtime_environment
                  | Array
                    {
                      list
                        | Array (std.contract.any_of [ Bool, Number, String ])
                        | optional,
                      name
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      "optional" | Bool | optional,
                      value
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      ..
                    }
                  | optional,
                shims
                  | Array
                    {
                      name
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      target
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      ..
                    }
                  | optional,
                supported_platforms | Array String | optional,
                system_version | String | optional,
                type | String | optional,
                version
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                version_commands
                  | Array
                    {
                      parse_regex
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      run
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      ..
                    }
                  | optional,
                ..
              }
            | optional,
          shared_configs
            | Array
              {
                file | std.contract.any_of [ Bool, Number, String ] | optional,
                regex | std.contract.any_of [ Bool, Number, String ] | optional,
                ..
              }
            | optional,
          skip_missing_compile_command | Bool | optional,
          threshold
            | Array
              {
                level | String | optional,
                linters
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                ..
              }
            | optional,
          triggers
            | Array
              {
                files
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                linters
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                paths
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                regexes
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                targets
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                ..
              }
            | optional,
          ..
        }
        | optional,
      "merge"
        | {
          required_statuses
            | Array (std.contract.any_of [ Bool, Number, String ])
            | optional,
          service | String | optional,
          statuses
            | Array (std.contract.any_of [ Bool, Number, String ])
            | optional,
          ..
        }
        | optional,
      notifications
        | {
          sleep
            | {
              _ | {
                "priority"
                  | { _ | std.contract.any_of [ Bool, Number, String ] }
                  | optional,
                ..
              }
            }
            | optional,
          ..
        }
        | optional,
      plugin_url | std.contract.any_of [ Bool, Number, String ] | optional,
      plugins
        | {
          sources
            | Array
              {
                id | std.contract.any_of [ Bool, Number, String ] | optional,
                implicit | Bool | optional,
                import_to_global | Bool | optional,
                local | std.contract.any_of [ Bool, Number, String ] | optional,
                original_ref
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                ref | std.contract.any_of [ Bool, Number, String ] | optional,
                uri | std.contract.any_of [ Bool, Number, String ] | optional,
                ..
              }
            | optional,
          ..
        }
        | optional,
      repo
        | {
          git
            | {
              allowed_user_email_domains
                | Array (std.contract.any_of [ Bool, Number, String ])
                | optional,
              branch_name_format
                | std.contract.any_of [ Bool, Number, String ]
                | optional,
              new_files_warning_threshold_kb | std.number.Integer | optional,
              ..
            }
            | optional,
          repo
            | {
              host | std.contract.any_of [ Bool, Number, String ] | optional,
              name | std.contract.any_of [ Bool, Number, String ] | optional,
              owner | std.contract.any_of [ Bool, Number, String ] | optional,
              ..
            }
            | optional,
          trunk_branch
            | std.contract.any_of [ Bool, Number, String ]
            | optional,
          trunk_primary_remote
            | std.contract.any_of [ Bool, Number, String ]
            | optional,
          trunk_remote_hint
            | std.contract.any_of [ Bool, Number, String ]
            | optional,
          use_branch_upstream | Bool | optional,
          ..
        }
        | optional,
      required_trunk_version
        | std.contract.any_of [ Bool, Number, String ]
        | optional,
      runtimes
        | {
          definitions
            | Array
              {
                download
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                enabled | Bool | optional,
                known_good_version
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                linter_environment
                  | Array
                    {
                      list
                        | Array (std.contract.any_of [ Bool, Number, String ])
                        | optional,
                      name
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      "optional" | Bool | optional,
                      value
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      ..
                    }
                  | optional,
                runtime_environment
                  | Array
                    {
                      list
                        | Array (std.contract.any_of [ Bool, Number, String ])
                        | optional,
                      name
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      "optional" | Bool | optional,
                      value
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      ..
                    }
                  | optional,
                shims
                  | Array
                    {
                      name
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      target
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      ..
                    }
                  | optional,
                supported_platforms | Array String | optional,
                system_version | String | optional,
                type | String | optional,
                version
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                version_commands
                  | Array
                    {
                      parse_regex
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      run
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      ..
                    }
                  | optional,
                ..
              }
            | optional,
          enabled | Array String | optional,
          ..
        }
        | optional,
      telemetry | String | optional,
      tools
        | {
          auto_sync | Bool | optional,
          definitions
            | Array
              {
                autogenerated_definition_path
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                download
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                enabled | Bool | optional,
                enabled_status | String | optional,
                environment
                  | Array
                    {
                      list
                        | Array (std.contract.any_of [ Bool, Number, String ])
                        | optional,
                      name
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      "optional" | Bool | optional,
                      value
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      ..
                    }
                  | optional,
                extra_packages
                  | Array (std.contract.any_of [ Bool, Number, String ])
                  | optional,
                health_checks
                  | Array
                    {
                      check_stderr | Bool | optional,
                      command
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      exit_code | std.number.Integer | optional,
                      parse_regex
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      platforms | Array String | optional,
                      ..
                    }
                  | optional,
                known_good_version
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                name | std.contract.any_of [ Bool, Number, String ] | optional,
                package
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                runtime | String | optional,
                shims
                  | Array
                    {
                      name
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      target
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      ..
                    }
                  | optional,
                version
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                version_constraint
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                ..
              }
            | optional,
          disabled
            | Array (std.contract.any_of [ Bool, Number, String ])
            | optional,
          downloads
            | Array
              {
                args
                  | { _ | std.contract.any_of [ Bool, Number, String ] }
                  | optional,
                downloads
                  | Array
                    {
                      cpu
                        | { _ | std.contract.any_of [ Bool, Number, String ] }
                        | optional,
                      gpg
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      os
                        | { _ | std.contract.any_of [ Bool, Number, String ] }
                        | optional,
                      sha256
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      strip_components | std.number.Integer | optional,
                      url
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      version
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      ..
                    }
                  | optional,
                executable | Bool | optional,
                name | std.contract.any_of [ Bool, Number, String ] | optional,
                rename_single_file | Bool | optional,
                version
                  | std.contract.any_of [ Bool, Number, String ]
                  | optional,
                ..
              }
            | optional,
          enabled
            | Array (
              std.contract.any_of
                [
                  String,
                  {
                    _ | {
                      name
                        | std.contract.any_of [ Bool, Number, String ]
                        | optional,
                      packages
                        | Array (std.contract.any_of [ Bool, Number, String ])
                        | optional,
                      ..
                    }
                  }
                ]
            )
            | optional,
          runtimes | Array String | optional,
          ..
        }
        | optional,
      version
        | js2n.Enum [ "0.1", 0.1 ]
        | doc "The trunk config version being parsed. The only possible value is 0.1.",
      ..
    }